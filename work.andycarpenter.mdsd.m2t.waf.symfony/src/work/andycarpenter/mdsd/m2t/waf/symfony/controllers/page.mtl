[comment encoding = UTF-8 /]
[module page(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::actions/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::attributes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::collectionMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::commonMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::detailsMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::editMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::staticMethods/]


[query private hasSingleAuthorisationRole (page : Page) : Boolean
	= units->exists(u | u.authorisationRoles.trim().tokenize(',; ')->size() = 1)
		or dynamicUnits->exists(u | u.actions->exists(a | a.authorisationRoles.trim().tokenize(',; ')->size() = 1))
/]

[query private hasMultipleAuthorisationRoles (page : Page) : Boolean
	= units->exists(u | u.authorisationRoles.trim().tokenize(',; ')->size() > 1)
		or dynamicUnits->exists(u | u.actions->exists(a | a.authorisationRoles.trim().tokenize(',; ')->size() > 1))
/]

[query private entitiesUsed(page : Page) : Sequence(Entity)
	= page.editUnits
			->select(u | not u.oclIsTypeOf(UpdateUnit) or page.units->size() > 1)
			->collect(u | u.contentType)
		->union(page.collectionUnits
			->select(u | u.hasPagination and (not page.hasSingleActionMethod() or u.hasSelectionMethod()))
			->collect(u | u.contentType))
		->union(page.collectionUnits
			->select(u | u.isContained and not u.containingTypeLoadedElsewhere()
								and (not page.hasSingleActionMethod() or u.hasSelectionMethod()))
			->collect(u | u.containingType))
		->asSet()->asSequence()
/]

[query private repositoriesUsed(page : Page) : Sequence(Repository)
	= let containerRepositories : Set(Repository)
		= page.editUnits
			->select(u | u.oclIsTypeOf(CreateUnit) or u.oclIsTypeOf(CreateUpdateUnit))
			->select(u | not u.hasExplicitlyEditedContainer)
			->select(u | not u.containingType.oclIsUndefined())
			->collect(u | u.containingType.repository)
			->asSet()
		in page.repositoriesUsed->asSet()
			->union(containerRepositories)
			->asSequence()
			->sortedBy(r | r.name)
/]

[query private hasSupportMethods(page : Page) : Boolean
	= page.units->select(u | u.hasSupportMethods())->notEmpty()
/]


[template public controller(page : Page, model : WafModel)]
[file(page.controllerFilename(model), false)]
<?php
[if (model.hasAPI)]
namespace [page.webControllersNamespace()/];
[else]
namespace [page.controllersNamespace()/];
[/if]

[page.useStatements()/]


class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{
    [page.properties()/]

    [page.constructor()/]

[if (page.hasSingleActionMethod())]
    [page.actionMethod()/]

	[if (page.hasSupportMethods())]
		[for (unit : ContentUnit | page.units->select(u | u.hasSupportMethods()))]
    [unit.actionSupportMethods()/]

		[/for]
	[/if]
	[for (action : Action | page.actionsWithoutTarget)]
    [action.actionMethod()/]

	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits)]
    [unit.unitMethods()/]

		[for (action : Action | unit.actionsWithoutTarget)]
    [action.actionMethod()/]

		[/for]
	[/for]
	[if (page.hasUnits)]
    [page.renderMethod()/]
	[/if]
[/if]
}
[/file]
[/template]

[template private useStatements(page : Page) post(trim())]
[for (entity : Entity | page.entitiesUsed()->sortedBy(e | e.name))]
use [entity.modelsNamespace()/]\[entity.modelClassName()/];
[/for]
[for (form : SingletonUnit | page.formUnits->sortedBy(u | u.name))]
use [form.formNamespace()/]\[form.typeClassName()/];
[/for]
[for (repository : Repository | page.repositoriesUsed())]
use [repository.repositoryNamespace()/]\[repository.className()/];
[/for]
[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
use [service.serviceNamespace()/]\[service.className()/];
[/for]
[if (page.editUnits->collect(u | u.formFields)->select(f | f.isContains)->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (page.hasCollectionUnits)]
	[if (page.collectionUnits->select(u | u.hasPagination)->notEmpty())]
use Doctrine\ORM\Tools\Pagination\Paginator;
	[/if]
[/if]
[if (page.hasCaptchaUnits)]
use Karser\Recaptcha3Bundle\Validator\Constraints\Recaptcha3Validator;
[/if]
[if (page.hasEditUnits)]
use Symfony\Component\Form\FormInterface;
[/if]
[if (page.hasSingleAuthorisationRole())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
[/if]
[if (page.hasMultipleAuthorisationRoles())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
[/if]
use Symfony\Bundle\FrameworkBundle\Controller\[page.baseControllerClassName()/];
[if (page.hasFileActions)]
use Symfony\Component\HttpFoundation\BinaryFileResponse;
[/if]
[if (page.hasFiltersOrPagination() or page.hasEditUnits)]
use Symfony\Component\HttpFoundation\Request;
[/if]
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Contracts\Translation\TranslatorInterface;
[/template]

[template private properties(page : Page) post(trim())]
[for (repository : Repository | page.repositoriesUsed())]
/**
 * @var [repository.className()/] $[repository.instanceName()/]
 */
private [repository.className()/] $[repository.instanceName()/];

[/for]
[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
/**
 * @var [service.className()/] $[service.instanceName()/]
 */
private [service.className()/] $[service.instanceName()/];

[/for]
[for (unit : ContentUnit | page.units->sortedBy(u | u.name))]
	[if (not page.hasSingleActionMethod() or unit.hasSelectionMethod())]
		[if (unit.oclIsKindOf(EditUnit))]
/**
 * @var FormInterface<string> $[unit.oclAsType(EditUnit).formName()/]
 */
private FormInterface $[unit.oclAsType(EditUnit).formName()/];

		[elseif (unit.oclIsKindOf(CollectionUnit))]
		[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
/**
 * @var array<int, [unit.modelClassName()/]>[if (unit.oclAsType(CollectionUnit).hasPagination)]
|Paginator<[unit.modelClassName()/]>[/if] $[unit.instanceName()/]
 */
private [if (not unit.oclAsType(CollectionUnit).hasPagination)]array [/if]$[unit.instanceName()/];

			[if (collectionUnit.isContained and not collectionUnit.containingTypeLoadedElsewhere())]
/**
 * @var [collectionUnit.containingType.modelClassName()/] $[collectionUnit.containerInstanceName()/]
 */
private [collectionUnit.containingType.modelClassName()/] $[collectionUnit.containerInstanceName()/];

			[/if]
			[if (not collectionUnit.inlineSelectCode() and collectionUnit.hasPagination)]
/**
 * @var int $[collectionUnit.pageNumberName()/]
 */
private int $[collectionUnit.pageNumberName()/];

				[if (collectionUnit.maximumPaginationSize > 0)]
/**
 * @var int $[collectionUnit.pageSizeName()/]
 */
private int $[collectionUnit.pageSizeName()/];

				[/if]
			[/if]
		[/let]
		[else]
/**
 * @var [unit.modelClassName()/] $[unit.instanceName()/]
 */
private [unit.modelClassName()/] $[unit.instanceName()/];

		[/if]
	[/if]
[/for]
/**
 * @var TranslatorInterface $translationService
 */
private TranslatorInterface $translationService;
[/template]

[template private constructor(page : Page) post(trim())]
public function __construct([for (repository : Repository | page.repositoriesUsed()) separator (', ')]
[repository.className()/] $[repository.instanceName()/][/for][if (page.repositoriesUsed()->notEmpty() and page.hasServicesUsed)]
, [/if][for (service : Service | page.servicesUsed->sortedBy(s | s.name)) separator (', ')]
[service.className()/] $[service.instanceName()/][/for][if (page.repositoriesUsed()->notEmpty() or page.hasServicesUsed)]
, [/if]TranslatorInterface $translator)
{
[for (repository : Repository | page.repositoriesUsed())]
    $this->[repository.instanceName()/] = $[repository.instanceName()/];
[/for]
[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
    $this->[service.instanceName()/] = $[service.instanceName()/];
[/for]
    $this->translationService = $translator;
}
[/template]

[template private actionMethod(page : Page) post(trim())]
/**
 */
[if (page.isAuthorised)]
[page.securityAttribute()/]
[/if]
[page.routeAttribute()/]
public function [page.actionName()/]([page.actionMethodFormals()/]): Response
{
[for (unit : DynamicUnit | page.dynamicUnits)]
    [unit.actionCore()/]

[/for]
    [page.renderCore()/]
}
[/template]

[template private renderMethod(page : Page) post(trim())]
private function renderPage([if (page.hasFiltersOrPagination())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if][for (key : Attribute | page.routeParameters()) separator(', ')]
string $[key.routeParameterName(page.routeParameters())/][/for]): Response
{
    [page.renderCore()/]
}
[/template]

[template private renderCore(page : Page) post(trim())]
$parameters = ['['/][']'/];
[page.templateParameters()/]
[for (unit : ContentUnit | page.units)]
[unit.templateParameters()/]
[/for]

return $this->render('[page.templateName()/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/template]


[template private actionMethod(action : Action)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.parentUnit]
/**
 */
[if (deleteAction.isAuthorised)]
[deleteAction.securityAttribute()/]
[/if]
[deleteAction.routeAttribute(deleteAction.uriElement)/]
public function [deleteAction.actionName()/]([action.actionMethodFormals()/]): Response
{
    [deleteAction.loadInstance()/]
    $this->[unit.contentRepository.instanceName()/]->remove($[deleteAction.instanceName()/], true);

[if (unit.oclIsKindOf(CollectionUnit))]
    return [action.redirect(action.routeActionReturnName(), deleteAction.routeParameters())/];
[else]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(UnitFeature)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = action.parentUnit]
/**
 */
[if (operationAction.isAuthorised)]
[operationAction.securityAttribute()/]
[/if]
[operationAction.routeAttribute(operationAction.uriElement)/]
public function [operationAction.actionName()/]([unit.actionMethodFormals()/]): [if (operationAction.operation.resultType = OperationResultTypes::None)]
Response[else]BinaryFileResponse[/if]
{
[if (operationAction.operation.resultType = OperationResultTypes::None)]
[elseif (operationAction.operation.resultType = OperationResultTypes::File)]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(DynamicUnit)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = operationAction.parentUnit]
/**
 */
[if (operationAction.isAuthorised)]
[operationAction.securityAttribute()/]
[/if]
[if (action.oclIsTypeOf(InstanceOperationAction))]
[operationAction.routeAttribute(operationAction.uriElement)/]
[elseif (action.oclIsTypeOf(ContainerOperationAction))]
[operationAction.routeContainerAttribute()/]
[else]
[operationAction.routeGeneralAttribute()/]
[/if]
public function [operationAction.actionName()/]([if (action.oclIsTypeOf(InstanceOperationAction))]
[action.actionMethodFormals()/][elseif (action.oclIsTypeOf(ContainerOperationAction))]
[action.actionMethodContainerFormals()/][else]
[/if]): [if (operationAction.operation.resultType = OperationResultTypes::None)]
Response[else]BinaryFileResponse[/if]

{
[if (not operationAction.operation.oclIsUndefined())]
    [operationAction.actionMethodBody()/]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.operation.resultType = OperationResultTypes::None) post(trim())]
[if (action.oclIsTypeOf(GeneralOperationAction))]
	[if (action.hasSuccessMessage and action.hasFailureMessage or action.hasFailureMessage)]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]();
[else]
	[if (action.isInstanceAction)]
[action.loadInstance()/]
	[else]
[action.loadContainer()/]
	[/if]
	[if (action.hasSuccessMessage and action.hasFailureMessage or action.hasFailureMessage)]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]([action.instanceVariable()/]);
[/if]
[if (action.hasSuccessMessage or action.hasFailureMessage)]
[action.actionResultFlash()/]
[/if]
[let routeParameters : Sequence(Attribute)
	= if action.oclIsTypeOf(InstanceOperationAction) then 
			action.routeParameters()
		else if action.oclIsTypeOf(ContainerOperationAction) then
			action.parentUnit.routeParameters()
		else
			Sequence{}
		endif endif]
return [action.redirect(action.routeActionReturnName(), routeParameters)/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.operation.resultType = OperationResultTypes::File) post(trim())]
[if (action.oclIsTypeOf(GeneralOperationAction))]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]();
$response = $this->file($file, '[action.name/][if (not action.fileExtension.oclIsUndefined())]
[action.fileExtension/][/if]');
return $response;
[else]
	[if (action.isInstanceAction)]
[action.loadInstance()/]
	[else]
[action.loadContainer()/]
	[/if]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]([action.instanceVariable()/]);
$response = $this->file($file, [action.filename()/][if (not action.fileExtension.oclIsUndefined())]
 . '[action.fileExtension/]'[/if]);
return $response;
[/if]
[/template]

[template private filename(action : Action) post(trim())]
[if (action.isInstanceAction)]
$[action.instanceName()/]->[action.parentUnit.contentType.accessFilename()/]
[elseif (not action.oclIsTypeOf(GeneralOperationAction))]
$[action.instanceName()/]->[action.parentUnit.containingType.accessFilename()/]
[else]]
'[action.name/]'
[/if]
[/template]

[template private accessFilename(entity : Entity) post(trim())]
[if (entity.attributeKeys->notEmpty())]
[entity.attributeKeys->first().getMethodName()/]()
[else]
[entity.containingAssociation.getMethodName()/]()->[entity.containingType.accessFilename()/]
[/if]
[/template]