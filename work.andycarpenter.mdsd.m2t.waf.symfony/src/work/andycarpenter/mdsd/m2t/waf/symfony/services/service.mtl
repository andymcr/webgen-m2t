[comment encoding = UTF-8 /]
[module service(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service')]
[import work::andycarpenter::mdsd::m2t::expression::constantExpression/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::constant/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::repository::queryDoctrine/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::types/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[query private entitiesUsed(service : Service) : Sequence(Entity)
	= service.operations
		->collect(o | o.parameters)
		->select(p | not p.dataType.oclIsUndefined())
		->select(p | p.dataType.oclIsKindOf(Entity))
		->collect(p | p.dataType).oclAsType(Entity)
		->asSet()
		->asSequence()
		->sortedBy(e | e.name)
/]


[template public service(service : Service)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.serviceNamespace()/];

[for (entity : Entity | service.entitiesUsed())]
use [entity.modelsNamespace()/]\[entity.modelClassName()/];
[/for]
[for (repository : Repository | service.requires)]
use [repository.repositoriesNamespace()/]\[repository.repositoryClassName()/];
[/for]
[for (service : Service | service.uses)]
use [service.serviceNamespace()/]\[service.serviceClassName()/];
[/for]
[if (service.usesVichUploaderService)]
use Vich\UploaderBundle\Templating\Helper\UploaderHelper;
[/if]
// [protected ('use')]
// [/protected]

class [service.serviceClassName()/]
{
[for (constant : Constant | service.constants)]
    [if (constant.useFunction())]
    private static function [constant.name/]
    {
        // [protected (constant.name)]
        // [/protected]
   }
	[else]
    private const [constant.name.snakeCase().toUpperCase()/] = [constant.value.constantExpression()/];
	[/if]

[/for]
// [protected ('constants')]
// [/protected]

// [protected ('variables')]
// [/protected]

[for (repository : Repository | service.requires)]
    /**
     * @var [repository.repositoryClassName()/] $[repository.repositoryInstanceName()/]
     */
    private [repository.repositoryClassName()/] $[repository.repositoryInstanceName()/];

[/for]
[for (service : Service | service.uses)]
    /**
     * @var [service.serviceClassName()/] $[service.instanceName()/]
     */
    private [service.serviceClassName()/] $[service.instanceName()/];

[/for]
[if (service.usesVichUploaderService)]
    /**
     * @var UploaderHelper $uploaderHelper
     */
    private UploaderHelper $uploaderHelper;

    /**
     * @var string $projectDir
     */
    private string $projectDir;

    /**
     * @var string $imagePrefix
     */
    private string $imagePrefix;

[/if]
[if (service.requires->notEmpty() or service.uses->notEmpty())]
    public function __construct([for (repository : Repository | service.requires) separator (', ')]
[repository.repositoryClassName()/] $[repository.repositoryInstanceName()/][/for][if (service.requires->notEmpty() and service.uses->notEmpty())]
, [/if][for (service : Service | service.uses) separator (', ')]
[service.serviceClassName()/] $[service.instanceName()/][/for][if (service.usesVichUploaderService)]
, UploaderHelper $uploaderHelper, string $projectDir, string $imagePrefix[/if])
    {
	[for (repository : Repository | service.requires)]
        $this->[repository.repositoryInstanceName()/] = $[repository.repositoryInstanceName()/];
	[/for]
	[for (service : Service | service.uses)]
        $this->[service.instanceName()/] = $[service.instanceName()/];
	[/for]
	[if (service.usesVichUploaderService)]
        $this->uploaderHelper = $uploaderHelper;
        $this->projectDir = $projectDir;
        $this->imagePrefix = $imagePrefix;
	[/if]
    }

[/if]
[for (constant : Constant | service.constants->select(c | c.useFunction()))]
    public static function [constant.name/]()
    {
	[if (constant.value.oclIsUndefined())]
        // [protected ('constant '.concat(constant.name))]
        // [/protected]
	[else]
		[if (constant.value.oclIsTypeOf(TimeLiteral))]
        if (empty($[constant.name/])) {
            $[constant.name/] = new \DateTime('[constant.value.oclAsType(TimeLiteral).value/]');
        }

        return $[constant.name/];
		[/if]
	[/if]
    }

[/for]
[for (operation : BusinessOperation | service.operations)]
    [operation.businessOperation()/]

[/for]
/*
 * [protected ('support')]
 */
// [/protected]
}
[/file]
[/template]

[template private businessOperation(operation : BusinessOperation) post(trim())]
/**
 *
[for (parameter : FormalParameter | operation.parameters)]
 * @param [parameter.implementationType()/] $[parameter.name/][if (parameter.description <> '')] [parameter.description/][/if]
[/for]
[if (operation.resultType = OperationResultTypes::File)]
 * @return String
[/if]
 */
public function [operation.methodName()/]([operation.formalParameters()/]): [if (operation.resultType = OperationResultTypes::File)]
String[else]void[/if]

{
    // [protected ('operation.'.concat(operation.methodName()))]
    // [/protected]
}
[/template]

[template private formalParameters(operation : BusinessOperation) post(trim())]
[for (parameter : FormalParameter | operation.parameters) separator(', ')]
[parameter.implementationType()/] $[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())] = [parameter.defaultValue/][/if][/for]
[/template]
