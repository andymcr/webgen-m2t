[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://andycarpenter.work/metamodel/api',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]


[query public hasCommonUriPaths(controller : Controller) : Boolean
	= if controller.dynamicUnits->size() < 2 then
			true
		else
			controller.dynamicUnits
				->subOrderedSet(2, controller.dynamicUnits->size())
				->forAll(u | u.uriUnitPath() = controller.dynamicUnits->first().uriUnitPath())
		endif
/]


[query public uriPath(element : ForgottenPasswordElement) : String
	= '/'. concat(element.uriElement)
/]

[query public uriEmailSentPath(element : ForgottenPasswordElement) : String
	= element.uriPath()
		.combinePaths(element.uriEmailSent)
/]

[query public uriResetPasswordPath(element : ForgottenPasswordElement) : String
	= element.uriPath()
		.combinePaths(element.uriResetPassword)
		.combinePaths('{token}')
/]

[query public uriPath(element : LoginElement) : String
	= '/'. concat(element.uriElement)
/]

[query public uriPath(element : LogoutElement) : String
	= '/'. concat(element.uriElement)
/]

[query public uriPath(element : RegistrationElement) : String
	= '/'. concat(element.uriElement)
/]

[query public uriEmailVerificationPath(element : RegistrationElement) : String
	= element.uriPath()
		.combinePaths(element.uriEmailVerification)
/]

[query public uriPath(element : ChangePasswordElement) : String
	= '/'. concat(element.uriElement).combinePaths('{token}')
/]


[query public uriPath(controller : Controller) : String
	= if controller.units->isEmpty() then
			controller.uriControllerPath()
		else
			controller.units->first().uriUnitPath()
		endif
/]

[query private uriControllerPath(controller : Controller) : String
	= if controller.parentController.oclIsUndefined() then
			'/'.concat(controller.uriElement)
		else
			controller.parentController.uriControllerPath().combinePaths(controller.uriElement)
		endif
/]

[query public uriUnitPath(unit : ContentUnit) : String
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).uriPath()
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).uriPath()
		else if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).uriPath()
		else if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).uriPath()
		else if unit.oclIsKindOf(StaticUnit) then
			unit.oclAsType(StaticUnit).uriPath()
		else
			'Unknown unit type'
		endif endif endif endif endif
/]

[query public uriPath(unit : CollectionUnit) : String
	= if unit.controller.collectionUnits->first() = unit then
			unit.uriPath(unit.routeParameters())
		else if unit.controller.collectionUnits->first().contentType = unit.contentType then
			unit.uriPath(unit.routeParameters())
		else
			unit.controller.collectionUnits->first().uriPath(unit.routeParameters())
				.combinePaths(unit.containerType.keysPath(unit.routeParameters()))
				.combinePaths(unit.uriElement)
		endif endif
/]

[query public uriPath(unit : CollectionUnit, routeParameters : Sequence(Attribute)) : String
	= if unit.selection.oclIsUndefined() then
			unit.uriPath(unit.contentType.parentEntity(), unit.uriElement, routeParameters)
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType, unit.uriElement, routeParameters)
		else
			unit.uriPath(unit.contentType.parentEntity(), unit.uriElement, routeParameters)
		endif endif
/]

[query public uriPath(unit : DetailsUnit) : String
	= if unit.selection.oclIsUndefined() then
			unit.uriPath(unit.contentType, unit.uriElement, unit.routeParameters())
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType, unit.uriElement, unit.routeParameters())
		else
			unit.uriPath(unit.contentType, unit.uriElement, unit.routeParameters())
		endif endif
/]

[query public uriCreatePath(unit : EditUnit) : String
	= if unit.controller.editUnits->size() = 1 then
			if unit.routingType().oclIsUndefined() then
				unit.controller.uriControllerPath()
					.combinePaths(unit.uriElement)
			else
				unit.controller.uriControllerPath()
					.combinePaths(unit.routingType().keysPath(unit.routeParameters()))
					.appendKeySeparator(unit.contentType)
					.combinePaths(unit.uriElement)
			endif
		else if unit.controller.collectionUnits->exists(u | u.contentType = unit.contentType) then
			unit.controller.collectionUnits->any(u | u.contentType = unit.contentType).uriPath()
				.combinePaths(unit.uriElement)
		else
			unit.routingType().keysPath(unit.routeParameters())
				.appendKeySeparator(unit.contentType)
				.combinePaths(unit.uriElement)
		endif endif
/]

[query public uriUpdatePath(unit : EditUnit) : String
	= let suffix : String
		= if unit.oclIsTypeOf(CreateUpdateUnit) then
				unit.oclAsType(CreateUpdateUnit).updateUriElement
			else
				unit.uriElement
			endif
		in if unit.controller.collectionUnits->exists(u | u.contentType = unit.contentType) then
			unit.controller.collectionUnits
				->any(u | u.contentType = unit.contentType).uriPath(unit.routeUpdateParameters())
				.combinePaths(unit.contentType.keyEntity().keyPath(unit.routeUpdateParameters()))
				.combinePaths(suffix)
		else if unit.isRoutingUnit() then
			unit.controller.uriControllerPath()
				.combinePaths(unit.contentType.keysPath(unit.routeUpdateParameters()))
				.combinePaths(suffix)
		else 
			unit.controller.uriControllerPath()
				.combinePaths(unit.contentType.keysPath(unit.routeUpdateParameters()))
				.appendKeySeparator(unit.contentType)
				.combinePaths(suffix)
		endif endif
/]

[query public uriPath(unit : SingletonUnit) : String
	= unit.uriPath(unit.contentType, unit.uriElement, unit.routeParameters())
/]

[query public uriPath(unit : StaticUnit) : String
	= unit.controller.uriControllerPath()
		.combinePaths(unit.uriElement)
/]

[query private uriPath(unit : DynamicUnit, routingType : Entity, suffix : String, routeParameters : Sequence(Attribute)) : String
	= if routingType.oclIsUndefined() then
			unit.controller.uriControllerPath()
				.combinePaths(suffix)
		else
			unit.controller.uriControllerPath()
				.combinePaths(routingType.keysPath(routeParameters))
				.combinePaths(suffix)
		endif
/]

[query public uriPath(action : Action, suffix : String) : String
	= if action.parentUnit.oclIsKindOf(CollectionUnit) then
			action.uriPath(
				action.parentUnit.oclAsType(CollectionUnit).findElementSelection,
				suffix)
		else
			action.parentUnit.uriPath(action.parentUnit.contentType, suffix, action.routeParameters())
		endif
/]

[query private uriPath(action : Action, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			action.uriPath(action.parentUnit.contentType, suffix, action.routeParameters())
		else if selection.selectPath->notEmpty() then
			action.uriPath(selection.selectionType, suffix, action.routeParameters())
		else
			action.uriPath(action.parentUnit.contentType, suffix, action.routeParameters())
		endif endif
/]

[query private uriPath(action : Action, routingType : Entity, suffix : String, routeParameters : Sequence(Attribute)) : String
	= let parentUriElement : String
		= if action.parentUnit.isRoutingUnit() then
				''
			else
				action.parentUnit.uriElement
			endif
		in if routingType.oclIsUndefined() then
				action.parentUnit.controller.uriControllerPath()
					.combinePaths(parentUriElement)
					.combinePaths(suffix)
			else
				action.parentUnit.controller.uriControllerPath()
					.combinePaths(parentUriElement)
					.combinePaths(routingType.keysPath(routeParameters))
					.combinePaths(suffix)
			endif
/]

[query public uriContainerPath(unit : DynamicUnit, suffix : String) : String
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.uriContainerPath(
				unit.oclAsType(CollectionUnit).findContainerSelection,
				suffix)
		else if (unit.oclIsKindOf(SingletonUnit)) then
			unit.uriPath(unit.oclAsType(SingletonUnit).contentType.containingType, suffix, unit.routeContainerParameters())
		else
			unit.uriPath(null, suffix, unit.routeContainerParameters())
		endif endif
/]

[query private uriContainerPath(unit : DynamicUnit, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			unit.uriPath(unit.contentType.containingType, suffix, unit.routeContainerParameters())
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType, suffix, unit.routeContainerParameters())
		else
			unit.uriPath(unit.contentType.containingType, suffix, unit.routeContainerParameters())
		endif endif
/]

[query public uriContainerPath(action : OperationAction) : String
	= action.parentUnit.uriPath(
		action.parentUnit.contentType.containingType,
		action.uriElement,
		action.parentUnit.routeContainerParameters())
/]

[query public uriGeneralPath(action : OperationAction) : String
	= action.parentUnit.controller.uriControllerPath()
		.combinePaths(action.uriElement)
/]


[query private keysPath(elementType : Entity, routeParameters : Sequence(Attribute)) : String
	= let keyType : Entity = elementType.keyEntity()
		in if not keyType.isContained or routeParameters->isEmpty() then
				keyType.keyPath(routeParameters)
			else
				let containingPath : String = keyType.containingType.keysPath(routeParameters)
					in if containingPath = '' then
							keyType.keyPath(routeParameters)
						else
							containingPath
								.appendKeySeparator(keyType)
								.combinePaths(keyType.keyPath(routeParameters))
						endif
			endif
/]

[query private keyPath(elementType : Entity, routeParameters : Sequence(Attribute)) : String
	= let activeKeys : OrderedSet(Attribute)
		= elementType.attributeKeys
			->select(k | routeParameters->includes(k))
		in if activeKeys->isEmpty() then
				''
			else
				activeKeys
					->collect(k | k.routeParameterName(routeParameters))->sep('{', '}/{', '}')
					->toString()
			endif
/]


[query public uriPath(resource : Resource) : String
	= resource.uriPath(false)
/]

[query public uriPath(resource : Resource, basePath : Boolean) : String
	= resource.uriPath(basePath, resource)
/]

[query private uriPath(resource : Resource, baseUriOnly : Boolean, base : Resource) : String
	= let parentUri : String
		= if resource.parentResource.oclIsUndefined() then
				'/'
			else if baseUriOnly then
				resource.parentResource.uriPath()
			else
				resource.parentResource.uriPath(false, base)
			endif endif
		in let baseUri : String
			= parentUri.combinePaths(resource.uriElement)
			in if baseUriOnly then
					baseUri
				else
					baseUri.combinePaths(resource.repository.serves.keyEntity().keyPath(base))
				endif
/]

[query private keyPath(entity : Entity, base : Resource) : String
	= if entity.hasAttributeKeys then
			''
		else
			entity.attributeKeys
				->collect(k | k.routeParameterName(base))->sep('{', '}/{', '}')->toString()
		endif
/]


[query public uriPathValidatedKeys(controller : Controller) : Sequence(Attribute)
	= Sequence{} -- controller.routeParameters()
--		->select(k | not k .validationPattern.oclIsUndefined())
--		->select(k | k.validationPattern <> '[^/]+')
/]

[query public hasValidatedRouteParameters(controller : Controller) : Boolean
	= controller.uriPathValidatedKeys()->notEmpty()
/]

[query public uriPathValidatedKeys(unit : DynamicUnit, parentPath : Boolean) : Sequence(Attribute)
	= let selectType : Entity
			= if not parentPath then
					unit.routingType()
				else
					unit.contentType.parentEntity()
				endif
		in if selectType.oclIsUndefined() then
				Sequence{}
			else
Sequence{} --				selectType.uriPathKeys()
--					->select(k | not k .validationPattern.oclIsUndefined())
--					->select(k | k.validationPattern <> '[^/]+')
			endif
/]

[query public hasValidatedRouteParameters(unit : DynamicUnit, parentPath : Boolean) : Boolean
	= unit.uriPathValidatedKeys(parentPath)->notEmpty()
/]


[query public routeParameterName(attribute : Attribute, parameters : Sequence(Attribute)) : String
	= if parameters->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.oclAsType(Entity).modelClassName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif
/]

[query public routeParameterName(attribute : Attribute, resource : Resource) : String
	= if resource.oclIsUndefined() then
			attribute.name
		else if resource.routeParameters()->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.oclAsType(Entity).modelClassName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif endif
/]


[query public combinePaths(path1 : String, path2 : String) : String
	= if path1 = '' then
			path2
		else if path2.oclIsUndefined() then
			path1
		else if path2 = '' then
			path1
		else if path1 ='/' then
			path1.concat(path2)
		else
			path1.concat('/').concat(path2)
		endif endif endif endif
/]

[query private appendKeySeparator(path : String, contentType : Entity) : String
	= if contentType.parentEntity().oclIsUndefined() then
			path
		else
			path.combinePaths(contentType.containingAssociation.opposite.name)
		endif
/]