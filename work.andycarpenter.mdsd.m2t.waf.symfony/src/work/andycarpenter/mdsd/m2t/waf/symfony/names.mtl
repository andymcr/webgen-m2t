[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://andycarpenter.work/metamodel/api',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]


[query public alias(attribute : UnitAttribute) : String
	= if attribute.displayedOn.oclIsKindOf(CollectionUnit) then
			let unit : CollectionUnit = attribute.displayedOn.oclAsType(CollectionUnit)
				in if unit.selection.oclIsUndefined() then
						null
					else
						attribute.attribute.alias(unit.selection)
					endif
		else if attribute.displayedOn.oclIsKindOf(DetailsUnit) then
			let unit : DetailsUnit = attribute.displayedOn.oclAsType(DetailsUnit)
				in if unit.selection.oclIsUndefined() then
						null
					else
						attribute.attribute.alias(unit.selection)
					endif
		else
			null
		endif endif
/]

[query public alias(association : UnitResource) : String
	= null
/]

[query public alias(association : UnitAssociation) : String
	= null
/]


[query public appName(eObject : EObject) : String
	= 'App'
/]

[query public authenticationPrefix(eObject : EObject) : String
	= 'Authentication'
/]

[query public authenticationTemplate(eObject : EObject) : String
	= 'authentication'
/]

[query public autocompleteTypeSuffix(eObject : EObject) : String
	= 'Autocomplete'.concat(eObject.typeSuffix())
/]

[query public filterSuffix(eObject : EObject) : String
	= 'Filter'
/]

[query public searchSuffix(eObject : EObject) : String
	= 'Search'
/]

[query public typeSuffix(eObject : EObject) : String
	= 'Type'
/]

[query public unitPrefix(eObject : EObject) : String
	= 'Unit'
/]


[query public filterName(type : EnumerationType) : String
	= type.name.toLowerFirst()
/]

[query public formTypeName(type : EnumerationType) : String
	= type.name.toLowerFirst()
/]

[query public typeClassName(type : EnumerationType) : String
	= type.modelClassName().concat(type.typeSuffix())
/]


[query public formsUsing(entity : Entity, model : WafModel) : Sequence(SingletonUnit)
	= model.controllers
		->collect(c | c.units)
		->select(u | u.oclIsKindOf(SingletonUnit)).oclAsType(SingletonUnit)
		->select(u | u.oclIsKindOf(EditUnit) or u.oclIsKindOf(ControlUnit))
		->select(u | u.contentType = entity)
		->sortedBy(u | u.name)
/]


[query public controllerName(resource : Resource) : String
	= resource.name
/]

[query public controllerClassName(resource : Resource) : String
	= resource.controllerName().concat('Controller').toUpperFirst()
/]


[query public authenticatorName(authentication : LocalAuthenticationSystem) : String
	= 'LoginFormAuthenticator'
/]

[query public filterEntityClassName(unit : CollectionUnit) : String
	= unit.contentType.pluralisedName.concat(unit.searchSuffix())
/]

[query public filterFormClassName(unit : CollectionUnit) : String
	= unit.controllerName().concat(unit.name.toUpperFirst()).concat(unit.typeSuffix())
/]

[query public filterBaseClassName(object : EObject) : String
	= 'AbstractFilter'
/]

[query public filterInterfaceClassName(object : EObject) : String
	= 'FilterInterface'
/]

[query public filterClassName(object : EObject, filterName : String) : String
	= filterName.concat(object.filterSuffix())
/]

[query public className(filter : CollectionFilter) : String
	= if filter.oclIsTypeOf(ArrayFilter) then
				'Array'
			else if filter.oclIsTypeOf(BooleanFilter) then
				'Boolean'
			else if filter.oclIsTypeOf(ChoiceFilter) then
				'Choice'
			else if filter.oclIsTypeOf(DateTimeFilter) then
				'DateTime'
			else if filter.oclIsTypeOf(EntityFilter) then
				'Entity'
			else if filter.oclIsTypeOf(NullFilter) then
				'Null'
			else if filter.oclIsTypeOf(NumericFilter) then
				'Numeric'
			else if filter.oclIsTypeOf(TextFilter) then
				'Text'
			else
				''
			endif endif endif endif endif endif endif endif.concat(filter.filterSuffix())
/]

[query public filterTraitName(object : EObject) : String
	= 'UnitFilterTrait'
/]

[query public controllerClassName(authentication : LocalAuthenticationSystem) : String
	= authentication.authenticationPrefix().concat('Controller').toUpperFirst()
/]

[query public actionName(element : AuthenticationElement) : String
	= element.instanceName()
/]

[query public csrfTokenId(element : AuthenticationElement) : String
	= element.authenticationPrefix().toLowerCase()
		.concat('_')
		.concat(element.name.snakeCase())
/]

[query public typeClassName(element : AuthenticationElement) : String
	= if element.oclIsTypeOf(RegistrationElement) then
				element.authenticationPrefix().concat('Registration')
			else if element.oclIsTypeOf(LoginElement) then
				element.authenticationPrefix().concat('Login')
			else if element.oclIsTypeOf(ForgottenPasswordElement) then
				'error' 
			else if element.oclIsTypeOf(ChangePasswordElement) then
				'ChangePassword' 
			else
				''
			endif endif endif endif.concat(element.typeSuffix())
/]

[query public typeRequestClassName(element : ForgottenPasswordElement) : String
	= 'ForgottenPasswordRequest' 
/]

[query public typeResetClassName(element : ForgottenPasswordElement) : String
	= 'ForgottenPasswordReset' 
/]


[query public serviceClassName(service : Service) : String
	= service.name.concat('Service')
/]

[query public instanceName(service : Service) : String
	= service.serviceClassName().toLowerFirst()
/]

[query public methodName(operation : BusinessOperation) : String
	= operation.name.toLowerFirst()
/]


[query public baseControllerClassName(eObject : EObject) : String
	= 'AbstractController'
/]


[query public instanceName(menu : Menu) : String
	= menu.name.toLowerFirst()
/]


[query public routeName(entry : MenuEntry) : String
	= if entry.oclIsTypeOf(SubmenuEntry) then
			let submenu : SubmenuEntry = entry.oclAsType(SubmenuEntry)
				in if submenu.oclIsUndefined() then
						'Unknown'
					else
						let subitems : Sequence(ActionMenuEntry)
							= submenu.entries
								->select(e | e.oclIsTypeOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
							in if subitems->isEmpty() then
									'Unknown'
								else
									subitems->first().routeName()
								endif
					endif
		else if entry.oclIsTypeOf(ActionMenuEntry) then
			let action : ActionMenuEntry = entry.oclAsType(ActionMenuEntry)
				in if action.action.oclIsUndefined() then
						'Unknown'
					else
						action.action.routeName()
					endif
		else if entry.oclIsTypeOf(EditStaticTextMenuEntry) then
			null
		else
			'Unknown'
		endif endif endif
/]


[query public actionName(controller : Controller) : String
	= controller.instanceName()
/]

[query public controllerName(controller : Controller) : String
	= controller.name
/]

[query public controllerClassName(controller : Controller) : String
	= controller.controllerName().concat('Controller').toUpperFirst()
/]

[query public controllerTestClassName(controller : Controller) : String
	= controller.controllerClassName().concat(controller.testClassSuffix())
/]

[query public instanceName(controller : Controller) : String
	= controller.name.toLowerFirst()
/]

[query public routeName(controller : Controller) : String
	= controller.uniqueName()
/]

[query public templateName(controller : Controller) : String
	= controller.instanceName().snakeCase()
/]

[query public uniqueName(controller : Controller) : String
	= controller.instanceName()
/]


[query public actionName(unit : ContentUnit) : String
	= unit.actionName(false)
/]

[query public actionName(unit : ContentUnit, update : Boolean) : String
	= if not unit.oclIsKindOf(EditUnit) then
			unit.instanceName()
		else
			if unit.oclIsTypeOf(CreateUpdateUnit) then
				if update then
					unit.oclAsType(CreateUpdateUnit).updateUriElement
						.concat(unit.instanceName().replace('edit', ''))
				else
					unit.uriElement.concat(unit.instanceName().replace('edit', ''))
				endif
			else
				unit.instanceName()
			endif
		endif
/]

[query public actionFilterName(unit : CollectionUnit) : String
	= unit.actionName().concat('Filter')
/]

[query public actionTestName(unit : ContentUnit) : String
	= unit.actionTestName(false)
/]

[query public actionTestName(unit : ContentUnit, update : Boolean) : String
	= 'test'.concat(unit.actionName(update).toUpperFirst())
/]

[query public captchaActionName(unit : ContentUnit) : String
	= if unit.controller.editUnits()->size() = 1 then
			unit.controller.uniqueName()
		else
			unit.uniqueName()
		endif
/]

[query public className(container : ConstantContainer) : String
	= if container.oclIsTypeOf(Repository) then
			container.oclAsType(Repository).repositoryClassName()
		else if container.oclIsTypeOf(Service) then
			container.oclAsType(Service).serviceClassName()
		else
			'Unknown'
		endif endif
/]

[query public containerInstanceName(unit : DynamicUnit) : String
	= unit.containingType().instanceName()
/]

[query public containerInstanceVariable(unit : DynamicUnit) : String
	= if unit.containingTypeLoadedElsewhere() then
			unit.containingTypeLoadedBy().instanceVariable()
		else
			'$'.concat(unit.containerInstanceName())
		endif
/]

[query public containerParameter(unit : DynamicUnit) : String
	= if unit.containingTypeLoadedElsewhere() then
			unit.containingTypeLoadedBy().instanceName()
		else
			unit.containerInstanceName()
		endif
/]

[query public controllerName(unit : DynamicUnit) : String
	= unit.controller.controllerName()
/]

[query public csrfTokenId(unit : SingletonUnit) : String
	= unit.controller.name.snakeCase()
		.concat('_')
		.concat(unit.name.snakeCase())
/]

[query private featureNames(form : DynamicUnit) : Sequence(String)
	= form.displayFields
		->select(f | f.isFeatureField()).oclAsType(UnitFeature)
		->collect(f | f.leafFeature())
		->sortedBy(f | f.name)
		->collect(f | f.name)
/]

[query public findMethodName(unit : CollectionUnit, selection : Selection) : String
	= if unit.hasPagination then
			selection.builderMethodName()
		else
			selection.methodName
		endif
/]

[query public findMethodName(unit : CollectionUnit, filter : Filter) : String
	= if unit.hasPagination then
			filter.builderMethodName()
		else
			filter.methodName
		endif
/]

[query public formName(element : NamedElement) : String
	= element.instanceName().concat('Form')
/]

[query public formVariable(element : AuthenticationElement) : String
	= '$'.concat(element.formName())
/]

[query public formVariable(unit : ControlUnit) : String
	= if unit.controller.hasSingleActionMethod() or unit.controller.isMultiPage() then
			'$'.concat(unit.formName())
		else
			'$this->'.concat(unit.formName())
		endif
/]

[query public formVariable(unit : EditUnit) : String
	= if unit.controller.hasSingleActionMethod() or unit.controller.isMultiPage() then
			'$'.concat(unit.formName())
		else
			'$this->'.concat(unit.formName())
		endif
/]

[query public formCreateVariable(unit : EditUnit) : String
	= '$'.concat(unit.formName())
/]

[query public instanceName(element : NamedElement) : String
	= element.name.toLowerFirst()
/]

[query public instanceName(resource : Resource) : String
	= resource.name.toLowerFirst()
/]

[query public instanceParameter(element : NamedElement) : String
	= element.instanceName()
/]

[query public instanceVariable(unit : ContentUnit) : String
	= '$'.concat(unit.instanceName())
/]

[query public modelClassName(unit : ContentUnit) : String
	= if unit.oclIsTypeOf(StaticUnit) then
			if unit.oclAsType(StaticUnit).repository.oclIsUndefined() then
				'None'
			else
				unit.oclAsType(StaticUnit).repository.serves.modelClassName()
			endif
		else
			let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
				in dynamicUnit.contentType.modelClassName()
		endif
/]

[query public pageSizeConstant(unit : CollectionUnit) : String
	= unit.name.concat('_page_size').toUpper()
/]

[query public builderInstanceVariable(object : EObject) : String
	= '$builder'
/]

[query public filterEntityInstanceVariable(unit : CollectionUnit) : String
	= '$filterData'
/]

[query public filterFormInstanceVariable(unit : CollectionUnit) : String
	= '$filterForm'
/]

[query public filterFormInstanceParameter(unit : CollectionUnit) : String
	= 'filterForm'
/]

[query public resultsInstanceVariable(unit : CollectionUnit) : String
	= if unit.isConditionallyDisplayed or unit.controller.isSinglePage() then
			'$parameters[\''.concat(unit.instanceParameter()).concat('\']')
		else
			unit.instanceVariable()
		endif
/]

[query public routeUpdateName(unit : EditUnit) : String
	= let unitName : String
		= if unit.oclIsTypeOf(UpdateUnit) then
				if unit.uriElement <> '' then
					unit.uriElement
						.concat(unit.instanceName().replace(unit.uriElement, ''))
						.replace('edit', '')
				else
					unit.instanceName()
				endif
			else if unit.oclIsTypeOf(CreateUpdateUnit) then
				let createUnit : CreateUpdateUnit = unit.oclAsType(CreateUpdateUnit)
					in if createUnit.updateUriElement <> '' then
						createUnit.updateUriElement
							.concat(unit.instanceName().replace(createUnit.updateUriElement, ''))
							.replace('edit', '')
					else
						unit.instanceName()
					endif
			else
				unit.instanceName()
			endif endif
		in unit.controller.uniqueName().concat('_').concat(unitName)
/]

[query public routeName(unit : ContentUnit) : String
	= if unit.controller.isSinglePage() and unit.controller.hasSingleActionMethod()
				or unit.isRoutingUnit() then
			unit.controller.uniqueName()
		else let unitName : String
			= if unit.oclIsKindOf(EditUnit) and unit.uriElement <> '' then
					unit.uriElement.concat(unit.instanceName().replace('edit', ''))
				else
					unit.instanceName()
				endif
			in unit.controller.uniqueName().concat('_').concat(unitName)
		endif
/]

[query public routeName(element : AuthenticationElement) : String
	= if element.oclIsTypeOf(RegistrationElement) then
			element.oclAsType(RegistrationElement).uriElement
		else if element.oclIsTypeOf(LoginElement) then
			element.oclAsType(LoginElement).uriElement
		else if element.oclIsTypeOf(LogoutElement) then
			element.oclAsType(LogoutElement).uriElement
		else if element.oclIsTypeOf(ForgottenPasswordElement) then
			element.oclAsType(ForgottenPasswordElement).uriElement
		else if element.oclIsTypeOf(ChangePasswordElement) then
			element.oclAsType(ChangePasswordElement).uriElement
		else
			''
		endif endif endif endif endif
/]

[query public routeEmailSentName(element : ForgottenPasswordElement) : String
	= element.uriEmailSent
/]

[query public routeResetPasswordName(element : ForgottenPasswordElement) : String
	= element.uriResetPassword
/]

[query public routeEmailVerificationName(element : RegistrationElement) : String
	= element.uriEmailVerification
/]

[query public routeName(resource : Resource) : String
	= resource.instanceName()
/]

[query public templateName(element : AuthenticationElement) : String
	= element.instanceName().snakeCase()
/]

[query public templateName(unit : ContentUnit) : String
	= unit.instanceName().snakeCase()
/]


[query public sameModel(form : SingletonUnit) : Sequence(SingletonUnit)
	= if form.hasInterfaceFields then
			Sequence{ form }
		else
			form.sameModelFeatures()
		endif
/]

[query private sameModelFeatures(form : SingletonUnit) : Sequence(SingletonUnit)
	= let forms : Sequence(SingletonUnit) = form.contentType.formsUsing(form.genModel())
		in if forms->size() < 2 then
				forms
			else
				forms->select(f | f.featureNames() = form.featureNames())
					->sortedBy(u | u.name)
			endif
/]

[query public selectName(unit : ContentUnit) : String
	= unit.instanceName().concat('Select')
/]

[query public selectName(unit : CollectionUnit) : String
	= unit.oclAsType(DynamicUnit).selectName()
/]

[query public singleUseModel(form : SingletonUnit) : Boolean
	= form.sameModel()->size() = 1
/]

[query public thumbName(unit : ImageUnit) : String
	= let units : OrderedSet(ImageUnit)
		= unit.oclAsType(ContentUnit).controller.partOf.imageUnits
		in if units->collect(u | u.oclAsType(ContentUnit).name)->select(n | n = unit.oclAsType(ContentUnit).name)->size() > 1 then
				unit.oclAsType(ContentUnit).instanceName()
			else
				unit.oclAsType(ContentUnit).uniqueName()
			endif
/]

[query private usesAuthenticationModel(form : SingletonUnit) : Boolean
	= if not form.genModel().security.isAuthenticated then
				false
			else
				let authentication : Authentication = form.genModel().security.authentication
					in if not authentication.oclIsTypeOf(LocalAuthenticationSystem) then
							false
						else
							authentication.oclAsType(LocalAuthenticationSystem).authenticationModel = form.contentType
						endif
			endif
/]

[query public typeClassName(unit : SingletonUnit) : String
	= let sameModel : Sequence(DynamicUnit) = unit.sameModel()
		in unit.contentType.modelClassName()
			.concat(if sameModel->size() <> unit.contentType.formsUsing(unit.genModel())->size() or unit.usesAuthenticationModel() then
					unit.name.toUpperFirst()
				else
					''
				endif)
			.concat(unit.typeSuffix())
/]

[query public uniqueName(unit : ContentUnit) : String
	= unit.controller.uniqueName().concat('_').concat(unit.instanceName())
/]

[query public viewCheckEmailName(element : ForgottenPasswordElement) : String
	= element.name.toLowerFirst().concat('_check')
/]

[query public viewEmailMessageName(element : ForgottenPasswordElement) : String
	= element.name.toLowerFirst().concat('_email')
/]

[query public viewRequestName(element : ForgottenPasswordElement) : String
	= element.name.toLowerFirst().concat('_request')
/]

[query public viewResetName(element : ForgottenPasswordElement) : String
	= element.name.toLowerFirst().concat('_reset')
/]


[query public getMethodName(filter : CollectionFilter) : String
	= 'get'.concat(filter.propertyName().toUpperFirst())
/]

[query public propertyName(filter : CollectionFilter) : String
	= filter.attribute.modelPropertyName()
/]

[query public setMethodName(filter : CollectionFilter) : String
	= 'set'.concat(filter.propertyName().toUpperFirst())
/]


[query public actionName(association : UnitAssociation) : String
	= association.displayedOn.instanceName()
		.concat(association.name().toUpperFirst())
		.concat('Action')
/]

[query public autocompleteTypeClassName(association : UnitAssociation) : String
	= association.association.modelClassName()
		.concat(if association.displayedOn.genModel().autocompleteFields
					->select(f | f.associationTarget() = association.associationTarget())->size() > 1 then
				association.displayedOn.contentType.name
			else
				''
			endif)
		.concat(association.autocompleteTypeSuffix())
/]

[query public formName(field : UnitField) : String
	= if field.isFeatureField() then
			if field.isAttributeField() then
				field.oclAsType(UnitAttribute).attribute.columnName
			else if field.isResourceField() then
				field.oclAsType(UnitResource).resource.columnName
			else
				let association : Association
					= field.oclAsType(UnitAssociation).association
					in if association.isSingleton and association.isOwningEnd then 
	 						association.columnName 
						else 
							association.modelPropertyName() 
						endif 
			endif endif
		else if field.isInterfaceField() then
			field.oclAsType(InterfaceField).name
		else
			'UnhandledFeature'
		endif endif
/]

[query public instanceName(field : UnitField) : String
	= if field.isFeatureField() then
			field.oclAsType(UnitFeature).name()
		else if field.isInterfaceField() then
			field.oclAsType(InterfaceField).name()
		else
			''
		endif endif.toLowerFirst()
/]

[query public modelPropertyName(field : UnitField) : String
	= if field.isFeatureField() then
			field.oclAsType(UnitFeature).leafFeature().modelPropertyName()
		else if field.isInterfaceField() then
			field.oclAsType(InterfaceField).name
		else
			'UnhandledFeature'
		endif endif
/]

[query public optionsName(field : UnitField) : String
	= field.uniqueName().concat('_options')
/]

[query public singleUseModel(field : UnitField) : Boolean
	= if field.displayedOn.oclIsKindOf(SingletonUnit) then
			field.displayedOn.oclAsType(SingletonUnit).singleUseModel()
		else
			false
		endif
/]

[query public typeClassName(association : UnitAssociation) : String
	= association.association.targetType.modelClassName().concat(association.typeSuffix())
/]

[query public uniqueName(field : UnitField) : String
	= field.displayedOn.instanceName().concat('_').concat(field.modelPropertyName())
/]


[query public actionName(action : Action) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.actionName(action.usedBy.oclAsType(DynamicUnit))
		else
			action.actionName(action.usedBy.oclAsType(UnitAssociation))
		endif
/]

[query private actionName(action : Action, unit : DynamicUnit) : String
	= let actionsWithName : OrderedSet(Action)
		= unit.controller.actionsWithoutTarget->select(a | a.name.equalsIgnoreCase(action.name))
		in if actionsWithName->size() < 2  then
				action.uniqueName()
			else
				action.uniqueName().concat(unit.contentType.name)
			endif
/]

[query private actionName(action : Action, association : UnitAssociation) : String
	= let association : UnitAssociation
		= action.usedBy.oclAsType(UnitAssociation)
		in association.displayedOn.instanceName()
			.concat(association.name().toUpperFirst())
			.concat(action.name.toUpperFirst())
/]

[query public instanceName(action : Action) : String
	= if action.oclIsTypeOf(DeleteAction)
				or action.oclIsKindOf(InstanceOperationAction) then
			action.parentUnit().contentType.instanceName()
		else if action.oclIsTypeOf(ContainerOperationAction) then
			if action.parentUnit().contentType.isContained then
				action.parentUnit().contentType.containingType.instanceName()
			else
				action.uniqueName()
			endif
		else
			action.uniqueName()
		endif endif
/]

[query public instanceVariable(action : Action) : String
	= '$'.concat(action.instanceName())
/]

[query public modelClassName(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).modelClassName()
		else
			action.usedBy.oclAsType(UnitAssociation).association.modelClassName()
		endif
/]

[query public modelClassName(action : OperationAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).modelClassName()
		else
			action.usedBy.oclAsType(UnitAssociation).association.modelClassName()
		endif
/]

[query public routeActionReturnName(action : Action) : String
	= let controller : Controller = action.parentUnit().controller
		in if controller.isSinglePage() and controller.hasSingleActionMethod() then
				controller.routeName()
			else
				action.parentUnit().routeName()
			endif
/]

[query public routeName(action : Action) : String
	= let controller : Controller = action.parentUnit().controller
		in let actionName : String
			= if controller.actionsWithoutTarget->select(a | a.name = action.name)->size() < 2 then
					action.uniqueName()
				else
					action.uniqueName().concat(action.parentUnit().contentType.name)
				endif
			in controller.uniqueName().concat('_').concat(actionName)
/]

[query private uniqueName(action : Action) : String
	= action.name.toLowerFirst()
/]