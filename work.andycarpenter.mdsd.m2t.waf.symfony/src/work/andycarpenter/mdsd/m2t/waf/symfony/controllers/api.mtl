[comment encoding = UTF-8 /]
[module api(
	'http://andycarpenter.work/metamodel/api',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::commonMethods/]


[query private repositoriesUsed(resource : Resource) : Sequence(Repository)
	= Sequence{ resource.repository }
		->union(resource.childResources
			->collect(r | r.repositoriesUsed()))
		->asSet()
		->asSequence()
		->sortedBy(r | r.name)
/]

[template public controller(resource : Resource, model : WafModel)]
[file(resource.controllerFilename(), false)]
<?php
namespace [resource.apiControllersNamespace()/];

use [resource.modelsNamespace()/]\[resource.repository.serves.modelClassName()/];
[if (resource.childResources->notEmpty())]
[resource.childResources.childEntities()/]
[/if]
use [resource.repositoryNamespace()/]\[resource.repository.repositoryClassName()/];
[if (resource.childResources->notEmpty())]
[resource.childResources.childRepositories()/]
[/if]
use Doctrine\ORM\Tools\Pagination\Paginator;
use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\Controller\AbstractFOSRestController;
use FOS\RestBundle\Request\ParamFetcher;
[comment use Nelmio\ApiDocBundle\Annotation\Operation;
use Nelmio\ApiDocBundle\Annotation\ApiDoc;
use Nelmio\ApiDocBundle\Annotation\Model;
use Swagger\Annotations as SWG; /]



/**
 * sss
 */
class [resource.controllerClassName()/] extends AbstractFOSRestController
{
[for (repository : Repository | resource.repositoriesUsed())]
    /**
     * @var [repository.repositoryClassName()/] $[repository.repositoryInstanceName()/]
     */
    private [repository.repositoryClassName()/] $[repository.repositoryInstanceName()/];

[/for]
    public function __construct([for (repository : Repository | resource.repositoriesUsed()) separator(', ')]
[repository.repositoryClassName()/] $[repository.repositoryInstanceName()/][/for])
    {
[for (repository : Repository | resource.repositoriesUsed())]
        $this->[repository.repositoryInstanceName()/] = $[repository.repositoryInstanceName()/];
[/for]
    }

    [resource.resourceActionMethods()/]
}
[/file]
[/template]

[template private childEntities(resource : Resource) post(trim())]
use [resource.modelsNamespace()/]\[resource.repository.serves.modelClassName()/];
[if (resource.childResources->notEmpty())]
[resource.childResources.childEntities()/]
[/if]
[/template]

[template private childRepositories(resource : Resource) post(trim())]
use [resource.repositoryNamespace()/]\[resource.repository.repositoryClassName()/];
[if (resource.childResources->notEmpty())]
[resource.childResources.childRepositories()/]
[/if]
[/template]

[template private viewAnnotation(resource : Resource) post(trim())]
@Rest\View(serializerEnableMaxDepthChecks="true"[if (resource.defaultSerializationGroups->notEmpty())]
, serializerGroups={[for (group : SerializationGroup | resource.defaultSerializationGroups)]"[group.name/]"[/for]}[/if])
[/template]

[template private resourceActionMethods(resource : Resource) post(trim())]
[if (not resource.getAll.oclIsUndefined() or resource.enableDefaultGetAll)]
[resource.getAllAction()/]

[/if]
[if (not resource.getOne.oclIsUndefined() or resource.enableDefaultGetOne)]
[resource.getOneAction()/]

[/if]
[for (child : Resource | resource.childResources)]
[child.resourceActionMethods()/]
[/for]
[/template]

[template private getOneAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath()/]", name="[resource.routeName()/]One")
 * [resource.viewAnnotation()/]
 * @ApiDoc(
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 *     parameters={
[for (key : Attribute | resource.uriPathKeys())]
 *         {"name"="[key.routeParameterName(resource)/]", "dataType"="[key.dataType.name/]", "required"="true", "description"="xx"},
[/for]
 *     },
 * )
 *
 * @return [resource.repository.serves.modelClassName()/]|null
 **/
public function get[resource.repository.serves.name/]([resource.routeParameterList(true)/]): ?[resource.repository.serves.modelClassName()/]
{
    return $this->[resource.repository.repositoryInstanceName()/]->[if (resource.repository.findOne.oclIsUndefined())]
[repository.serves.findMethodName()/][else]
[resource.repository.findOne.instanceName()/][/if]([resource.routeParameterList(false)/]);
}
[/template]

[template private getAllAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath(true)/]", name="[resource.routeName()/]")
 * @Rest\QueryParam(name="page", nullable=true, description="The section of items to return")
 * @Rest\QueryParam(name="pageSize", nullable=true, description="The number of items to return")
 * [resource.viewAnnotation()/]
 * [comment @ApiDoc( /]
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 * )
 *
 * @return [if (resource.parentResource.oclIsUndefined())]
array<int, [resource.repository.serves.modelClassName()/]>[if (not resource.repository.findAll.oclIsUndefined())]
[if (resource.repository.findAll.hasPaginationSupport)]
|Paginator<[resource.repository.serves.modelClassName()/]>[/if][/if]
[else]
[resource.parentResource.repository.serves.modelClassName()/]|null
[/if]

 **/
public function get[resource.repository.name/](ParamFetcher $paramFetcher[if (not resource.parentResource.oclIsUndefined())]
, [resource.parentResource.routeParameterList(true)/][/if])[if (resource.parentResource.oclIsUndefined())]
[if (resource.repository.findAll.oclIsUndefined())]
: array[else][if (not resource.repository.findAll.hasPaginationSupport)]
: array[/if][/if]
[else]
: ?[resource.parentResource.repository.serves.modelClassName()/]
[/if]

{
[if (resource.parentResource.oclIsUndefined())]
    return $this->[resource.repository.repositoryInstanceName()/]->[if (resource.getAll.oclIsUndefined())]
findAll[else]
[resource.getAll.instanceName()/][/if]($paramFetcher->get("page"), $paramFetcher->get("pageSize"));
[else]
    return $this->[resource.parentResource.repository.repositoryInstanceName()/]->[if (resource.parentResource.repository.findOne.oclIsUndefined())]
[resource.parentResource.repository.serves.findMethodName()/][else]
[resource.parentResource.getOne.instanceName()/][/if]([resource.parentResource.routeParameterList(false)/]);
[/if]
}
[/template]

[template private selectCode(resource : Resource) post(trim())]
[if (not resource.limit.oclIsUndefined())]
$this->offset = $request->query->getInt('[resource.limit.parameters->first().name/]', 1);
[/if]
[comment if (not unit.selectionType.oclIsUndefined())/]
$this->[comment unit.selectionType.instanceName()/] = [comment unit.getSelectionService()/]->find([comment unit.selectableParameters()/]);
[comment if/]
[comment if (not unit.selectionType.oclIsUndefined() and not unit.containingFeature.oclIsUndefined())/]
[comment unit.childSelect()/]
[comment else/]
[comment unit.contentSelect()/]
[comment if/]
[/template]

[template private contentSelect(unit : CollectionUnit) post(trim())]
[if (unit.hasFilters)]
[unit.contentFilterSelect()/]
else
[/if]
[if (not unit.selection.oclIsUndefined())]
	[if (false)]
$this->[unit.instanceName()/] = [comment unit.oclAsType(DynamicUnit).getContentService()/]->[unit.selection.instanceName()/]([comment unit.selectableParameters()/][comment unit.paginationActuals()/]);
	[else]
$this->[unit.instanceName()/] = [comment unit.getSelectionService()/]->[unit.selection.instanceName()/]([comment unit.selectableParameters()/][comment unit.paginationActuals()/]);
	[/if]
[elseif (unit.oclIsKindOf(DetailsUnit))]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
	[if (not detailsUnit.selection.oclIsUndefined())]
$this->[unit.instanceName()/] = [comment unit.getSelectionService()/]->[detailsUnit.selection.instanceName()/]([comment unit.selectableParameters()/][comment unit.paginationActuals()/]);
	[else]
$this->[unit.instanceName()/] = [comment unit.oclAsType(DynamicUnit).getContentService()/]->findAll([comment unit.paginationActuals()/]);
	[/if]
[/let]
[else]
$this->[unit.instanceName()/] = [comment unit.oclAsType(DynamicUnit).getContentService()/]->findAll([comment unit.paginationActuals()/]);
[/if]
[/template]

[template private contentFilterSelect(unit : CollectionUnit) post(trim())]
[comment for (f : Filter | unit.filters()) separator('else')/]
if ([comment for (parameter : FilterParameter | f.parameters) separator(' && ')/]
$request->query->has('[comment parameter.name/]')[comment for/])
    [comment unit.contentFilterCall(f)/]
[comment for/]
[/template]

[template private contentFilterCall(unit : CollectionUnit, filter : Filter)]
$this->[unit.instanceName()/] = [comment unit.oclAsType(DynamicUnit).getContentService()/]->[filter.selection.instanceName()/](
[for (parameter : FormalParameter | filter.selection.parameters)]
[comment let actual : FilterParameter = filter.matchingActual(parameter)/]
    $request->query->get('[comment actual.name/]'),
[comment let/]
[/for]
    [comment unit.paginationActuals()/]
);
[/template]

