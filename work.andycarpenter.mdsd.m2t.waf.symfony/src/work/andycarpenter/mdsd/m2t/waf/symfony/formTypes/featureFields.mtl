[comment encoding = UTF-8 /]
[module featureFields(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]


[template public formFeature(feature : Attribute)
	? (feature.isSingleton) post(trim())]
[feature.formFeature(true)/]
[/template]

[template public formFeature(attribute : Attribute, mapped : Boolean)
	? (attribute.isSingleton) post(trim())]
[attribute.formFeature('entity', attribute.captionContainedId(), attribute.captionContainedId(), attribute.captionContainedId(), mapped)/]
[/template]

[template public formFeature(attribute : Attribute, translationDomain : String, labelId : String,
	placeholderId : String, titleId : String, mapped : Boolean) post(trim())]
$builder->add('[attribute.modelPropertyName()/]', [attribute.interfaceType()/], ['['/]
[if (not mapped)]
    'mapped' => false,
[/if]
    'label' => '[labelId/]',
    'translation_domain' => '[translationDomain/]',
[if (not attribute.isRequired)]
    'required' => false,
[/if]
[if (attribute.isDateFeature)]
	[if (attribute.dateDetails = DateDetails::DateAndTime)]
    'date_widget' => 'single_text',
    'time_widget' => 'single_text',
	[elseif (attribute.dateDetails <> DateDetails::DateAndTime)]
    'widget' => 'single_text',
		[if (attribute.dateDetails = DateDetails::TimeOnly)]
    'with_seconds' => TRUE,
		[/if]
	[/if]
[elseif (attribute.isEnumerationFeature)]
    'choices' => [attribute.enumerationType.modelClassName()/]::values(),
    'placeholder' => 'actions.labels.select_one',
[/if]
    'attr' => ['['/]
        'placeholder' => '[placeholderId/]',
[if (attribute.hasValidationPattern)]
        'pattern' => '[attribute.oclAsType(DataTypeAttribute).validationPattern/]',
[/if]
        'title' => '[titleId/]',
    [']'/],
[']'/])
[/template]


[template public formFeature(attribute : Attribute, allowUiAdd : Boolean, allowUiRemove : Boolean)
	? (not attribute.isSingleton) post(trim())]
$builder->add('[attribute.modelPropertyName()/]', CollectionType::class, ['['/]
    'label' => '[attribute.captionContainedId()/]',
    'translation_domain' => 'entity',
    'entry_type' => [attribute.interfaceType()/],
[if (allowUiAdd)]
    'allow_add' => true,
[/if]
[if (allowUiRemove)]
    'allow_delete' => true,
[/if]
[if (attribute.collectionOrmAllowAdd and attribute.collectionOrmAllowRemove)]
    'by_reference' => false,
[/if]
    'required' => false,
[']'/])
[/template]

[template public formFeature(resource : ResourceFeature)
	? (resource.oclIsTypeOf(FileResource)) post(trim())]
$builder->add('[resource.filePropertyName()/]', VichFileType::class, ['['/]
    'label' => '[resource.captionContainedId()/]',
    'translation_domain' => 'entity',
[if (not resource.isRequired)]
    'required' => false,
[/if]
[']'/])
[/template]

[template public formFeature(resource : ResourceFeature)
	? (resource.oclIsTypeOf(ImageResource)) post(trim())]
$builder->add('[resource.filePropertyName()/]', VichImageType::class, ['['/]
    'label' => '[resource.captionContainedId()/]',
    'translation_domain' => 'entity',
[if (not resource.isRequired)]
    'required' => false,
[/if]
[']'/])
[/template]

[template private interfaceType(attribute : Attribute) post(trim())]
[if (attribute.isBooleanFeature)]
CheckboxType::class
[elseif (attribute.isDateFeature)]
	[if (attribute.dateDetails = DateDetails::DateOnly)]
DateType::class
	[elseif (attribute.dateDetails = DateDetails::DateAndTime)]
DateTimeType::class
	[else]
TimeType::class
	[/if]
[elseif (attribute.isEmailFeature)]
EmailType::class
[elseif (attribute.isEnumerationFeature)]
ChoiceType::class
[elseif (attribute.isIntegerFeature)]
IntegerType::class
[elseif (attribute.isObfuscatedFeature)]
PasswordType::class
[elseif (attribute.isTextareaFeature)]
TextareaType::class
[else]
TextType::class
[/if]
[/template]


[template public formFeature(association : Association, valueLabel : ModelLabel, selection : Selection)
	? (not association.isContains) post(trim())]
$builder->add('[association.modelPropertyName()/]', EntityType::class, ['['/]
    'label' => '[association.captionContainedId()/]',
    'translation_domain' => 'entity',
[if (not association.isSingleton or not association.isRequired)]
    'required' => false,
[/if]
    'class' => '[association.modelsNamespace()/]\[association.modelClassName()/]',
[if (not selection.oclIsUndefined())]
    'choices' => $this->[selection.definedBy.instanceName()/]->[selection.methodName/](),
[/if]
    'choice_label' => [if (valueLabel.oclIsUndefined())]'defaultLabel'[else]'[valueLabel.name.toLowerFirst()/][if (not valueLabel.name.endsWith('Label'))]Label[/if]'[/if],
    'choice_translation_domain' => false,
[if (association.isSingleton)]
    'placeholder' => 'actions.labels.select_one',
[else]
    'multiple' => true,
[/if]
[']'/])
[/template]