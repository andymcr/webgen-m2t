[comment encoding = UTF-8 /]
[module twig(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::literals/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::constant/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::accessor/]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(NullLiteral)
		or guard.oclIsTypeOf(IntegerLiteral)
		or guard.oclIsTypeOf(StringLiteral)) post(trim())]
[guard.valueExpression()/]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(TimeLiteral)) post(trim())]
date('[guard.oclAsType(TimeLiteral).value/]')
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentTime)) post(trim())]
date()
[/template]


[template private formalParameters(callback : Callable) post(trim())]
[for (parameter : FormalParameter | callback.parameters) separator(', ')]
[parameter.name/][/for]
[/template]

[template public twigExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(Callable)) post(trim())]
[let callback : Callable = expression.oclAsType(Callable)]
([callback.formalParameters()/]) => [callback.expression.twigExpression(accessor)/]}
[/let]
[/template]

[template public twigExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(ReduceFunction)) post(trim())]
[let reduce : ReduceFunction = expression.oclAsType(ReduceFunction)]
[reduce.value.twigExpression(accessor)/] | reduce([reduce.callback.twigExpression(accessor)/][if (not reduce.initial.oclIsUndefined())]
, [reduce.initial.twigExpression(accessor)/][/if])
[/let]
[/template]

[template public twigExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(SizeFunction)) post(trim())]
[let size : SizeFunction = expression.oclAsType(SizeFunction)]
[size.value.twigExpression(accessor)/] | length
[/let]
[/template]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ConstantReference)) post(trim())]
[let constant : ConstantReference = guard.oclAsType(ConstantReference)]
[constant.value.definedBy.className().toLowerFirst()/].[constant.value.name/][if (constant.value.useFunction())]()[/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsKindOf(FeatureVariable)) post(trim())]
[let variable : FeatureVariable = guard.oclAsType(FeatureVariable)]
[variable.pathAccessor(accessor, null)/]
[/let] 
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ParameterVariable)) post(trim())]
[let variable : ParameterVariable = guard.oclAsType(ParameterVariable)]
[if (variable.childFeature.oclIsUndefined())]
[variable.formal.name/]
[else]
[variable.childFeature.pathAccessor(variable.formal.name, null)/]
[/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentUser)) post(trim())]
[let path : CurrentUser = guard.oclAsType(CurrentUser)]
$this->get('people')->getId()
[/let]
[/template]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateBooleanVariable)) post(trim())]
[let predicate : PredicateBooleanVariable = guard.oclAsType(PredicateBooleanVariable)]
[if (predicate.negated)]not [/if][predicate.feature.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = guard.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.predicates)]
[if (i > 1)] [predicate.operator()/] [/if][if (expression.oclIsKindOf(PredicateBooleanOperator))]
([/if][expression.twigExpression(accessor)/][if (expression.oclIsKindOf(PredicateBooleanOperator))]
)[/if][/for]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = guard.oclAsType(PredicateEqualityOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = guard.oclAsType(PredicateComparisonOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = guard.oclAsType(PredicateLikeOperator)]
Criteria::expr()->[predicate.operator()/]([predicate.left.twigExpression(accessor)/], [predicate.right.twigExpression(accessor)/])
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsNull = guard.oclAsType(PredicateIsNull)]
[predicate.value.twigExpression(accessor)/] is[if (predicate.negated)] not[/if] null
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = guard.oclAsType(PredicateIsEmpty)]
[predicate.value.twigExpression(accessor)/] is[if (predicate.negated)] not[/if] empty
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ArithmeticOperation)) post(trim())]
[let arithmetic : ArithmeticOperation = guard.oclAsType(ArithmeticOperation)]
[arithmetic.operands->first().twigExpression(accessor)/][for (operand : Expression | arithmetic.operands->subOrderedSet(2, arithmetic.operands->size()))]
 [arithmetic.operator()/] [operand.twigExpression(accessor)/][/for]
[/let]
[/template]

[query private operator(arithmetic : ArithmeticOperation) : String
	= if arithmetic.operator = ArithmeticOperator::Add then
			'+'
		else if arithmetic.operator = ArithmeticOperator::Subtract then
			'-'
		else if arithmetic.operator = ArithmeticOperator::Multiply then
			'*'
		else if arithmetic.operator = ArithmeticOperator::Divide then
			'/'
		else
			'?'
		endif endif endif endif
/]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'and'
		else if predicate.operator = BooleanOperator::Or then
			'or'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'=='
		else
			'!='
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'>'
			else
				'<='
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'<'
			else
				'>='
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]