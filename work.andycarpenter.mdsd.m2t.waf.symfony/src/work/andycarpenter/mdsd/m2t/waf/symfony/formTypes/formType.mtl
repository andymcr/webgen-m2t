[comment encoding = UTF-8 /]
[module formType(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::formTypes::captchaField/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::formTypes::featureFields/]


[query private formEntities(model : WafModel) : Set(Entity)
	= model.controllers
		->collect(p | p.units)
		->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
		->select(u | u.oclIsKindOf(EditUnit) or u.oclIsKindOf(ControlUnit))
		->collect(u | u.contentType)->asSet()
/]

[query private embeddedForms(model : WafModel) : Sequence(UnitAssociation)
	= model.formUnits
		->collect(u | u.displayFields)
		->select(f | f.isContains).oclAsType(UnitAssociation)
/]

[query private uniqueEnumerationFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.enumerationFields->asSet()->asSequence()
/]

[template public formTypes(model : WafModel)]
[for (entity : Entity | model.formEntities())]
	[for (form : SingletonUnit | entity.formsUsing(model))]
	[let sameModel : Sequence(SingletonUnit) = form.sameModel()]
		[if (form = sameModel->first())]
[form.entityFormType()/]
		[/if]
	[/let]
	[/for]
[/for]
[for (form : UnitAssociation | model.embeddedForms())]
[form.formType()/]
[/for]
[/template]


[template private entityFormType(unit : SingletonUnit)]
[file(unit.formTypeFilename(), false)]
<?php
namespace [unit.formNamespace()/];

[unit.useStatements()/]


class [unit.typeClassName()/] extends AbstractType
{
[for (repository : Repository | unit.choicesRepositories())]
    /**
     * @var [repository.repositoryClassName()/] $[repository.instanceName()/]
     */
    private $[repository.instanceName()/];

[/for]
[if (unit.choicesRepositories()->notEmpty())]
    public function __construct([for (repository : Repository | unit.choicesRepositories()) separator (', ')]
[repository.repositoryClassName()/] $[repository.instanceName()/][/for])
    {
[for (repository : Repository | unit.choicesRepositories())]
        $this->[repository.instanceName()/] = $[repository.instanceName()/];
[/for]
    }

[/if]
    /**
     *
     * @param FormBuilderInterface $builder
     * @param array<string, mixed> $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
[for (feature : UnitField | unit.displayFields->sortedBy(f | f.fieldName))]
        [feature.formField()/];

[/for]
[if (unit.hasCaptcha)]
        [unit.captchaField(unit.captchaActionName())/]

[/if]
[if (unit.hasDefaultValueFields or unit.hasForcedValueFields)]
        [unit.setFieldValues()/]
[/if]
    }

    /**
     *
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(['['/]
[if (unit.hasFeatureFields)]
            'data_class' => '[unit.modelsNamespace()/]\[unit.modelClassName()/]',
            'csrf_token_id' => '[unit.csrfTokenId()/]'
[/if]
        [']'/]);
    }
}
[/file]
[/template]

[query private choicesRepositories(unit : DynamicUnit) : Sequence(Repository)
	= unit.associationFields
		->select(f | not f.options.oclIsUndefined())
		->collect(f | f.options.definedBy)
		->asSet()
		->asSequence()
		->sortedBy(r | r.name)
/]

[template public formType(association : UnitAssociation)]
[file(association.formTypeFilename(), false)]
<?php
namespace [association.formNamespace()/];

[association.useStatements()/]


class [association.typeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
[for (feature : Feature | association.association.targetType.features->select(f | not f.isContainer)->sortedBy(f | f.name))]
	[if (feature.oclIsKindOf(Attribute) and feature.isSingleton)]
        [feature.oclAsType(Attribute).formFeature()/];
 	[elseif (feature.oclIsKindOf(Attribute) and not feature.isSingleton)]
        [feature.oclAsType(Attribute).formFeature(false, false)/];
	[elseif (feature.oclIsKindOf(Association))]
        [feature.oclAsType(Association).formFeature(null, false, null)/];
	[/if]
[/for]
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(['['/]
            'data_class' => '[association.modelsNamespace()/]\[association.association.targetType.modelClassName()/]'
        [']'/]);
    }
}
[/file]
[/template]

[template private useStatements(unit : SingletonUnit) post(trim())]
[for (feature : UnitFeature | unit.uniqueEnumerationFeatures()->sortedBy(f | f.persistentFeature.name))]
use [feature.modelsNamespace()/]\[feature.enumerationType.modelClassName()/];
[/for]
[for (repository : Repository | unit.choicesRepositories())]
use [repository.repositoriesNamespace()/]\[repository.repositoryClassName()/];
[/for]
[if (unit.hasCaptcha)]
use Karser\Recaptcha3Bundle\Form\Recaptcha3Type;
use Karser\Recaptcha3Bundle\Validator\Constraints\Recaptcha3;
[/if]
[if (unit.hasAssociationFields)]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
[/if]
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (unit.hasDefaultValueFields or unit.hasForcedValueFields)]
use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
[/if]
[if (unit.hasBooleanFields)]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (unit.hasEnumerationFields)]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (unit.collectionFeatures->select(f | f.oclIsTypeOf(UnitAttribute) or f.isContains)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::DateOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::DateAndTime)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (unit.hasEmailFields)]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (unit.hasIntegerFields)]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (unit.hasObfuscatedFields)]
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
[/if]
[if (unit.hasRepeatedFields)]
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
[/if]
[if (unit.hasStringFields or unit.hasUrlFields)]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (unit.hasTextareaFields)]
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::TimeOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;
[if (unit.hasRepeatedFields)]
use Symfony\Component\Validator\Constraints\Length;
[/if]
[if (unit.hasRequiredInterfaceFields)]
use Symfony\Component\Validator\Constraints\NotBlank;
[/if]
[/template]

[template private useStatements(association : UnitAssociation) post(trim())]
[let features : OrderedSet(Feature) = association.association.targetType.features->select(f | not f.isContainer)]
[for (feature : Feature | features->select(f | f.isEnumerationFeature)->sortedBy(f | f.name))]
use [feature.modelsNamespace()/]\[feature.enumerationType.modelClassName()/];
[/for]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (features->select(f | f.isBooleanFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (features->select(f | f.isEnumerationFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (features->select(f | not f.isSingleton)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::DateOnly))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::DateAndTime))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (features->select(f | f.isEmailFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (features->select(f | f.isIntegerFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (features->select(f | f.isStringFeature or f.isUrlFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (features->select(f | f.isTextareaFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::TimeOnly))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;
[/let]
[/template]

[template private formField(field : UnitField)
	? (field.isAttributeField and field.isSingleton) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[let translationDomain : String
	= if field.hasTranslations() and field.singleUseModel() then
			field.displayedOn.translationDomain()
		else
			'entity'
		endif]
[let labelId : String
	= if field.hasTranslations() and field.singleUseModel() then
			attribute.customisedCaptionContainedId()
		else
			attribute.defaultDisplayLabelContainedId()
		endif]
[let placeholderId : String
	= if field.hasTranslations() and field.singleUseModel() then
			attribute.customisedPlaceholderContainedId()
		else
			attribute.defaultPlaceholderContainedId()
		endif]
[let titleId : String
	= if field.hasTranslations() and field.singleUseModel() then
			attribute.customisedTitleContainedId()
		else
			attribute.defaultTitleContainedId()
		endif]
[attribute.attribute.formFeature(translationDomain, labelId, placeholderId, titleId, true)/]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template private formField(field : UnitField)
	? (field.isAttributeField and not field.isSingleton) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[attribute.attribute.formFeature(attribute.collectionUiAllowAdd, attribute.collectionUiAllowRemove)/]
[/let]
[/template]

[template private formField(field : UnitField)
	? (field.isAssociationField and not field.isContains) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[if (association.useAutocomplete)]
[association.formAutocompleteFeature()/]
[else]
[association.association.formFeature(association.valueDisplay, association.options)/]
[/if]
[/let]
[/template]

[template private formAutocompleteFeature(association : UnitAssociation)]
$builder->add('[association.modelPropertyName()/]', [association.autocompleteTypeClassName()/]::class);
[/template]

[template private formField(field : UnitField, dataInstance : String)
	? (field.isAssociationField and field.isContains) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[if (association.isSingleton)]
add('[association.modelPropertyName()/]', [association.typeClassName()/]::class)
[else]
add('[association.modelPropertyName()/]', CollectionType::class, ['['/]
    'entry_type' => [association.typeClassName()/]::class,
	[if (association.collectionUiAllowAdd)]
    'allow_add' => true,
	[/if]
	[if (association.collectionUiAllowRemove)]
    'allow_delete' => true,
	[/if]
	[if (association.association.collectionOrmAllowAdd and association.association.collectionOrmAllowRemove)]
    'by_reference' => false,
	[/if]
	[if (field.hasHelp)]
    'help' => '[field.helpContainedId()/]',
	[/if]
    'required' => false,
[']'/])
[/if]
[/let]
[/template]

[template private formField(field : UnitField)
	? (field.isInterfaceField) post(trim())]
[let interface : InterfaceField = field.oclAsType(InterfaceField)]
[if (interface.isRepeated)]
add('[interface.name/]', RepeatedType::class, ['['/]
    'type' => [interface.interfaceType()/],
[else]
add('[interface.name/]', [interface.interfaceType()/], ['['/]
[/if]
    'mapped' => false,
    'translation_domain' => '[interface.displayedOn.translationDomain()/]',
[if (interface.isRequired)]
    'required' => true,
[/if]
[if (not interface.isRepeated)]
	[if (interface.hasTitle or interface.hasPlaceholder)]
    [field.fieldAttr()/]
	[/if]
	[if (field.hasHelp)]
    'help' => '[field.helpContainedId()/]',
	[/if]
[else]
	[if (field.hasInputGroupClass or field.hasFieldLabelClass or field.hasFieldValueClass)]
    [interface.repeatOptions()/]
	[/if]
    [interface.firstOptions()/]
    [interface.secondOptions()/]
[/if]
[']'/])
[/let]
[/template]

[template private interfaceType(field : InterfaceField) post(trim())]
[if (field.isBooleanField)]
CheckboxType::class
[elseif (field.isDateField)]
	[if (field.dateDetails = DateDetails::DateOnly)]
DateType::class
	[elseif (field.dateDetails = DateDetails::DateAndTime)]
DateTimeType::class
	[else]
TimeType::class
	[/if]
[elseif (field.isEmailField)]
EmailType::class
[elseif (field.isEnumerationField)]
ChoiceType::class
[elseif (field.isIntegerField)]
IntegerType::class
[elseif (field.isObfuscatedField)]
PasswordType::class
[elseif (field.isTextareaField)]
TextareaType::class
[else]
TextType::class
[/if]
[/template]

[template private repeatOptions(field : InterfaceField) post(trim())]
'options' => ['['/]
	[if (field.hasInputGroupClass)]
    'row_attr' => ['['/] 'class' => '[field.inputGroupClass/]' [']'/],
	[/if]
	[if (field.hasFieldLabelClass)]
    'label_attr' => ['['/] 'class' => '[field.fieldLabelClass/]' [']'/],
	[/if]
	[if (field.hasFieldValueClass)]
    'attr' => ['['/] 'class' => '[field.fieldValueClass/]' [']'/],
	[/if]
[']'/],
[/template]

[template private firstOptions(field : InterfaceField) post(trim())]
'first_options' => ['['/]
    'label' => '[field.customisedCaptionContainedId()/]',
[if (field.hasHelp)]
    'help' => '[field.helpContainedId()/]',
[/if]
[if (field.hasTitle or field.hasPlaceholder)]
    [field.fieldAttr()/]
[/if]
[if (field.isRequired or true)]
    'constraints' => ['['/]
	[if (field.isRequired)]
        [field.notBlank()/],
	[/if]
        new Length(['['/]
            'min' => 6,
            'minMessage' => 'Your password should be at least {{ limit }} characters',
            // max length allowed by Symfony for security reasons
            'max' => 4096,
        [']'/]),
    [']'/],
[/if]
[']'/],
[/template]

[template private secondOptions(field : InterfaceField) post(trim())]
'second_options' => ['['/]
    'label' => '[field.secondCaptionContainedId()/]',
[if (field.hasSecondHelp)]
    'help' => '[field.secondHelpContainedId()/]',
[/if]
[if (field.hasSecondTitle or field.hasSecondPlaceholder)]
    'attr' => ['['/]
	[if (field.hasSecondPlaceholder)]
        'placeholder' => '[field.secondPlaceholderContainedId()/]',
	[/if]
	[if (field.hasSecondTitle)]
        'title' => '[field.secondTitleContainedId()/]',
	[/if]
    [']'/],
[/if]
[']'/],
[/template]

[template private fieldAttr(field : UnitField) post(trim())]
'attr' => ['['/]
[if (field.hasPlaceholder)]
    'placeholder' => '[field.customisedPlaceholderContainedId()/]',
[/if]
[if (field.hasTitle)]
    'title' => '[field.customisedTitleContainedId()/]',
[/if]
[']'/],
[/template]

[template private notBlank(field : UnitField) post(trim())]
new NotBlank(['['/]
    'message' => 'Please enter a password',
[']'/])
[/template]

[template private setFieldValues(unit : SingletonUnit) post(trim())]
$builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
    $data = $event->getData();
[for (field : UnitField | unit.defaultValueFields)]
    if (is_null($data->[field.persistentFeature.getMethodName()/]())) {
        $data->[field.persistentFeature.setMethodName()/]([field.defaultValue.controllerExpression('$data', null)/]);
    }
[/for]
[for (field : UnitField | unit.forcedValueFields)]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
    $data->[feature.persistentFeature.setMethodName()/]([feature.forcedValue.controllerExpression('$data', null)/]);
[/let]
[/for]
});
[/template]
