[comment encoding = UTF-8 /]
[module accessor(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]


[query public keyAccessor(attribute : Attribute, entity : Entity, parentAccessor : String) : String
	= if entity.features->includes(attribute) then
			parentAccessor.concat('->').concat(attribute.getMethodName()).concat('()')
		else
			attribute.keyAccessor(entity.containingType,
				parentAccessor.concat('->').concat(entity.containingAssociation.getMethodName().concat('()')))
		endif
/]


[query public unitTitleAccessor(unit : CollectionUnit) : String
	= if unit.unitTitle.oclIsKindOf(Attribute) then
			let attribute : Attribute = unit.unitTitle.oclAsType(Attribute)
				in if unit.referencableTypes()->exists(t | t.attributes->includes(attribute)) then
						unit.referencableTypes()
							->any(t | t.attributes->includes(attribute)).instanceName()
					else
						''
					endif
		else if unit.unitTitle.oclIsKindOf(ModelLabel) then
			let label : ModelLabel = unit.unitTitle.oclAsType(ModelLabel)
				in if unit.referencableTypes()->exists(t | t.labels->includes(label)) then
						unit.referencableTypes()
							->any(t | t.labels->includes(label)).instanceName()
					else
						''
					endif
		else
			''
		endif endif
/]


[query public editAccessor(field : UnitField, parentAccessor : String) : String
	= if not field.oclIsKindOf(Path) then
			field.accessor(parentAccessor)
		else
			let leaf :  Feature
				= field.oclAsType(Path).leafFeature()
				in if leaf.isResourceFeature then
						field.accessor(parentAccessor)
							.concat('.').concat(leaf.oclAsType(ResourceFeature).filePropertyName())
					else
						field.accessor(parentAccessor)
					endif
		endif
/]

[query public accessor(field : UnitField, parentAccessor : String) : String
	= field.accessor(parentAccessor, true)
/]

[query public accessor(field : UnitField, parentAccessor : String, includeSelf : Boolean) : String
	= if field.isFeatureField() then
			field.oclAsType(Path).accessor(parentAccessor, field.selection(), includeSelf)
		else if field.isInterfaceField() then
			field.oclAsType(InterfaceField).accessor(parentAccessor)
		else if field.isLabelField() then
			field.oclAsType(UnitLabel).accessor(parentAccessor)
		else
			''
		endif endif endif
/]

[query private accessor(field : InterfaceField, parentAccessor : String) : String
	= if field.hasObjectAccess(field.selection()) then
			parentAccessor.concat('.').concat(field.modelPropertyName())
		else
			parentAccessor.concat('[''').concat(field.modelPropertyName()).concat(''']')
		endif
/]

[query private accessor(field : UnitLabel, parentAccessor : String) : String
	= parentAccessor
/]

[query private accessorXXXXXX(association : UnitAssociation, parentAccessor : String) : String
	= let accessor : String
		= if association.options.oclIsUndefined() or true then
				association.association.accessor(parentAccessor,
					association.association.alias(association.selection()),
					not association.childFeature.oclIsUndefined(),
					association.hasObjectAccess(association.selection()))
			else
				association.collectionAccessor(parentAccessor)
			endif
		in ''
/]

[query private collectionAccessor(association : UnitAssociation, parentAccessor : String) : String
	= association.repositoryAccessor()
				.concat('.')
.concat(association.name())
.concat(association.options.instanceName().toUpperFirst())
-- .concat(association.path.childSelectionName(association.selection))
				.concat('(').concat(parentAccessor).concat(')')
/]

[query private repositoryAccessor(association : UnitAssociation) : String
	= association.association.sourceType.repository.repositoryClassName().toLowerFirst()
/]

[query public accessor(path : Path, parentAccessor : String, selection : Selection) : String
	= path.accessor(parentAccessor, selection, true)
/]

[query public accessor(path : Path, parentAccessor : String, selection : Selection,
		includeSelf : Boolean) : String
	= if path.oclIsKindOf(AssociationPathElement) then
			path.oclAsType(AssociationPathElement).accessor(parentAccessor, selection, includeSelf)
		else if path.oclIsKindOf(AttributePathElement) then
			path.oclAsType(AttributePathElement).accessor(parentAccessor, selection, includeSelf)
		else if path.oclIsKindOf(ResourcePathElement) then
			path.oclAsType(ResourcePathElement).accessor(parentAccessor, selection, includeSelf)
		else
			path.oclAsType(LabelDisplayValue).accessor(parentAccessor)
		endif endif endif
/]

[query private accessor(association : AssociationPathElement, parentAccessor : String,
		selection : Selection, includeSelf : Boolean) : String
	= let accessor : String
		= if includeSelf then
				association.association.accessor(parentAccessor, association.association.alias(selection),
					not association.childFeature.oclIsUndefined(), association.hasObjectAccess(selection))
			else
				parentAccessor
			endif
		in if association.childFeature.oclIsUndefined() then
					accessor
				else
					association.childFeature.accessor(accessor, selection, true)
				endif
/]

[query private accessor(attribute : AttributePathElement, parentAccessor : String,
		selection : Selection, includeSelf : Boolean) : String
	= if includeSelf then
			attribute.attribute.accessor(parentAccessor, attribute.attribute.alias(selection),
				attribute.hasObjectAccess(selection))
		else
			parentAccessor
		endif
/]

[query private accessor(resource : ResourcePathElement, parentAccessor : String,
		selection : Selection, includeSelf : Boolean) : String
	= if includeSelf then
			resource.resource.accessor(parentAccessor, resource.resource.alias(selection), 
				resource.hasObjectAccess(selection))
		else
			parentAccessor
		endif
/]

[query private accessor(label : LabelDisplayValue, parentAccessor : String) : String
	= parentAccessor
/]

[query public pathAccessorFile(path : Path, parentAccessor : String, selection : Selection,
		objectAccess : Boolean) : String
	= if not path.leafFeature().oclIsKindOf(ResourceFeature) then
			''
		else
			let resource : ResourceFeature = path.leafFeature().oclAsType(ResourceFeature)
				in path.accessor(parentAccessor, selection, false)
					.concat('.')
					.concat(if objectAccess then
							if resource.alias(selection).oclIsUndefined() then
								resource.filePropertyName()
							else
								resource.alias(selection)
							endif.concat('.name')
						else
							if resource.alias(selection).oclIsUndefined() then
								resource.columnName
							else
								resource.alias(selection)
							endif
						endif)
					endif 
/]


[query private accessor(association : Association, parentAccessor : String, alias : String,
		requireSingleton : Boolean, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(association.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(association.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif.concat(
			if association.isSingleton or not requireSingleton then
				''
			else
				'.0'
			endif)
/]

[query private accessor(attribute : Attribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.columnName)
			else
				parentAccessor.concat('.').concat(alias)
			endif
		endif
/]

[query private accessor(resource : ResourceFeature, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= parentAccessor
/]


[query public existanceTestAccessor(path : Path, parentAccessor : String, selection : Selection) : String
	= let leaf : Path = path.leafElement()
		in if leaf.oclIsKindOf(ResourcePathElement) then
				path.existanceTestAccessor(leaf.oclAsType(ResourcePathElement), 
					path.accessor(parentAccessor, selection), path.leafFeature().alias(selection),
					leaf.hasObjectAccess(selection))
			else
				''
			endif
/]

[query private existanceTestAccessor(path : Path, leaf : ResourcePathElement,
		baseAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				baseAccessor.concat('.').concat(leaf.resource.detailsPropertyName())
			else
				baseAccessor.concat('.').concat(alias)
			endif.concat('.name')
		else
			if alias.oclIsUndefined() then
				baseAccessor.concat('[').concat(leaf.resource.columnName).concat(']')
			else
				baseAccessor.concat('.').concat(alias)
			endif.concat('[name]')
		endif
/]