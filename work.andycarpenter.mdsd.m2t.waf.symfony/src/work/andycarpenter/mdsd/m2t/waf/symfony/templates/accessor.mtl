[comment encoding = UTF-8 /]
[module accessor(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[query public keyAccessor(attribute : Attribute, entity : Entity, parentAccessor : String) : String
	= if entity.features->includes(attribute) then
			parentAccessor.concat('->').concat(attribute.getMethodName()).concat('()')
		else
			attribute.keyAccessor(entity.containingType,
				parentAccessor.concat('->').concat(entity.containingAssociation.getMethodName().concat('()')))
		endif
/]

[query public propertyAccessor(field : UnitField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if field.oclIsKindOf(InterfaceField) then
			parentAccessor.concat('.').concat(field.oclAsType(InterfaceField).name)
		else if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).propertyAccessor(parentAccessor, alias, objectAccess)
		else
			field.oclAsType(UnitAssociation).propertyAccessor(parentAccessor, alias, objectAccess)
		endif endif
/]

[query public propertyAccessor(attribute : UnitAttribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= attribute.accessor(parentAccessor, alias, objectAccess)
/]

[query public propertyAccessor(association : UnitAssociation, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(association.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(association.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif
/]

[query public accessor(field : UnitField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).accessor(parentAccessor, alias, objectAccess)
		else if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).accessor(parentAccessor, alias, objectAccess)
		else
			field.oclAsType(UnitAssociation).accessor(parentAccessor, alias, objectAccess)
		endif endif
/]

[query public accessor(field : InterfaceField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(field.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(field.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif
/]

[query public accessor(attribute : UnitAttribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.attribute.columnName)
			else
				parentAccessor.concat('.').concat(alias)
			endif
		endif
/]

[query public accessor(association : UnitAssociation, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= let accessor : String
		= if association.options.oclIsUndefined() then
				association.propertyAccessor(parentAccessor, alias, objectAccess)
			else
				association.collectionAccessor(parentAccessor)
			endif
		in if association.childFeature.oclIsUndefined() then
				accessor
			else
				association.childFeature.accessor(accessor.concat(association.association.associationIndex()))
			endif 
/]


[query private collectionAccessor(association : UnitAssociation, parentAccessor : String) : String
	= association.repositoryAccessor()
				.concat('.')
.concat(association.name)
.concat(association.options.instanceName().toUpperFirst())
-- .concat(association.path.childSelectionName(association.selection))
				.concat('(').concat(parentAccessor).concat(')')
/]

[query public repositoryAccessor(association : UnitAssociation) : String
	= association.association.sourceType.repository.className().toLowerFirst()
/]

[query public accessor(path : FeaturePath, parentAccessor : String, selection : Selection) : String
	= if path.oclIsTypeOf(FeaturePathAttribute) then
			path.oclAsType(FeaturePathAttribute).accessor(parentAccessor, selection)
		else if path.oclIsTypeOf(FeaturePathAssociation) then
			path.oclAsType(FeaturePathAssociation).accessor(parentAccessor, selection)
		else
			path.oclAsType(FeaturePathLabel).accessor(parentAccessor)
		endif endif
/]

[query public localAccessor(path : FeaturePath, parentAccessor : String, selection : Selection) : String
	= if path.oclIsTypeOf(FeaturePathAttribute) then
			path.oclAsType(FeaturePathAttribute).accessor(parentAccessor, selection)
		else if path.oclIsTypeOf(FeaturePathAssociation) then
			path.oclAsType(FeaturePathAssociation).localAccessor(parentAccessor, selection)
		else
			path.oclAsType(FeaturePathLabel).accessor(parentAccessor)
		endif endif
/]

[query public accessor(path : FeaturePathAttribute, parentAccessor : String, selection : Selection) : String
	= if path.attribute.alias(selection).oclIsUndefined() then
			parentAccessor.concat('.').concat(path.attribute.modelPropertyName())
		else
			parentAccessor.concat('.').concat(path.attribute.alias(selection))
		endif
/]

[query public accessor(path : FeaturePathAssociation, parentAccessor : String, selection : Selection) : String
	= let accessor : String = path.localAccessor(parentAccessor, selection)
		in if path.childFeature.oclIsUndefined() then
				accessor
			else
				path.childFeature.accessor(accessor.concat(path.association.associationIndex()))
			endif
/]

[query public localAccessor(path : FeaturePathAssociation, parentAccessor : String, selection : Selection) : String
	= if path.association.alias(selection).oclIsUndefined() then
			parentAccessor.concat('.').concat(path.association.modelPropertyName())
		else
			parentAccessor.concat('.').concat(path.association.alias(selection))
		endif
/]

[query public accessor(label : FeaturePathLabel, parentAccessor : String) : String
	= parentAccessor
/]

[query public accessor(child : FeatureChildPath, parentAccessor : String) : String
	=  if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).accessor(parentAccessor)
		else
			child.oclAsType(ChildPathAssociation).accessor(parentAccessor)
		endif
/]

[query public accessor(child : ChildPathAttribute, parentAccessor : String) : String
	=  parentAccessor.concat('.').concat(child.attribute.modelPropertyName())
/]

[query private accessor(child : ChildPathAssociation, parentAccessor : String) : String
	=  let childAccessor : String
		= parentAccessor.concat('.').concat(child.association.modelPropertyName())
		in if child.childFeature.oclIsUndefined() then
				childAccessor
			else
				child.childFeature.accessor(childAccessor.concat(child.association.associationIndex()))
			endif
/]

[query private repositoryAccessor(association : ChildPathAssociation) : String
	= association.association.sourceType.repository.className().toLowerFirst()
/]

[query public associationIndex(association : Association) : String
	= if association.isSingleton then
			''
		else
			'.0'
		endif
/]