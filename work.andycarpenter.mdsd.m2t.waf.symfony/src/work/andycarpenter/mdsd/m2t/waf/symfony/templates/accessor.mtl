[comment encoding = UTF-8 /]
[module accessor(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]


[query public keyAccessor(attribute : Attribute, entity : Entity, parentAccessor : String) : String
	= if entity.features->includes(attribute) then
			parentAccessor.concat('->').concat(attribute.getMethodName()).concat('()')
		else
			attribute.keyAccessor(entity.containingType,
				parentAccessor.concat('->').concat(entity.containingAssociation.getMethodName().concat('()')))
		endif
/]


[query public accessor(field : UnitField, parentAccessor : String) : String
	= if field.oclIsTypeOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).accessor(parentAccessor)
		else if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).accessor(parentAccessor)
		else if field.oclIsTypeOf(InterfaceField) then
			field.oclAsType(InterfaceField).accessor(parentAccessor)
		else if field.oclIsTypeOf(UnitResource) then
			field.oclAsType(UnitResource).accessor(parentAccessor)
		else
			parentAccessor
		endif endif endif endif
/]

[query private accessor(association : UnitAssociation, parentAccessor : String) : String
	= let accessor : String
		= if association.options.oclIsUndefined() or true then
				association.association.accessor(parentAccessor,
					association.association.alias(association.selection()),
					not association.childFeature.oclIsUndefined(),
					association.hasObjectAccess(association.selection()))
			else
				association.collectionAccessor(parentAccessor)
			endif
		in association.pathAccessor2(accessor, association.selection())
/]

[query private collectionAccessor(association : UnitAssociation, parentAccessor : String) : String
	= association.repositoryAccessor()
				.concat('.')
.concat(association.name())
.concat(association.options.instanceName().toUpperFirst())
-- .concat(association.path.childSelectionName(association.selection))
				.concat('(').concat(parentAccessor).concat(')')
/]

[query private repositoryAccessor(association : UnitAssociation) : String
	= association.association.sourceType.repository.repositoryClassName().toLowerFirst()
/]

[query private accessor(attribute : UnitAttribute, parentAccessor : String) : String
	= attribute.attribute.accessor(parentAccessor,
		attribute.attribute.alias(attribute.selection()),
		attribute.hasObjectAccess(attribute.selection()))
/]

[query private accessor(field : InterfaceField, parentAccessor : String) : String
	= if field.hasObjectAccess(field.selection()) then
			parentAccessor.concat('.').concat(field.modelPropertyName())
		else
			parentAccessor.concat('[''').concat(field.modelPropertyName()).concat(''']')
		endif
/]

[query private accessor(resource : UnitResource, parentAccessor : String) : String
	= resource.resource.accessor(parentAccessor,
		resource.resource.alias(resource.selection()),
		resource.hasObjectAccess(resource.selection()))
/]


[query public pathAccessor(path : Path, parentAccessor : String, selection : Selection) : String
	= if path.oclIsKindOf(AssociationPathElement) then
			path.oclAsType(AssociationPathElement).pathAccessor(parentAccessor, selection)
		else if path.oclIsKindOf(AttributePathElement) then
			path.oclAsType(AttributePathElement).pathAccessor(parentAccessor, selection)
		else if path.oclIsKindOf(ResourcePathElement) then
			path.oclAsType(ResourcePathElement).pathAccessor(parentAccessor, selection)
		else
			path.oclAsType(LabelDisplayValue).pathAccessor(parentAccessor)
		endif endif endif
/]

[query private pathAccessor(association : AssociationPathElement, parentAccessor : String,
		selection : Selection) : String
	= association.pathAccessor2(
		association.association.accessor(parentAccessor,
			association.association.alias(selection),
			not association.childFeature.oclIsUndefined(),
			association.hasObjectAccess(selection)), 
		selection)
/]

[query private pathAccessor2(association : AssociationPathElement, accessor : String,
		selection : Selection) : String
	= if association.childFeature.oclIsUndefined() then
				accessor
			else
				association.childFeature.pathAccessor(accessor, selection)
			endif 
/]

[query private pathAccessor(attribute : AttributePathElement, parentAccessor : String,
		selection : Selection) : String
	= attribute.attribute.accessor(parentAccessor, attribute.attribute.alias(selection),
		attribute.hasObjectAccess(selection))
/]

[query private pathAccessor(resource : ResourcePathElement, parentAccessor : String,
		selection : Selection) : String
	= resource.resource.accessor(parentAccessor, resource.resource.alias(selection), 
		resource.hasObjectAccess(selection))
/]

[query private pathAccessor(label : LabelDisplayValue, parentAccessor : String) : String
	= parentAccessor
/]

[query public pathAccessorResourceExistance(path : Path, parentAccessor : String, selection : Selection,
		objectAccess : Boolean) : String
	= if not path.leafFeature().oclIsKindOf(ResourceFeature) then
			''
		else
			let resource : ResourceFeature = path.leafFeature().oclAsType(ResourceFeature)
				in path.pathAccessor(parentAccessor, selection)
					.concat('.')
					.concat(if objectAccess then
							if resource.alias(selection).oclIsUndefined() then
								resource.detailsPropertyName()
							else
								resource.alias(selection)
							endif.concat('.name')
						else
							if resource.alias(selection).oclIsUndefined() then
								resource.columnName
							else
								resource.alias(selection)
							endif
						endif)
					endif 
/]


[query private accessor(association : Association, parentAccessor : String, alias : String,
		requireSingleton : Boolean, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(association.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(association.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif.concat(
			if association.isSingleton or not requireSingleton then
				''
			else
				'.0'
			endif)
/]

[query private accessor(attribute : Attribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.columnName)
			else
				parentAccessor.concat('.').concat(alias)
			endif
		endif
/]

[query private accessor(resource : ResourceFeature, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= parentAccessor
/]