[comment encoding = UTF-8 /]
[module accessor(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[query public keyAccessor(attribute : Attribute, entity : Entity, parentAccessor : String) : String
	= if entity.features->includes(attribute) then
			parentAccessor.concat('->').concat(attribute.getMethodName()).concat('()')
		else
			attribute.keyAccessor(entity.containingType,
				parentAccessor.concat('->').concat(entity.containingAssociation.getMethodName().concat('()')))
		endif
/]

[query public propertyAccessor(field : UnitField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if field.oclIsKindOf(InterfaceField) then
			parentAccessor.concat('.').concat(field.oclAsType(InterfaceField).name)
		else if field.isAttributeField then
			field.oclAsType(UnitAttribute).propertyAccessor(parentAccessor, alias, objectAccess)
		else if field.isResourceField then
			field.oclAsType(UnitResource).propertyAccessor(parentAccessor, alias, objectAccess)
		else
			field.oclAsType(UnitAssociation).propertyAccessor(parentAccessor, alias, objectAccess)
		endif endif endif
/]

[query public propertyAccessor(attribute : UnitAttribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= attribute.accessor(parentAccessor, alias, objectAccess)
/]

[query public propertyAccessor(resource : UnitResource, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= resource.accessor(parentAccessor, alias, objectAccess)
/]

[query public propertyAccessor(association : UnitAssociation, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(association.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(association.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif
/]

[query public accessor(field : UnitField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).accessor(parentAccessor, alias, objectAccess)
		else if field.isAttributeField then
			field.oclAsType(UnitAttribute).accessor(parentAccessor, alias, objectAccess)
		else if field.isResourceField then
			field.oclAsType(UnitResource).accessor(parentAccessor, alias, objectAccess)
		else
			field.oclAsType(UnitAssociation).accessor(parentAccessor, alias, objectAccess)
		endif endif endif
/]

[query public accessor(field : InterfaceField, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(field.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('[''').concat(field.modelPropertyName()).concat(''']')
			else
				parentAccessor.concat('[''').concat(alias).concat(''']')
			endif
		endif
/]

[query public accessor(attribute : UnitAttribute, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(attribute.attribute.columnName)
			else
				parentAccessor.concat('.').concat(alias)
			endif
		endif
/]

[query public accessor(resource : UnitResource, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= if objectAccess then
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(resource.modelPropertyName())
			else
				parentAccessor.concat('.').concat(alias)
			endif
		else
			if alias.oclIsUndefined() then
				parentAccessor.concat('.').concat(resource.resource.columnName)
			else
				parentAccessor.concat('.').concat(alias)
			endif
		endif
/]

[query public accessor(association : UnitAssociation, parentAccessor : String, alias : String, objectAccess : Boolean) : String
	= let accessor : String
		= if association.options.oclIsUndefined() then
				association.propertyAccessor(parentAccessor, alias, objectAccess)
			else
				association.collectionAccessor(parentAccessor)
			endif
		in if association.childFeature.oclIsUndefined() then
				accessor
			else
				association.childFeature.accessor(
					accessor.concat(association.association.associationIndex()), null)
			endif 
/]


[query private collectionAccessor(association : UnitAssociation, parentAccessor : String) : String
	= association.repositoryAccessor()
				.concat('.')
.concat(association.name())
.concat(association.options.instanceName().toUpperFirst())
-- .concat(association.path.childSelectionName(association.selection))
				.concat('(').concat(parentAccessor).concat(')')
/]

[query public repositoryAccessor(association : UnitAssociation) : String
	= association.association.sourceType.repository.repositoryClassName().toLowerFirst()
/]

[query public localAccessor(path : Path, parentAccessor : String, selection : Selection) : String
	= if path.oclIsKindOf(AttributePathElement) then
			path.oclAsType(AttributePathElement).accessor(parentAccessor, selection)
		else if path.oclIsKindOf(AssociationPathElement) then
			path.oclAsType(AssociationPathElement).accessor(parentAccessor, selection)
		else if path.oclIsKindOf(ResourcePathElement) then
			path.oclAsType(ResourcePathElement).accessor(parentAccessor, selection)
		else
			path.oclAsType(LabelDisplayValue).accessor(parentAccessor)
		endif endif endif
/]

[query private localAccessor(path : AssociationPathElement, parentAccessor : String, selection : Selection) : String
	= if path.association.alias(selection).oclIsUndefined() then
			parentAccessor.concat('.').concat(path.association.modelPropertyName())
		else
			parentAccessor.concat('.').concat(path.association.alias(selection))
		endif
/]

[query public accessor(path : Path, parentAccessor : String, selection : Selection) : String
	= if path.oclIsKindOf(AttributePathElement) then
			path.oclAsType(AttributePathElement).accessor(parentAccessor, selection)
		else if path.oclIsKindOf(AssociationPathElement) then
			path.oclAsType(AssociationPathElement).accessor(parentAccessor, selection)
		else if path.oclIsKindOf(ResourcePathElement) then
			path.oclAsType(ResourcePathElement).accessor(parentAccessor, selection)
		else
			path.oclAsType(LabelDisplayValue).accessor(parentAccessor)
		endif endif endif
/]

[query private accessor(path : AssociationPathElement, parentAccessor : String, selection : Selection) : String
	= let accessor : String = path.localAccessor(parentAccessor, selection)
		in if path.childFeature.oclIsUndefined() then
				accessor
			else
				path.childFeature.accessor(
					accessor.concat(path.association.associationIndex()), null)
			endif
/]

[query private accessor(path : AttributePathElement, parentAccessor : String, selection : Selection) : String
	= if path.attribute.alias(selection).oclIsUndefined() then
			parentAccessor.concat('.').concat(path.attribute.modelPropertyName())
		else
			parentAccessor.concat('.').concat(path.attribute.alias(selection))
		endif
/]

[query private accessor(path : ResourcePathElement, parentAccessor : String, selection : Selection) : String
	= if path.resource.alias(selection).oclIsUndefined() then
			if (path.resource.oclIsTypeOf(ImageResource)) then
				parentAccessor.concat('.').concat(path.resource.detailsPropertyName()).concat('.name')
			else
				parentAccessor.concat('.').concat(path.resource.namePropertyName())
			endif
		else
			parentAccessor.concat('.').concat(path.resource.alias(selection))
		endif
/]

[query private accessor(label : LabelDisplayValue, parentAccessor : String) : String
	= parentAccessor
/]

[query public resourceAccessor(path : Path, parentAccessor : String, selection : Selection) : String
	= if path.oclIsKindOf(AttributePathElement) then
			path.oclAsType(AttributePathElement).resourceAccessor(parentAccessor, selection)
		else if path.oclIsKindOf(AssociationPathElement) then
			path.oclAsType(AssociationPathElement).resourceAccessor(parentAccessor, selection)
		else if path.oclIsKindOf(ResourcePathElement) then
			path.oclAsType(ResourcePathElement).resourceAccessor(parentAccessor, selection)
		else
			''
		endif endif endif
/]

[query private resourceAccessor(path : AssociationPathElement, parentAccessor : String, selection : Selection) : String
	= let accessor : String = path.localAccessor(parentAccessor, selection)
		in if path.childFeature.oclIsUndefined() then
				accessor
			else
				path.childFeature.resourceAccessor(
					accessor.concat(path.association.associationIndex()), null)
			endif
/]

[query private resourceAccessor(path : AttributePathElement, parentAccessor : String, selection : Selection) : String
	= ''
/]

[query private resourceAccessor(path : ResourcePathElement, parentAccessor : String, selection : Selection) : String
	= parentAccessor
/]

[query private repositoryAccessor(association : ChildAssociation) : String
	= association.association.sourceType.repository.repositoryClassName().toLowerFirst()
/]

[query public associationIndex(association : Association) : String
	= if association.isSingleton then
			''
		else
			'.0'
		endif
/]