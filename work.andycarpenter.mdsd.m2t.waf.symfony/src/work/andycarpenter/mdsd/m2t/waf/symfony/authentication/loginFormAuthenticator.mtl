[comment encoding = UTF-8 /]
[module loginFormAuthenticator(
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::annotations/]


[template public loginFormAuthenticator(authentication : LocalAuthenticationSystem) post(trim())]
[file(authentication.loginFormAuthenticatorFilename(), false)]
<?php

namespace [authentication.authenticationNamespace()/];

[authentication.useStatements()/]

class [authentication.authenticatorName()/] extends AbstractLoginFormAuthenticator
{
    use TargetPathTrait;

    public const LOGIN_ROUTE = '[authentication.loginElement.routeName()/]';

    [authentication.properties()/]

    [authentication.constructor()/]

    [authentication.authenticateMethod()/]

    [authentication.successMethod()/]

    [authentication.loginUrlMethod()/]
}
[/file]
[/template]

[template private useStatements(authentication : LocalAuthenticationSystem) post(trim())]
[if (authentication.captcha)]
use Karser\Recaptcha3Bundle\Validator\Constraints\Recaptcha3Validator;
use Psr\Log\LoggerInterface;
[/if]
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Util\TargetPathTrait;
[/template]

[template private properties(authentication : LocalAuthenticationSystem) post(trim())]
/**
 * @var RouterInterface $router
 */
private RouterInterface $router;
[/template]

[template private constructor(authentication : LocalAuthenticationSystem) post(trim())]
public function __construct(RouterInterface $router[if (authentication.captcha)]
, Recaptcha3Validator $recaptcha3Validator, LoggerInterface $logger[/if])
{
    $this->router = $router;
}
[/template]

[template public authenticateMethod(authentication : LocalAuthenticationSystem) post(trim())]
/**
 * @param Request $request
 * 
 * @return PassportInterface
 */
public function authenticate(Request $request): Passport
{
    $authentication = $request->request->get('authentication_login');
    $email = $authentication['['/]'[authentication.identifierFeture.id()/]'[']'/];
    $password = $authentication['['/]'plainPassword'[']'/];
    $token = $authentication['['/]'_token'[']'/];

    $request->getSession()->set(Security::LAST_USERNAME, $email);

    return new Passport(
        new UserBadge($email),
        new PasswordCredentials($password),
        ['['/]
            new CsrfTokenBadge('[authentication.loginElement.csrfTokenId()/]', $token),
            new RememberMeBadge(),
        [']'/]
        );
}
[/template]

[template public successMethod(authentication : LocalAuthenticationSystem) post(trim())]
/**
 * @param Request $request
 * @param TokenInterface $token
 * @param string $firewallName
 *
 * @return Response
 */
public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
{
    if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
        return new RedirectResponse($targetPath);
    }

    return new RedirectResponse($this->router->generate('competitions'));
}
[/template]

[template public loginUrlMethod(authentication : LocalAuthenticationSystem) post(trim())]
/**
 * @param Request $request
 *
 * @return string
 */
protected function getLoginUrl(Request $request): string
{
    return $this->router->generate(self::LOGIN_ROUTE);
}
[/template]