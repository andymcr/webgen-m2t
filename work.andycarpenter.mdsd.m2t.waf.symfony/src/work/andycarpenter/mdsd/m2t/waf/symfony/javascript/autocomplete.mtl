[comment encoding = UTF-8 /]
[module autocomplete(
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]


[template public autocompleteJs(model : WafModel)]
[file(model.javascriptAssetsDirectory().concat('/').concat('autocomplete').concat(model.javascriptExtension()), false)]
export default class Autocomplete{
    #apiBaseUrl
    #selectionElement
    #selectionDisplayStyle
	inputId = "autocomplete";
    #inputElement
    #matchesElement

    constructor(selectionId, apiBaseUrl) {
        this.#apiBaseUrl = apiBaseUrl;
        this.#selectionElement = document.getElementById(selectionId);
        this.#selectionElement.addEventListener("click", (event) => this.init(event));
    }

    init(event) {
        this.#selectionDisplayStyle = this.#selectionElement.style.display;
        this.#selectionElement.style.display = "none";
        this.#inputElement = document.createElement("input");
        this.#selectionElement.insertAdjacentElement("afterend", this.#inputElement);
        this.#inputElement.id = this.inputId;
        this.#inputElement.className = this.#selectionElement.className;
        this.#inputElement.focus();
        this.#inputElement.addEventListener("input", (event) => this.matchingOptions(event)); // this.debounce(500));
    }

    debounce(delay) {
        let timeout;
        return function(event) {
            clearTimeout(timeout);
            timeout = setTimeout(this.matchingOptions().bind(this), delay, event);
        }
    }

    matchingOptions (event) {
        const pattern = event.target.value;
        if (pattern.trim() != '') {
            this.getMatches(pattern)
            .then((matches) => {
                this.removeMatches();
                this.showMatches(matches)
            })
            .catch((error) => {
                console.log(error)
            });
        }
    }

    async getMatches(pattern) {
        const response = await fetch(this.#apiBaseUrl.concat(pattern));
        const json = await response.json();
        return JSON.parse(json);
    }

    showMatches(matches) {
        this.#matchesElement = document.createElement("select");
        this.#selectionElement.insertAdjacentElement("afterend", this.#matchesElement);
        this.#matchesElement.setAttribute("class", "xx");
        this.#matchesElement.setAttribute("size", matches.length);
        matches.forEach((match) => {
            const option = document.createElement("option");
            this.#matchesElement.appendChild(option);
            option.value = match.id;
            option.innerHTML = match.defaultLabel;
            option.addEventListener("click", (event) => this.selectOption(event));
        })
    }

   selectOption(event) {
        this.removeSelectionChoice();
        const selectedOption = document.createElement("option");
        this.#selectionElement.appendChild(selectedOption);
        selectedOption.value = event.target.value;
        selectedOption.innerHTML = event.target.innerHTML;
        selectedOption.selected = 'selected';

        this.removeMatches();
        this.restoreSelection();
    }

    removeMatches() {
        if (this.#matchesElement != null) {
            this.#matchesElement.parentNode.removeChild(this.#matchesElement);
            this.#matchesElement = null;
        }
    }

    removeSelectionChoice() {
        for (let i = this.#selectionElement.options.length-1; i >= 0; i--) {
            this.#selectionElement.removeChild(this.#selectionElement.options['['/]i[']'/])
        }
    }

    restoreSelection() {
        if (this.#inputElement) {
            this.#inputElement.parentNode.removeChild(this.#inputElement);
        }
        this.#selectionElement.style.display = this.#selectionDisplayStyle;
    }
}
[/file]
[/template]