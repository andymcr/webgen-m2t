[comment encoding = UTF-8 /]
[module editMethods(
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::attributes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::commonMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionCreateMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionUpdateMethod()/]

[/if]
[/let]
[/template]

[template private optionFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.selection.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for][if (filter.selection.parameters->notEmpty() and filter.parameters->notEmpty())]
, [/if][for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private selectionActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.selection.parameters) separator(', ')]
$[parameter.name/][/for][if (filter.selection.parameters->notEmpty() and filter.parameters->notEmpty())]
, [/if][for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private actionCreateMethod(unit : EditUnit) post(trim())]
[let controller : Controller = unit.controller]
/**
 */
[if (unit.isAuthorised)]
[unit.securityAttribute()/]
[/if]
[unit.routeCreateAttribute()/]
public function [unit.actionName()/]([unit.actionMethodFormals()/]): Response
{
    [unit.actionCreateCore()/]
[if (unit.controller.isMultiPage)]
    return $this->renderForm('[unit.controller.controllerTemplateDirectory()/]/[unit.templateName()/][unit.htmlExtension()/][unit.twigExtension()/]', ['['/]
        '[unit.instanceParameter()/]' => [unit.formVariable()/]
    [']'/]);
[else]
    return $this->renderController([unit.renderMethodActuals()/]);
[/if]
}
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(CreateUnit)) post(trim())]
[let createUnit : CreateUnit = unit.oclAsType(CreateUnit)]
[createUnit.actionCreateCore()/]
[/let]
[/template]

[template private actionCreateCore(unit : EditUnit) post(trim())]
[let sourceParameters : Sequence(Attribute) = unit.routeParameters()]
[unit.instanceVariable()/] = new [unit.modelClassName()/]();
[if (unit.isContained and not unit.hasExplicitlyEditedContainer)]
[unit.setContainer()/]
[/if]
[unit.formVariable()/] = [unit.createForm(unit.instanceVariable(), sourceParameters)/];
	[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
	[/if]
[unit.formVariable()/]->handleRequest($request);
if ([unit.formVariable()/]->isSubmitted() && [unit.formVariable()/]->isValid()) {
    [unit.saveBody(sourceParameters)/]
}
[/let]
[/template]

[template private actionUpdateMethod(unit : EditUnit) post(trim())]
[let controller : Controller = unit.controller]
/**
 */
[if (unit.isAuthorised)]
[unit.securityAttribute()/]
[/if]
[unit.routeUpdateAttribute()/]
public function [unit.actionName(true)/]([unit.actionMethodUpdateFormals()/]): Response
{
    [unit.actionUpdateCore()/]
[if (unit.controller.isMultiPage)]
    return $this->renderForm('[unit.controller.controllerTemplateDirectory()/]/[unit.templateName()/][unit.htmlExtension()/][unit.twigExtension()/]', ['['/]
        '[unit.instanceParameter()/]' => [unit.formVariable()/]
    [']'/]);
[else]
    return $this->renderController([unit.renderMethodUpdateActuals()/]);
[/if]
}
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(UpdateUnit)) post(trim())]
[let updateUnit : UpdateUnit = unit.oclAsType(UpdateUnit)]
[updateUnit.actionUpdateCore()/]
[/let]
[/template]

[template private actionUpdateCore(unit : EditUnit) post(trim())]
[let sourceParameters : Sequence(Attribute) = unit.routeUpdateParameters()]
[unit.instanceVariable()/] = [unit.loadUpdateInstance()/];
if (![unit.instanceVariable()/]) {
    throw $this->createNotFoundException('The [unit.contentType.name/] does not exist');
}
[for (field : UnitAssociation | unit.formFields->select(f | f.isContains).oclAsType(UnitAssociation))]
[let association : Association = field.persistentFeature.oclAsType(Association)]
$original[field.instanceName().toUpperFirst()/] = new ArrayCollection();
foreach ([unit.instanceVariable()/]->[field.persistentFeature.getMethodName()/]() as $[association.targetType.instanceName()/])
    $original[field.instanceName().toUpperFirst()/]->add($[association.targetType.instanceName()/]);
[/let]
[/for]
[unit.formVariable()/] = [unit.updateForm(sourceParameters)/];
[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
[/if]
[unit.formVariable()/]->handleRequest($request);
if ([unit.formVariable()/]->isSubmitted() && [unit.formVariable()/]->isValid()) {
[for (field : UnitAssociation | unit.formFields->select(f | f.isContains).oclAsType(UnitAssociation))]
[let association : Association = field.persistentFeature.oclAsType(Association)]
    foreach ($original[field.instanceName().toUpperFirst()/] as $[association.targetType.instanceName()/])
        if (false === [unit.instanceVariable()/]->[field.persistentFeature.getMethodName()/]()->contains($[association.targetType.instanceName()/]))
            $this->[association.targetType.repository.instanceName()/]->remove($[association.targetType.instanceName()/]);
[/let]
[/for]
    [unit.saveBody(sourceParameters)/]
}
[/let]
[/template]

[template private createForm(unit : EditUnit, instanceName : String, sourceParameters : Sequence(Attribute)) post(trim())]
[let controller : Controller = unit.controller]
$this->createForm([unit.typeClassName()/]::class, [instanceName/], ['['/]
    'action' => $this->generateUrl('[unit.routeName()/]'[if (controller.hasFilters or controller.hasPagination)], [if (not unit.hasRouteParameters())]
$request->query->all()[else]
array_merge(
        $request->query->all(), ['['/]
            [unit.routeActualParameters(sourceParameters)/]
    [']'/])[/if]
[else]
	[if (unit.hasRouteParameters())]
, ['['/]
        [unit.routeActualParameters(sourceParameters)/]
    [']'/][/if]
[/if]),
[']'/])
[/let]
[/template]

[template private updateForm(unit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[let controller : Controller = unit.controller]
$this->createForm([unit.typeClassName()/]::class, [unit.instanceVariable()/], ['['/]
    'action' => $this->generateUrl('[unit.routeUpdateName()/]'[if (controller.hasFilters or controller.hasPagination)], [if (not unit.hasRouteUpdateParameters())]
$request->query->all()[else]
array_merge(
        $request->query->all(), ['['/]
            [unit.routeActualUpdateParameters(sourceParameters)/]
    [']'/])[/if]
[else]
	[if (unit.hasRouteUpdateParameters())]
, ['['/]
        [unit.routeActualUpdateParameters(sourceParameters)/]
    [']'/][/if]
[/if]),
[']'/])
[/let]
[/template]

[template public setContainer(unit : EditUnit) post(trim())]
[let modelPropertyName : String = unit.contentType.containingAssociation.modelPropertyName().toUpperFirst()]
[let parentRepository : Repository = unit.contentType.containingType.repository]
$[unit.containerInstanceName()/] = [unit.getContainerRepository()/]->[unit.containingType.findMethodName()/]([unit.routeParameterList(false)/]);
if (is_null($[unit.containerInstanceName()/])) {
    throw $this->createNotFoundException('The [unit.containingType.name/] does not exist');
}
[unit.instanceVariable()/]->set[modelPropertyName/]($[unit.containerInstanceName()/]);
[/let]
[/let]
[/template]

[template private saveBody(unit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[unit.getContentRepository()/]->save([unit.instanceVariable()/], true);
[if (unit.hasSuccessMessage)]
$this->addFlash('success', $this->translationService->trans('[unit.successMessageId()/]', ['['/][']'/], '[unit.controller.translationDomain()/]'));
[/if]
[if (not unit.confirmDestination.oclIsUndefined())]
return [unit.confirmDestination.redirect(sourceParameters)/];
[else]
	[if (not unit.onSaveContinueEditing)]
return [unit.redirect(sourceParameters)/];
	[/if]
[/if]
[/template]

[query private displayEmptyForm(unit : EditUnit) : Boolean
	= if not unit.oclIsKindOf(UpdateUnit) then
			true
		else
			unit.oclAsType(UpdateUnit).displayEmptyForm
		endif
/]

[template public renderCode(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (editUnit.displayEmptyForm())]
if (!isset([editUnit.formVariable()/])) {
    [editUnit.formVariable()/] = [editUnit.createForm('null', editUnit.routeParameters())/];
}
[/if]
[if (not editUnit.displayEmptyForm())]
if (isset([editUnit.formVariable()/])) {
    $parameters['['/]'[editUnit.instanceParameter()/]'[']'/] = [editUnit.formVariable()/];
}
[else]
$parameters['['/]'[editUnit.instanceParameter()/]'[']'/] = [editUnit.formVariable()/];
[/if]
[/let]
[/template]