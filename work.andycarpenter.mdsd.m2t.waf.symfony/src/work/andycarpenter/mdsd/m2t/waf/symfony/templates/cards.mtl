[comment encoding = UTF-8 /]
[module cards(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::authorisationTemplate/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::twig/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::accessor/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::action/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::badge/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::base/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::collection/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::fields/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::image/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::titles/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::value/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let accessor : String = cardsUnit.instanceParameter()]
[file(cardsUnit.templateFilename(), false)]
[if (unit.controller.isMultiPage())]
[unit.templateStart()/]

{% block content %}
[/if]
{% trans_default_domain "entity" %}
<section [if (cardsUnit.hasSectionClass())] class="[cardsUnit.sectionClass()/]" [/if]id="[cardsUnit.instanceParameter()/]">
<h4[if (cardsUnit.hasCaptionClass() or cardsUnit.omitCaption)]
 class="[if (cardsUnit.hasCaptionClass())][cardsUnit.captionClass()/][if (cardsUnit.omitCaption)] [/if][/if][if (cardsUnit.omitCaption)]hidden[/if]"[/if]>[cardsUnit.unitTitle()/]</h4>
[if (cardsUnit.hasFilters)]
 [cardsUnit.unitFilters()/]
[/if]
[if ((cardsUnit.hasGeneralActions() or cardsUnit.hasTargetActions() or cardsUnit.hasContainerActions()) and cardsUnit.containerActionsPlacement <> ContainerActionsPlacement::Below)]
 [cardsUnit.unitActions()/]
[/if]
[if (cardsUnit.hasPagination
	and not cardsUnit.selection.oclIsUndefined())]
 <turbo-frame id="[unit.templateName()/]-{{ [cardsUnit.instanceParameter()/].currentPage }}" target="_top">
[/if]
 [cardsUnit.unitContent(accessor)/]
[if (cardsUnit.hasPagination
	and not cardsUnit.selection.oclIsUndefined())]
 </turbo-frame>
[/if]
[if ((cardsUnit.hasGeneralActions() or cardsUnit.hasContainerActions()) and cardsUnit.containerActionsPlacement = ContainerActionsPlacement::Below)]
 [cardsUnit.unitActions()/]
[/if]
</section>
[if (unit.controller.isMultiPage())]
{% endblock %}
[/if]
[/file]
[/let]
[/let]
[/template]

[template private unitContent(unit : ContentUnit, accessor : String)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let variable : String = cardsUnit.contentType.instanceName()]
[if (cardsUnit.hasGroupedResults)]
{% set [cardsUnit.selection.grouping->first().name/] = null %}
[else]
<div[if (cardsUnit.hasContentClass())] class="[cardsUnit.contentClass()/]"[/if]>
[/if]
{% for [variable/] in [accessor/] %}
[if (cardsUnit.hasGroupedResults)]
{% if [cardsUnit.selection.grouping->first().name/] != [variable/].enteredIn.title %}
 {% if [cardsUnit.selection.grouping->first().name/] is not null %}
</div>
 {% endif %}
{% set [cardsUnit.selection.grouping->first().name/] = [variable/].enteredIn.title %}
<h5>{{ [variable/].enteredIn.title }}</h5>
<div[if (cardsUnit.hasContentClass())] class="[cardsUnit.contentClass()/]"[/if]>
{% endif%}
[/if]
 <div[if (cardsUnit.hasCardClass())] class="[cardsUnit.cardClass()/]"[/if]>
[if (cardsUnit.badges->notEmpty())]
  [cardsUnit.header(variable)/]
[/if]
  [cardsUnit.cardBody(variable)/]
[if (cardsUnit.hasInstanceActions())]
	[if (not cardsUnit.overlaySingleSelectAction or cardsUnit.actions()->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() > 1)]
  [cardsUnit.footer(variable)/]
	[/if]
[/if]
 </div>
{% endfor %}
</div>
[if (cardsUnit.hasPagination
	and not cardsUnit.selection.oclIsUndefined())]
 {% if [cardsUnit.instanceParameter()/].hasNextPage %}
 <turbo-frame id="[unit.templateName()/]-{{ [cardsUnit.instanceParameter()/].nextPage }}" src="{{ pagerfanta_page_url([cardsUnit.instanceParameter()/], [cardsUnit.instanceParameter()/].nextPage) }}" target="_top" loading="lazy"></turbo-frame>
 {% endif %}
[/if]
[/let]
[/let]
[/template]

[template private header(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasCardHeaderClass())] class="[unit.cardHeaderClass()/]"[/if]>
[for (badge : Badge | unit.badges)]
 [badge.badge(cardAccessor)/]
[/for]
</div>
[/template]

[template private footer(unit : CardsUnit, cardAccessor : String) post(trim())]
[if (unit.instanceActions()->forAll(a | a.hasCustomisedAuthorisation()))]
	[if (unit.instanceActions()->size() = 1)]
{% if [unit.instanceActions()->first().authorisation().authorisationExpression()/] %}
	[elseif (unit.instanceActions()->subSequence(2, unit.instanceActions()->size())
				->forAll(a | a.authorisation().areSame(unit.instanceActions()->first().authorisation())))]
{% if [unit.instanceActions()->first().authorisation().authorisationExpression()/] %}
	[else]
{% if [for (action : Action | unit.instanceActions()
			->sortedBy(a | a.authorisation().oclAsType(IsGrantedRole).role.name)) separator(' or ')]
[action.authorisation().authorisationExpression()/][/for] %}
	[/if]
[/if]
<nav[if (unit.hasCardFooterClass() or unit.hasInstanceControlClass)]
 class="[if (unit.hasCardFooterClass())][unit.cardFooterClass()/][if (unit.hasInstanceControlClass)] [/if][/if][if (unit.hasInstanceControlClass)]
[unit.instanceControlClass/][/if]"[/if]>
[for (action : Action | unit.instanceActions())]
 [action.unitActionLink(cardAccessor)/]
[/for]
</nav>
[if (unit.instanceActions()->forAll(a | a.hasCustomisedAuthorisation()))]
{% endif %}
[/if]
[/template]

[template private unitActions(unit : CardsUnit) post(trim())]
<div[if (unit.hasControlClass)] class="[unit.controlClass/]"[/if] role="group" aria-label="Floating action buttons">
[for (action : Action | unit.actions())]
	[if (action.isGeneralAction())]
 [action.unitActionLink(null)/]
	[elseif (action.isTargetAction())]
	[let targetUnit : DynamicUnit = action.oclAsType(TargetAction).target.oclAsType(DynamicUnit)]
		[if (targetUnit.isContained() and targetUnit.hasExplicitlyEditedContainer)]
 [action.unitActionLink(null)/]
		[elseif (unit.contentType.keyEntity().isContained)]
 [action.unitActionLink(unit.containerParameter())/]
		[else]
 [action.unitActionLink(null)/]
		[/if]
	[/let]
	[elseif (action.isContainerAction())]
 [action.unitActionLink(unit.containerParameter())/]
	[/if]
[/for]
</div>
[/template]

[template private floatingInstanceActions(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasControlClass)] class="[unit.controlClass/]"[/if]>
 <nav[if (unit.hasInstanceControlClass)] class="[unit.instanceControlClass/]"[/if]>
[for (action : Action | unit.instanceActions())]
  [action.unitActionLink(cardAccessor)/]
[/for]
 </nav>
</div>
[/template]

[template private cardBody(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasCardBodyClass())] class="[unit.cardBodyClass()/]"[/if]>
[if (unit.oclIsTypeOf(TextCardsUnit))]
[let textUnit : TextCardsUnit = unit.oclAsType(TextCardsUnit)]
	[if (not textUnit.elementTitle.oclIsUndefined() or textUnit.displayFields->notEmpty())]
 [textUnit.cardTitle(cardAccessor)/]
	[/if]
[/let]
[elseif (unit.oclIsTypeOf(DateCardsUnit))]
[let dateUnit : DateCardsUnit = unit.oclAsType(DateCardsUnit)]
	[if (not dateUnit.elementTitle.oclIsUndefined())]
 [dateUnit.cardTitle(cardAccessor)/]
	[/if]
[/let]
[elseif (unit.oclIsTypeOf(ImageCardsUnit))]
[let imageUnit : ImageCardsUnit = unit.oclAsType(ImageCardsUnit)]
 [imageUnit.cardTitle(cardAccessor)/]
[/let]
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.fields(cardAccessor)/]
[/if]
</div>
[/template]

[template private cardTitle(unit : TextCardsUnit, cardAccessor : String) post(trim())]
[if (not unit.elementTitle.oclIsUndefined())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.getPathValue(unit.elementTitle.accessor(cardAccessor, unit.selection))/] }}</h5>
[/if]
[/template]

[template private cardTitle(unit : DateCardsUnit, cardAccessor : String) post(trim())]
[unit.dateImage(cardAccessor)/]
[if (not unit.elementTitle.oclIsUndefined() or unit.displayFields->notEmpty())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.getPathValue(unit.elementTitle.accessor(cardAccessor, unit.selection))/] }}</h5>
[/if]
[/template]

[template private dateImage(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<div class="card-image img-fluid">
[if (unit.overlaySingleSelectAction and unit.actions()->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() = 1)]
[let action : Action = unit.actions()->first()]
 [action.unitActionLink(cardAccessor)/]
[/let]
[else]
 [unit.dateIcon(cardAccessor)/]
[/if]
</div>
[/template]

[template private dateIcon(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<time datetime="{{ [unit.elementDate.getPathValue(unit.elementDate.accessor(cardAccessor, unit.selection))/] | date }}" class="xxxx"><em>
 {{ [unit.elementDate.getPathValue(unit.elementDate.accessor(cardAccessor, unit.selection))/] | date('l') }}
 <strong>{{ [unit.elementDate.getPathValue(unit.elementDate.accessor(cardAccessor, unit.selection))/] | date('j') }}</strong>
 {{ [unit.elementDate.getPathValue(unit.elementDate.accessor(cardAccessor, unit.selection))/] | date('F') }}
 {{ [unit.elementDate.getPathValue(unit.elementDate.accessor(cardAccessor, unit.selection))/] | date('Y') }}
</em></time>
[/template]

[template private cardTitle(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[unit.cardImage(cardAccessor)/]
[if (not unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.getPathValue(unit.elementTitle.accessor(cardAccessor, unit.selection))/] }}</h5>
[/if]
[/template]

[template private cardImage(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[let imageClass : String = 'card-img-top']
[if (unit.overlaySingleSelectAction and unit.actions()->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() = 1)]
[let action : Action = unit.actions()->first()]
 [action.unitActionLink(unit.image(cardAccessor, unit.elementTitle, imageClass), cardAccessor)/]
[/let]
[else]
 [unit.image(cardAccessor, unit.elementTitle, imageClass)/]
[/if]
[if (unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
<div class="card-img-overlay">
 <span class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{% [unit.elementTitle.getPathValue(unit.elementTitle.accessor(cardAccessor, unit.selection))/] %}</span>
</div>
[/if]
[/let]
[/template]