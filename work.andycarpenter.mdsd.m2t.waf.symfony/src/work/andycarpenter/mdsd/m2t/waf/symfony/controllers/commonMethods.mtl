[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://andycarpenter.work/metamodel/api',
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::literals/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::types/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]


[template public translate(controller : Controller, message : String) post(trim())]
$this->translationService->trans('[message/]', ['['/][']'/], '[controller.translationDomain()/]')
[/template]


[template public actionMethodFormals(controller : Controller) post(trim())]
[if (controller.hasFormUnits() or controller.hasCollectionFilters() or controller.hasPagination())]
Request $request[if (controller.hasRouteParameters())]
, [/if][/if]
[controller.routeParameterList(controller.routeParameters(), true)/]
[/template]

[template public actionMethodFormals(unit : DynamicUnit) post(trim())]
[let controller : Controller = unit.controller]
[if (unit.isFormUnit or controller.hasCollectionFilters() or controller.hasCollectionFilters() or controller.hasPagination())]
Request $request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameterList(true)/]
[/let]
[/template]

[template public actionMethodUpdateFormals(unit : EditUnit) post(trim())]
[let controller : Controller = unit.controller]
Request $request[if (unit.hasRouteUpdateParameters())]
, [/if]
[unit.routeUpdateParameterList(true)/]
[/let]
[/template]

[template public actionMethodFormals(action : Action) post(trim())]
[let controller : Controller = action.parentUnit().controller]
[if (action.oclIsKindOf(OperationAction))]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
	[for (service : Service | operationAction.servicesUsed->sortedBy(s | s.name)) separator(', ')]
[service.serviceClassName()/] $[service.instanceName()/][/for]
[if (operationAction.hasServicesUsed and (controller.hasCollectionFilters() or controller.hasPagination() or action.hasRouteParameters()))]
, [/if]
[/let]
[/if]
[if (controller.hasCollectionFilters() or controller.hasPagination())]
Request $request[if (action.hasRouteParameters())]
, [/if][/if]
[action.routeParameterList(true)/]
[/let]
[/template]

[template public actionMethodContainerFormals(action : Action) post(trim())]
[let controller : Controller = action.parentUnit().controller]
[if (action.oclIsKindOf(OperationAction))]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
	[for (service : Service | operationAction.servicesUsed->sortedBy(s | s.name)) separator(', ')]
[service.serviceClassName()/] $[service.instanceName()/][/for]
[if (operationAction.hasServicesUsed and (controller.hasCollectionFilters() or controller.hasPagination() or action.hasRouteParameters()))]
, [/if]
[/let]
[/if]
[if (controller.hasCollectionFilters() or controller.hasPagination())]
Request $request[if (action.parentUnit().hasRouteContainerParameters())]
, [/if][/if]
[action.parentUnit().routeContainerParameterList(true)/]
[/let]
[/template]


[template public renderMethodActuals(unit : DynamicUnit) post(trim())]
[if (unit.controller.hasCollectionFilters() or unit.controller.hasPagination())]
$request[if (unit.controller.hasRouteParameters())]
, [/if][/if]
[unit.controller.routeParameterList(unit.routeParameters(), false)/]
[/template]

[template public renderMethodUpdateActuals(unit : EditUnit) post(trim())]
[if (unit.controller.hasCollectionFilters() or unit.controller.hasPagination())]
$request[if (unit.controller.hasRouteParameters())]
, [/if][/if]
[unit.routeUpdateRenderParameterList(false)/]
[/template]


[template public routeParameterList(controller : Controller, parameters : Sequence(Attribute), formals : Boolean) post(trim())]
[controller.routeParameterList(parameters, parameters, formals)/]
[/template]

[template private routeParameterList(controller : Controller, parameters : Sequence(Attribute), sourceParameters : Sequence(Attribute), formals : Boolean) post(trim())]
[for (key : Attribute | parameters) separator (', ')]
[if (formals)][key.implementationType()/] [/if]$[key.routeParameterName(sourceParameters)/][/for]
[/template]

[template public routeParameterList(unit : DynamicUnit, formals : Boolean) post(trim())]
[unit.controller.routeParameterList(unit.routeParameters(), formals)/]
[/template]

[template public routeParameterList(unit : DynamicUnit, selection : Selection, formals : Boolean) post(trim())]
[unit.controller.routeParameterList(unit.routeParameters(selection), formals)/]
[/template]

[template public routeContainerParameterList(unit : DynamicUnit, formals : Boolean) post(trim())]
[unit.controller.routeParameterList(unit.routeContainerParameters(), formals)/]
[/template]

[template public routeUpdateParameterList(unit : EditUnit, formals : Boolean) post(trim())]
[unit.controller.routeParameterList(unit.routeUpdateParameters(), formals)/]
[/template]

[template public routeUpdateRenderParameterList(unit : EditUnit, formals : Boolean) post(trim())]
[unit.controller.routeParameterList(unit.controller.routeParameters(), unit.routeUpdateParameters(), formals)/]
[/template]

[template public routeParameterList(action : Action, formals : Boolean) post(trim())]
[action.parentUnit().controller.routeParameterList(action.routeParameters(), formals)/]
[/template]

[template public routeParameterList(resource : Resource, formals : Boolean) post(trim())]
[for (key : Attribute | resource.routeParameters()) separator (', ')]
[if (formals)][key.implementationType()/] [/if]$[key.routeParameterName(resource)/][/for]
[/template]


[template public getContainerRepository(unit : DynamicUnit) post(trim())]
$this->[unit.containingType().repository.repositoryInstanceName()/]
[/template]


[template public getContentRepository(unit : DynamicUnit) post(trim())]
$this->[unit.contentType.repository.repositoryInstanceName()/]
[/template]

[template public loadInstance(unit : DynamicUnit) post(trim())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([unit.findActualParameterList()/])
[/template]

[template public loadUpdateInstance(unit : EditUnit) post(trim())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([unit.findActualUpdateParameterList()/])
[/template]

[template public loadContainer(unit : DynamicUnit) post(trim())]
[if (unit.isContained())]
[unit.containerInstanceVariable()/] = [unit.loadContainer2()/];
if (is_null([unit.containerInstanceVariable()/])) {
    throw $this->createNotFoundException('The [unit.containingType().name/] does not exist');
}
[else]
// uncontained
[/if]
[/template]

[template public loadContainer(action : Action) post(trim())]
[if (action.parentUnit().isContained())]
[action.instanceVariable()/] = [action.parentUnit().loadContainer2()/];
if (is_null([action.instanceVariable()/])) {
    throw $this->createNotFoundException('The [action.parentUnit().containingType().name/] does not exist');
}
[else]
// uncontained
[/if]
[/template]

[template private loadContainer2(unit : DynamicUnit) post(trim())]
[let findMethodName : String
	= if unit.oclIsKindOf(CollectionUnit) then
		let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)
			in if collectionUnit.findContainerSelection.oclIsUndefined() then
					unit.containingType().findMethodName()
				else
					collectionUnit.findContainerSelection.methodName
				endif
		else
			unit.containingType().findMethodName()
		endif]
[unit.getContainerRepository()/]->[findMethodName/]([unit.routeContainerParameterList(false)/])
[/let]
[/template]

[template public loadInstance(action : Action) post(trim())]
[action.instanceVariable()/] = [action.loadInstance2()/];
if (is_null([action.instanceVariable()/])) {
    throw $this->createNotFoundException('The [action.parentUnit().contentType.name/] does not exist');
}
[/template]

[template public loadInstance2(action : Action) post(trim())]
[if (action.parentUnit().oclIsKindOf(CollectionUnit))]
[let unit : CollectionUnit = action.parentUnit().oclAsType(CollectionUnit)]
	[if (unit.findElementSelection.oclIsUndefined())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([action.findActualParameterList()/])
	[else]
$this->[unit.findElementSelection.definedBy.repositoryInstanceName()/]->[unit.findElementSelection.methodName/]([action.findActualParameterList()/])
	[/if]
[/let]
[else]
[action.parentUnit().getContentRepository()/]->[action.parentUnit().contentType.findMethodName()/]([action.findActualParameterList()/])
[/if]
[/template]


[template public findActualParameterList(unit : DynamicUnit) post(trim())]
[unit.findActualParameterList(unit.routeParameters())/]
[/template]

[template public findActualUpdateParameterList(unit : EditUnit) post(trim())]
[unit.findActualParameterList(unit.routeUpdateParameters())/]
[/template]

[template public findActualParameterList(action : Action) post(trim())]
[action.parentUnit().findActualParameterList(action.routeParameters())/]
[/template]

[template private findActualParameterList(unit : DynamicUnit, parameters : Sequence(Attribute)) post(trim())]
[for (key : Attribute | parameters) separator (', ')]
[unit.findActualParameter(key, parameters)/][/for]
[/template]

[template private findActualParameter(unit : DynamicUnit, key : Attribute, parameters : Sequence(Attribute)) post(trim())]
[let parameterName : String = key.routeParameterName(parameters)]
[if (unit.hasRouteActual(key))]
[unit.routeActual(key).value.controllerExpression(unit.instanceVariable(), unit.containerInstanceVariable())/]
[elseif (key.encodeUriKey)]
urldecode($[parameterName/])
[else]
$[parameterName/]
[/if]
[/let]
[/template]


[template public redirect(unit : ContentUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[if (unit.oclIsKindOf(DynamicUnit))]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[dynamicUnit.redirect(unit.routeName(), dynamicUnit.routeParameters(), sourceParameters)/]
[/let]
[else]
$this->redirectToRoute('[unit.routeName()/]')
[/if]
[/template]

[template public redirect(action : Action, sourceParameters : Sequence(Attribute)) post(trim())]
[action.parentUnit().redirect(action.routeActionReturnName(), action.parentUnit().routeParameters(), sourceParameters)/]
[/template]

[template private redirect(unit : DynamicUnit, routeName : String, routeParameters : Sequence(Attribute), sourceParameters : Sequence(Attribute)) post(trim())]
$this->redirectToRoute('[routeName/]'[if (controller.hasCollectionFilters() or controller.hasPagination())]
, [if (routeParameters->notEmpty())]
array_merge(
    $request->query->all(),
    ['['/]
        [unit.routeActualParameters(routeParameters, sourceParameters)/]
[']'/])[else]
$request->query->all()[/if]
[else]
	[if (routeParameters->notEmpty())]
, ['['/]
    [unit.routeActualParameters(routeParameters, sourceParameters)/]
[']'/][/if]
[/if])
[/template]


[template public routeActualParameters(targetUnit : DynamicUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.routeActualParameters(targetUnit.routeParameters(), sourceParameters)/]
[/template]

[template public routeActualContainerParameters(targetUnit : DynamicUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.routeActualParameters(targetUnit.routeContainerParameters(), sourceParameters)/]
[/template]

[template public routeActualUpdateParameters(targetUnit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.routeActualParameters(targetUnit.routeUpdateParameters(), sourceParameters)/]
[/template]

[template private routeActualParameters(targetUnit : DynamicUnit, routeParameters : Sequence(Attribute), sourceParameters : Sequence(Attribute)) post(trim())]
[for (key : Attribute | routeParameters)]
'[key.routeParameterName(routeParameters)/]' => $[key.routeParameterName(sourceParameters)/],
[/for]
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields)]
[if (field.isAttributeField())]
[unit.instanceVariable()/]->[field.modelPropertyName()/] = [field.oclAsType(UnitAttribute).defaultValue.valueExpression()/];
[else]
[unit.instanceVariable()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancelSubmit(unit : DynamicUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[if (unit.oclIsKindOf(ControlUnit))]
[let controlUnit : ControlUnit = unit.oclAsType(ControlUnit)]
if ($request->isMethod('POST') && $request->request->has('cancel')) {
	return $this->redirectToRoute('[controlUnit.cancelDestination.routeName()/]');
}
[/let]
[elseif (unit.oclIsKindOf(EditUnit))]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
if ($request->isMethod('POST') && $request->request->has('[editUnit.cancelId()/]')) {
	return [editUnit.cancelDestination.redirect(sourceParameters)/];
}
[/let]
[/if]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFields)]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
[unit.instanceVariable()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]


[template public actionResultFlash(action : Action) post(trim())]
[let controller : Controller = action.parentUnit().controller]
[if (action.hasSuccessMessage() and action.hasFailureMessage())]
if ($result)
{
    $this->addFlash('success', [controller.translate(action.successMessageId())/]);
} else {
    $this->addFlash('error', [controller.translate(action.failureMessageId())/]);
}
[elseif (action.hasSuccessMessage())]
$this->addFlash('success', [controller.translate(action.successMessageId())/]);
[elseif (action.hasFailureMessage())]
if (!$result)
{
    $this->addFlash('error', [controller.translate(action.failureMessageId())/]);
}
[/if]
[/let]
[/template]