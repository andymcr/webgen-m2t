[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://andycarpenter.work/metamodel/api',
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::literals/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::types/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::actions/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]


[template public translate(page : Page, message : String) post(trim())]
$this->translationService->trans('[message/]', ['['/][']'/], '[page.translationDomain()/]')
[/template]

[template public actionMethodFormals(page : Page) post(trim())]
[if (page.hasFiltersOrPagination())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if]
[page.routeParameterList(page.routeParameters(), true)/]
[/template]

[template public actionMethodFormals(unit : DynamicUnit) post(trim())]
[let page : Page = unit.displayedOn]
[if (page.hasFiltersOrPagination() or unit.oclIsKindOf(EditUnit))]
Request $request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameterList(true)/]
[/let]
[/template]

[template public actionMethodUpdateFormals(unit : EditUnit) post(trim())]
[let page : Page = unit.displayedOn]
Request $request[if (unit.hasRouteUpdateParameters())]
, [/if]
[unit.routeUpdateParameterList(true)/]
[/let]
[/template]

[template public actionMethodFormals(action : Action) post(trim())]
[let page : Page = action.parentUnit.displayedOn]
[if (page.hasFiltersOrPagination())]
Request $request[if (action.hasRouteParameters())]
, [/if][/if]
[action.routeParameterList(true)/]
[/let]
[/template]

[template public actionMethodContainerFormals(action : Action) post(trim())]
[let page : Page = action.parentUnit.displayedOn]
[if (page.hasFiltersOrPagination())]
Request $request[if (action.parentUnit.hasRouteContainerParameters())]
, [/if][/if]
[action.parentUnit.routeContainerParameterList(true)/]
[/let]
[/template]


[template public renderMethodActuals(unit : DynamicUnit) post(trim())]
[if (unit.displayedOn.hasFilters or unit.displayedOn.hasPagination)]
$request[if (unit.displayedOn.hasRouteParameters())]
, [/if][/if]
[unit.displayedOn.routeParameterList(unit.routeParameters(), false)/]
[/template]

[template public renderMethodUpdateActuals(unit : EditUnit) post(trim())]
[if (unit.displayedOn.hasFilters or unit.displayedOn.hasPagination)]
$request[if (unit.displayedOn.hasRouteParameters())]
, [/if][/if]
[unit.routeUpdateRenderParameterList(false)/]
[/template]


[template public routeParameterList(page : Page, parameters : Sequence(Attribute), formals : Boolean) post(trim())]
[page.routeParameterList(parameters, parameters, formals)/]
[/template]

[template private routeParameterList(page : Page, parameters : Sequence(Attribute), sourceParameters : Sequence(Attribute), formals : Boolean) post(trim())]
[for (key : Attribute | parameters) separator (', ')]
[if (formals)][key.implementationType()/] [/if]$[key.routeParameterName(sourceParameters)/][/for]
[/template]

[template public routeParameterList(unit : DynamicUnit, formals : Boolean) post(trim())]
[unit.displayedOn.routeParameterList(unit.routeParameters(), formals)/]
[/template]

[template public routeParameterList(unit : DynamicUnit, selection : Selection, formals : Boolean) post(trim())]
[unit.displayedOn.routeParameterList(unit.routeParameters(selection), formals)/]
[/template]

[template public routeContainerParameterList(unit : DynamicUnit, formals : Boolean) post(trim())]
[unit.displayedOn.routeParameterList(unit.routeContainerParameters(), formals)/]
[/template]

[template public routeUpdateParameterList(unit : EditUnit, formals : Boolean) post(trim())]
[unit.displayedOn.routeParameterList(unit.routeUpdateParameters(), formals)/]
[/template]

[template public routeUpdateRenderParameterList(unit : EditUnit, formals : Boolean) post(trim())]
[unit.displayedOn.routeParameterList(unit.displayedOn.routeParameters(), unit.routeUpdateParameters(), formals)/]
[/template]

[template public routeParameterList(action : Action, formals : Boolean) post(trim())]
[action.parentUnit.displayedOn.routeParameterList(action.routeParameters(), formals)/]
[/template]

[template public routeParameterList(resource : Resource, formals : Boolean) post(trim())]
[for (key : Attribute | resource.routeParameters()) separator (', ')]
[if (formals)][key.implementationType()/] [/if]$[key.routeParameterName(resource)/][/for]
[/template]


[template public loadContainerInstance(unit : DynamicUnit) post(trim())]
[let findMethodName : String
	= if unit.oclIsKindOf(CollectionUnit) then
		let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)
			in if collectionUnit.findContainerSelection.oclIsUndefined() then
					unit.containingType.findMethodName()
				else
					collectionUnit.findContainerSelection.methodName
				endif
		else
			unit.containingType.findMethodName()
		endif]
[unit.getContainerRepository()/]->[findMethodName/]([unit.routeContainerParameterList(false)/])
[/let]
[/template]

[template public getContainerRepository(unit : DynamicUnit) post(trim())]
$this->[unit.containingType.repository.instanceName()/]
[/template]


[template public getContentRepository(unit : DynamicUnit) post(trim())]
$this->[unit.contentRepository.instanceName()/]
[/template]

[template public loadInstance(unit : DynamicUnit) post(trim())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([unit.findActualParameterList()/])
[/template]

[template public loadUpdateInstance(unit : EditUnit) post(trim())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([unit.findActualUpdateParameterList()/])
[/template]

[template public loadContainer(action : Action) post(trim())]
[if (action.parentUnit.isContained)]
[action.instanceVariable()/] = [action.parentUnit.loadContainerInstance()/];
if (is_null([action.instanceVariable()/])) {
    throw $this->createNotFoundException('The [action.parentUnit.containingType.name/] does not exist');
}
[else]
// uncontained
[/if]
[/template]

[template public loadInstance(action : Action) post(trim())]
[action.instanceVariable()/] = [action.loadInstance2()/];
if (is_null([action.instanceVariable()/]))
{
    throw $this->createNotFoundException('The [action.parentUnit.contentType.name/] does not exist');
}
[/template]

[template public loadInstance2(action : Action) post(trim())]
[if (action.parentUnit.oclIsKindOf(CollectionUnit))]
[let unit : CollectionUnit = action.parentUnit.oclAsType(CollectionUnit)]
	[if (unit.findElementSelection.oclIsUndefined())]
[unit.getContentRepository()/]->[unit.contentType.findMethodName()/]([action.findActualParameterList()/])
	[else]
$this->[unit.findElementSelection.definedBy.instanceName()/]->[unit.findElementSelection.methodName/]([action.findActualParameterList()/])
	[/if]
[/let]
[else]
[action.parentUnit.getContentRepository()/]->[action.parentUnit.contentType.findMethodName()/]([action.findActualParameterList()/])
[/if]
[/template]


[template public findActualParameterList(unit : DynamicUnit) post(trim())]
[unit.findActualParameterList(unit.routeParameters())/]
[/template]

[template public findActualUpdateParameterList(unit : EditUnit) post(trim())]
[unit.findActualParameterList(unit.routeUpdateParameters())/]
[/template]

[template public findActualParameterList(action : Action) post(trim())]
[action.parentUnit.findActualParameterList(action.routeParameters())/]
[/template]

[template private findActualParameterList(unit : DynamicUnit, parameters : Sequence(Attribute)) post(trim())]
[for (key : Attribute | parameters) separator (', ')]
[unit.findActualParameter(key, parameters)/][/for]
[/template]

[template private findActualParameter(unit : DynamicUnit, key : Attribute, parameters : Sequence(Attribute)) post(trim())]
[let parameterName : String = key.routeParameterName(parameters)]
[if (unit.hasRouteActual(key))]
[unit.routeActual(key).value.controllerExpression(unit.instanceVariable(), unit.containerInstanceVariable())/]
[elseif (key.encodeUriKey)]
urldecode($[parameterName/])
[else]
$[parameterName/]
[/if]
[/let]
[/template]


[template public redirect(page : Page) post(trim())]
[page.redirect(page.routeParameters())/]
[/template]

[template public redirect(page : Page, sourceParameters : Sequence(Attribute)) post(trim())]
[page.redirect(page.routeName(), page.routeParameters(), sourceParameters)/]
[/template]

[template public redirect(action : Action, routeName : String, sourceParameters : Sequence(Attribute)) post(trim())]
[action.parentUnit.displayedOn.redirect(routeName, action.parentUnit.routeParameters(), sourceParameters)/]
[/template]

[template private redirect(page : Page, routeName : String, routeParameters : Sequence(Attribute), sourceParameters : Sequence(Attribute)) post(trim())]
$this->redirectToRoute('[routeName/]'[if (page.hasFiltersOrPagination())]
, [if (routeParameters->notEmpty())]
array_merge(
    $request->query->all(),
    ['['/]
        [page.routeActualParameters(routeParameters, sourceParameters)/]
[']'/])[else]
$request->query->all()[/if]
[else]
	[if (routeParameters->notEmpty())]
, ['['/]
    [page.routeActualParameters(routeParameters, sourceParameters)/]
[']'/][/if]
[/if])
[/template]


[template public routeActualParameters(targetUnit : DynamicUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.displayedOn.routeActualParameters(targetUnit.routeParameters(), sourceParameters)/]
[/template]

[template public routeActualContainerParameters(targetUnit : DynamicUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.displayedOn.routeActualParameters(targetUnit.routeContainerParameters(), sourceParameters)/]
[/template]

[template public routeActualUpdateParameters(targetUnit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[targetUnit.displayedOn.routeActualParameters(targetUnit.routeUpdateParameters(), sourceParameters)/]
[/template]

[template private routeActualParameters(page : Page, routeParameters : Sequence(Attribute), sourceParameters : Sequence(Attribute)) post(trim())]
[for (key : Attribute | routeParameters)]
'[key.routeParameterName(routeParameters)/]' => $[key.routeParameterName(sourceParameters)/],
[/for]
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields)]
[if (field.oclIsTypeOf(UnitAttribute))]
[unit.instanceVariable()/]->[field.modelPropertyName()/] = [field.oclAsType(UnitAttribute).defaultValue.valueExpression()/];
[else]
[unit.instanceVariable()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancelPost(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($request->request->has('cancel'))
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public handleCancelSubmit(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ([unit.instanceVariable()/]->isSubmitted() && [unit.instanceVariable()/]->get('cancel')->isClicked())
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFields)]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
[unit.instanceVariable()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]


[template public actionResultFlash(action : Action) post(trim())]
[let page : Page = action.parentUnit.displayedOn]
[if (action.hasSuccessMessage and action.hasFailureMessage)]
if ($result)
{
    $this->addFlash('success', [page.translate(action.successMessageId())/]);
} else {
    $this->addFlash('error', [page.translate(action.failureMessageId())/]);
}
[elseif (action.hasSuccessMessage)]
$this->addFlash('success', [page.translate(action.successMessageId())/]);
[elseif (action.hasFailureMessage)]
if (!$result)
{
    $this->addFlash('error', [page.translate(action.failureMessageId())/]);
}
[/if]
[/let]
[/template]