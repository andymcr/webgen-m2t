[comment encoding = UTF-8 /]
[module translation(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[query private cancelElement(eObject : EObject) : String
	= 'cancel'
/]

[query private captionElement(eObject : EObject) : String
	= 'caption'
/]

[query private confirmElement(eObject : EObject) : String
	= 'confirm'
/]

[query private helpElement(eObject : EObject) : String
	= 'help'
/]

[query private hiddenElement(eObject : EObject) : String
	= 'hidden'
/]

[query private invokeElement(eObject : EObject) : String
	= 'invoke'
/]

[query private labelsElement(eObject : EObject) : String
	= 'labels'
/]

[query private messagesElement(eObject : EObject) : String
	= 'messages'
/]

[query private placeholdersElement(eObject : EObject) : String
	= 'placeholders'
/]

[query private requestElement(eObject : EObject) : String
	= 'request'
/]

[query private resetElement(eObject : EObject) : String
	= 'reset'
/]

[query private submitElement(eObject : EObject) : String
	= 'submit'
/]

[query private successElement(eObject : EObject) : String
	= 'success'
/]

[query private titlesElement(eObject : EObject) : String
	= 'titles'
/]


[query public translationDomain(authentication : LocalAuthenticationSystem) : String
	= authentication.authenticationPrefix().toLowerCase()
/]

[query public displayLabelContainedId(element : AuthenticationElement) : String
	= element.id().concat('.').concat(element.captionElement())
/]

[query public invokeLabelContainedId(element : AuthenticationElement) : String
	= element.id().concat('.').concat(element.invokeElement())
/]

[query public placeholderContainedId(element : AuthenticationElement, field : String) : String
	= element.id().concat('.').concat(element.placeholdersElement()).concat('.').concat(field)
/]

[query public requestLabelContainedId(element : ForgottenPasswordElement) : String
	= element.id().concat('.').concat(element.requestElement())
/]

[query public resetLabelContainedId(element : ForgottenPasswordElement) : String
	= element.id().concat('.').concat(element.resetElement())
/]

[query public submitLabelContainedId(element : AuthenticationElement) : String
	= element.id().concat('.').concat(element.submitElement())
/]

[query public titleContainedId(element : AuthenticationElement, field : String) : String
	= element.id().concat('.').concat(element.titlesElement()).concat('.').concat(field)
/]

[query public translationDomain(element : AuthenticationElement) : String
	= if element.oclIsTypeOf(ForgottenPasswordElement) then
			element.oclAsType(ForgottenPasswordElement).authentication.translationDomain()
		else if element.oclIsTypeOf(LoginElement) then
			element.oclAsType(LoginElement).authentication.translationDomain()
		else if element.oclIsTypeOf(LogoutElement) then
			element.oclAsType(LogoutElement).authentication.translationDomain()
		else if element.oclIsTypeOf(RegistrationElement) then
			element.oclAsType(RegistrationElement).authentication.translationDomain()
		else if element.oclIsTypeOf(ChangePasswordElement) then
			element.oclAsType(ChangePasswordElement).authentication.translationDomain()
		else
			''
		endif endif endif endif endif
/]


[query public containedId(menu : Menu) : String
	= if menu.oclIsTypeOf(SubmenuEntry) then
			menu.oclAsType(SubmenuEntry).partOf.containedId().concat('.').concat(menu.id())
		else
			menu.id()
		endif
/]

[query public containedId(menuEntry : SubmenuEntry) : String
	= if menuEntry.partOf.oclIsTypeOf(SubmenuEntry) then
			menuEntry.oclAsType(SubmenuEntry).partOf.containedId().concat('.').concat(menuEntry.id())
		else
			menuEntry.id().concat('_menu')
		endif
/]

[query public labelId(menu : Menu) : String
	= if menu.oclIsTypeOf(SubmenuEntry) then
			menu.oclAsType(SubmenuEntry).partOf.labelId().concat('.').concat(menu.id())
		else
			menu.id()
		endif
/]

[query public displayLabelId(menuEntry : ActionMenuEntry) : String
	= menuEntry.partOf.labelId().concat('.').concat(menuEntry.id())
/]

[query public displayLabelId(menuEntry : EditStaticTextMenuEntry) : String
	= menuEntry.partOf.labelId().concat('.').concat(menuEntry.id())
/]

[query public displayLabelId(menuEntry : SubmenuEntry) : String
	= menuEntry.partOf.labelId().concat('.').concat(menuEntry.id())
/]


[query public cancelLabelContainedId(page : Page) : String
	= page.labelsContainedId().concat('.').concat(page.cancelElement())
/]

[query public displayLabelContainedId(page : Page) : String
	= page.id().concat('.').concat(page.captionElement())
/]

[query private labelsContainedId(page : Page) : String
	= page.id().concat('.').concat(page.labelsElement())
/]

[query public submitLabelContainedId(page : Page) : String
	= page.labelsContainedId().concat('.').concat(page.submitElement())
/]

[query public translationDomain(page : Page) : String
	= if page.rootPage.name.equalsIgnoreCase('home') then
			'default'
		else
			page.rootPage.name.toLower()
		endif
/]


[query public cancelLabelContainedId(unit : ContentUnit) : String
	= unit.labelsContainedId().concat('.').concat(unit.cancelElement())
/]

[query public confirmMessageContainedId(unit : ContentUnit) : String
	= unit.messagesContainedId().concat('.').concat(unit.confirmElement())
/]

[query private containedId(unit : ContentUnit) : String
	= unit.displayedOn.id().concat('.').concat(unit.id())
/]

[query public displayLabelContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.captionElement())
/]

[query public hasFieldTranslations(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).displayFields
				->select(f | f.hasTranslations())->notEmpty()
		else
			false
		endif
/]

[query public hasUnitTranslations(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(EditUnit) then
			let editUnit : EditUnit = unit.oclAsType(EditUnit)
				in editUnit.hasCustomisedCancelLabel()
					or editUnit.hasCustomisedSubmitLabel()
					or editUnit.hasConfirmMessage
					or editUnit.hasSuccessMessage
		else if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).hasHiddenMessage
		else
			false
		endif endif
/]

[query private helpContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.helpElement())
/]

[query public hiddenMessageContainedId(unit : ContentUnit) : String
	= unit.messagesContainedId().concat('.').concat(unit.hiddenElement())
/]

[query private labelsContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.labelsElement())
/]

[query private messagesContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.messagesElement())
/]

[query private placeholdersContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.placeholdersElement())
/]

[query public submitLabelContainedId(unit : ContentUnit) : String
	= unit.labelsContainedId().concat('.').concat(unit.submitElement())
/]

[query public successMessageId(unit : ContentUnit) : String
	= unit.messagesContainedId().concat('.').concat(unit.successElement())
/]

[query private titlesContainedId(unit : ContentUnit) : String
	= unit.containedId().concat('.').concat(unit.titlesElement())
/]

[query public translationDomain(unit : ContentUnit) : String
	= unit.displayedOn.translationDomain()
/]


[query public customisedDisplayLabelContainedId(field : UnitField) : String
	= field.displayedOn.labelsContainedId().concat('.').concat(field.fieldId())
/]

[query public customisedPlaceholderContainedId(field : UnitField) : String
	= field.displayedOn.placeholdersContainedId().concat('.').concat(field.fieldId())
/]

[query public customisedTitleContainedId(field : UnitField) : String
	= field.displayedOn.titlesContainedId().concat('.').concat(field.fieldId())
/]

[query public defaultDisplayLabelContainedId(field : UnitField) : String
	= field.persistentFeature.displayLabelId()
/]

[query public defaultPlaceholderContainedId(field : UnitField) : String
	= field.persistentFeature.displayLabelId()
/]

[query public defaultTitleContainedId(field : UnitField) : String
	= field.persistentFeature.displayLabelId()
/]

[query public hasTranslations(field : UnitField) : Boolean
	= field.hasCustomisedDisplayLabel
		or field.hasCustomisedPlaceholder
		or field.hasCustomisedTitle
/]

[query public helpContainedId(field : UnitField) : String
	= field.displayedOn.helpContainedId().concat('.').concat(field.fieldId())
/]

[query public secondDisplayLabelContainedId(field : UnitField) : String
	= field.displayedOn.labelsContainedId().concat('.').concat(field.fieldId().concat('_confirm'))
/]

[query public secondHelpContainedId(field : UnitField) : String
	= field.displayedOn.helpContainedId().concat('.').concat(field.fieldId().concat('_confirm'))
/]

[query public secondPlaceholderContainedId(field : UnitField) : String
	= field.displayedOn.placeholdersContainedId().concat('.').concat(field.fieldId().concat('_confirm'))
/]

[query public secondTitleContainedId(field : UnitField) : String
	= field.displayedOn.titlesContainedId().concat('.').concat(field.fieldId().concat('_confirm'))
/]


[query public displayLabelId(feature : Feature) : String
	= feature.partOf.id().concat('.labels').concat('.').concat(feature.id())
/]

[query public placeholderId(feature : Feature) : String
	= feature.partOf.id().concat('.placeholders').concat('.').concat(feature.id())
/]

[query public titleId(feature : Feature) : String
	= feature.partOf.id().concat('.titles').concat('.').concat(feature.id())
/]


[query public badgeId(badge : Badge) : String
	= 'title'
/]

[query public titleId(badge : Badge) : String
	= badge.title.displayLabelId()
/]


[query public confirmMessageId(action : Action) : String
	= action.containedId().concat('.messages').concat('.confirm')
/]

[query public containedId(action : Action) : String
	= action.parentUnit.containedId().concat('.actions.').concat(action.id())
/]

[query public displayLabelId(action : Action) : String
	= action.containedId().concat('label')
/]

[query public failureMessageId(action : Action) : String
	= action.containedId().concat('.messages').concat('.failure')
/]

[query public successMessageId(action : Action) : String
	= action.containedId().concat('.messages').concat('.success')
/]
