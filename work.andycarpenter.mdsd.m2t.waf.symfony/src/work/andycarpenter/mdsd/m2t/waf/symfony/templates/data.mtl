[comment encoding = UTF-8 /]
[module data(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::twig/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::accessor/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::action/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::labels/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::templates::value/]


[template public getImmediateValue(field : UnitField, parentAccessor : String) post(trim())]
[if (field.isFeatureField)]
[field.oclAsType(UnitFeature).getImmediateValue(parentAccessor)/]
[else]
NULL
[/if]
[/template]

[template private getImmediateValue(feature : UnitFeature, parentAccessor : String) post(trim())]
[if (feature.isAttributeField)]
[feature.oclAsType(UnitAttribute).getImmediateValue(parentAccessor)/]
[elseif (feature.isResourceField)]
[feature.oclAsType(UnitResource).getImmediateValue(parentAccessor)/]
[else]
[feature.oclAsType(UnitAssociation).getImmediateValue(parentAccessor)/]
[/if]
[/template]

[template private getImmediateValue(attribute : UnitAttribute, parentAccessor : String) post(trim())]
[attribute.attribute.getValue(attribute.accessor(parentAccessor))/]
[/template]

[template private getImmediateValue(resource : UnitResource, parentAccessor : String) post(trim())]
[resource.resource.getValue(resource.accessor(parentAccessor))/]
[/template]

[template private getImmediateValue(association : UnitAssociation, parentAccessor : String) post(trim())]
[association.accessor(parentAccessor)/]
[/template]


[template public displayValue(field : UnitField, parentAccessor : String)
	? ((field.isDataTypeField and not field.isBooleanField and not field.isEnumerationField) and field.isSingleton) post(trim())]
[if (field.oclIsKindOf(InterfaceField))]
{{ [field.getValue(field.accessor(parentAccessor))/] | default('') }}
[else]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
[feature.displayAttribute(feature.accessor(parentAccessor), parentAccessor)/]
[/let]
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? ((field.isDataTypeField and not field.isBooleanField and not field.isEnumerationField) and not field.isSingleton) post(trim())]
[if (field.oclIsKindOf(InterfaceField))]
{{ [field.getValue(field.accessor(parentAccessor))/] | default('') }}
[else]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
[let variable : String = 'value']
{% for [variable/] in [feature.accessor(parentAccessor)/] %}[if (feature.collectionDisplayOption = CollectionDisplayOptions::PageDirection)]
<div[if (field.truncate)] class="text-truncate"[/if]>[feature.displayAttribute(variable, parentAccessor)/]</div>[else]
<span[if (field.truncate)] class="text-truncate"[/if]>[feature.displayAttribute(variable, parentAccessor)/]</span>[/if][if (not feature.emptyDisplayValue.oclIsUndefined())]
{% else %}{{ '[feature.emptyValueContainedId()/]' | trans({}, '[feature.displayedOn.translationDomain()/]') }}[/if]{% endfor %}
[/let]
[/let]
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.isEnumerationField) post(trim())]
[if (field.oclIsKindOf(InterfaceField))]
{{ [field.getValue(field.accessor(parentAccessor))/][if (not field.escapeHTML)]
 | raw[/if] }}
[else]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
	[if (feature.displayDefaultWhen.oclIsUndefined())]
{{ [feature.getValue(field.accessor(parentAccessor))/][if (not feature.defaultDisplayValue.oclIsUndefined())]
 | default('[feature.defaultDisplayValue/]')[/if][if (not feature.escapeHTML)]
 | raw[/if] }}
	[else]
[comment 'todo'/]
	[/if]
[/let]
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.isDateField) post(trim())]
[if (field.hasEmptyDisplayValue())]
{% if [field.getValue(field.accessor(parentAccessor))/] is not null %}[/if]
[field.displayDateValue(parentAccessor)/][if (field.hasEmptyDisplayValue())]
{% else %}{{ '[field.emptyValueContainedId()/]' | trans({}, '[field.displayedOn.translationDomain()/]') }}{% endif %}[/if]
[/template]

[template private displayDateValue(field : UnitField, parentAccessor : String) post(trim())]
{{ [field.getValue(field.accessor(parentAccessor))/] | date[if (not field.dateFormat.oclIsUndefined())]
('[field.dateFormat/]')[/if] }}
[/template]

[template public displayValue(field : UnitField, parentAccessor : String) 
	? (field.isBooleanField) post(trim())] 
<label for="[field.fieldId()/]"{% if not [field.accessor(parentAccessor)/] %} hidden="hidden"{% endif %}>
 <input type="checkbox" id="[field.fieldId()/]" checked="checked" disabled="disabled"/>
 <span></span>
</label>
[/template] 

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.isResourceField and field.isSingleton) post(trim())]
[let resource : UnitResource = field.oclAsType(UnitResource)]
[let accessor : String = field.accessor(parentAccessor)]
<?php
[if (not resource.isConditionalDisplay())]
    if (!empty([resource.getValue(accessor)/]))
[/if]
        echo HTML::anchor(
            [resource.getValue(accessor)/],
            '[resource.displayLabel/]',
            NULL, NULL, FALSE);
?>
[/let]
[/let]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.isAssociationField and field.isSingleton) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let accessor : String = association.accessor(parentAccessor)]
[association.displayAssociation(accessor, parentAccessor)/]
[/let]
[/let]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.isAssociationField and not field.isSingleton) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let accessor : String = association.accessor(parentAccessor)]
[let variable : String = 'value']
{% for [variable/] in [accessor/][if (not association.collectionSortBy.oclIsUndefined() or association.collectionMaximumValues > 0)]
 [association.filters()/][/if] %}[if (association.collectionDisplayOption = CollectionDisplayOptions::PageDirection)]
<div[if (field.truncate)] class="text-truncate"[/if]>[association.displayAssociation(variable, variable)/]</div>[else]
<span[if (field.truncate)] class="text-truncate"[/if]>[association.displayAssociation(variable, variable)/]</span>[/if][if (not association.emptyDisplayValue.oclIsUndefined())]
{% else %}{{ '[association.emptyValueContainedId()/]' | trans({}, '[association.displayedOn.translationDomain()/]') }}[/if]{% endfor %}
[/let]
[/let]
[/let]
[/template]

[template private filters(association : UnitAssociation) post(trim())]
[if (not association.collectionSortBy.oclIsUndefined())]
| sort((a, b) => a.[association.collectionSortBy.modelPropertyName()/] < b.[association.collectionSortBy.modelPropertyName()/])[/if]
[if (association.collectionMaximumValues > 0)]
 | slice(0, [association.collectionMaximumValues/])
[/if]
[/template]

[template public displayValue(field : UnitField, parentAccessor : String)
	? (field.oclIsTypeOf(UnitLabel)) post(trim())]
[let label : UnitLabel = field.oclAsType(UnitLabel)]
{{ [label.label.label(parentAccessor)/] }}
[/let]
[/template]

[template private displayAttribute(feature : UnitFeature, accessor : String, parentAccessor : String) post(trim())]
[if (feature.hasActions)]
[let parentEntity : Entity
		= if feature.isAttributeField then 
				feature.oclAsType(UnitAttribute).attribute.partOf
			else if feature.isResourceField then 
				feature.oclAsType(UnitResource).resource.partOf
			else
				feature.oclAsType(UnitAssociation).association.sourceType
			endif endif]
[feature.actions->first().featureActionLink(null, parentAccessor)/]
[/let]
[else]
[feature.displayFeature(accessor, parentAccessor)/]
[/if]
[/template]

[template private displayAssociation(association : UnitAssociation, accessor : String, parentAccessor : String) post(trim())]
[if (association.hasActions)]
[association.actions->first().featureActionLink(association, accessor)/]
[else]
[association.displayFeature(accessor, parentAccessor)/]
[/if]
[/template]

[template private displayFeature(feature : UnitFeature, accessor : String, parentAccessor : String) post(trim())]
[if (feature.displayDefaultWhen.oclIsUndefined())]
{{ [feature.getValue(accessor)/][if (not feature.defaultDisplayValue.oclIsUndefined())]
 | default('[feature.defaultDisplayValue/]')[/if][if (not feature.escapeHTML)]
 | raw[/if] }}
[else]
{%- if [feature.displayDefaultWhen.twigExpression(parentAccessor)/] -%}
	[if (not feature.escapeHTML)]
{{ '[feature.defaultDisplayValue/]' | raw }}
	[else]
[feature.defaultDisplayValue/]
	[/if]
{%- else -%}
{{ [feature.getValue(accessor)/][if (not feature.escapeHTML)]
 | raw[/if] }}
{%- endif -%}
[/if]
[/template]