[comment encoding = UTF-8 /]
[module filterType(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::formTypes::featureFields/]


[template public filterType(unit : CollectionUnit)]
[file(unit.filterFormFilename(), false)]
<?php
namespace [unit.filterFormNamespace()/];

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (unit.hasTextFilters())]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;


class [unit.filterFormClassName()/] extends AbstractType
{
    /**
     *
     * @param FormBuilderInterface $builder
     * @param array<string, mixed> $options
     */
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
[for (filter : CollectionFilter | unit.filters)]
        [filter.filterField()/];

[/for]
    }

    /**
     *
     * @param OptionsResolver $resolver
     */
    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(['['/]
        [']'/]);
    }
}
[/file]
[/template]

[template private filterField(filter : CollectionFilter)
	? (filter.oclIsTypeOf(TextFilter)) post(trim())]
[let textFilter : TextFilter = filter.oclAsType(TextFilter)]
$builder->add('[textFilter.propertyName()/]', [textFilter.attribute.interfaceType()/], ['['/]
    'mapped' => false,
    'label' => false,
    'translation_domain' => [if (filter.hasTranslations())]
'[filter.affects.translationDomain()/]'[else]
'entity'[/if],
    'required' => false,
    'attr' => ['['/]
[if (filter.attribute.hasValidationPattern)]
        'pattern' => '[attribute.oclAsType(DataTypeAttribute).validationPattern/]',
[/if]
        'placeholder' => [if (filter.hasTranslations())]
'[filter.placeholderContainedId()/]'[else]
'[filter.attribute.captionContainedId()/]'[/if],
        'title' => [if (filter.hasTranslations())]
'[filter.titleContainedId()/]'[else]
'[filter.attribute.captionContainedId()/]'[/if],
    [']'/],
[if (filter.hasHelp())]
    'help' => '[filter.helpContainedId()/]',
[/if]
[']'/])
[/let]
[/template]