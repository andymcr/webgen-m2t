[comment encoding = UTF-8 /]
[module annotations(
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]


[template public routeAnnotation(page : Page) post(trim())]
[if (page.units->isEmpty())]
* @Route("[page.uriPath()/]", name="[page.routeName()/]")
[else]
[page.units->first().routeAnnotation(page.routeName(), page.uriPath(), true)/]
[/if]
[/template]

[template public routeAnnotation(unit : ContentUnit) post(trim())]
[if (unit.oclIsKindOf(SecurityUnit))]
[unit.routeAnnotation(unit.routeName(), unit.oclAsType(DynamicUnit).uriSecurityPath(), false)/]
[elseif (unit.oclIsKindOf(DynamicUnit))]
[unit.routeAnnotation(unit.routeName(), unit.oclAsType(DynamicUnit).uriPath(), true)/]
[elseif (unit.oclIsKindOf(StaticUnit))]
[unit.routeAnnotation(unit.routeName(), unit.oclAsType(StaticUnit).uriPath(), true)/]
[/if]
[/template]

[template public routeCreateAnnotation(unit : EditUnit) post(trim())]
[unit.routeAnnotation(unit.routeName(), unit.uriCreatePath(), true)/]
[/template]

[template public routeUpdateAnnotation(unit : EditUnit, suffix : String) post(trim())]
[unit.routeAnnotation(unit.routeUpdateName(), unit.uriUpdatePath(suffix), true)/]
[/template]

[template public routeEmailSentAnnotation(unit : ForgottenPasswordUnit) post(trim())]
[unit.routeAnnotation(unit.routeEmailSentName(), unit.uriEmailSentPath(), true)/]
[/template]

[template public routeAnnotation(association : UnitAssociation, unit : EditUnit) post(trim())]
[unit.routeAnnotation(association.routeName(), association.uriPath(unit), false)/]
[/template]

[template public routeAnnotation(action : Action, suffix : String) post(trim())]
[action.parentUnit.routeAnnotation(action.routeName(), action.uriPath(suffix), false)/]
[/template]

[template public routeContainerAnnotation(action : OperationAction) post(trim())]
[action.parentUnit.routeAnnotation(action.routeName(), action.uriContainerPath(), false)/]
[/template]

[template public routeGeneralAnnotation(action : OperationAction) post(trim())]
[action.parentUnit.routeAnnotation(action.routeName(), action.uriGeneralPath(), false)/]
[/template]

[template private routeAnnotation(unit : ContentUnit, routeName : String, uriPath : String, potentialHomeRoute : Boolean) post(trim())]
[if (potentialHomeRoute and unit.isHomeUnit())]
* @Route("", name="[routeName/]")
[else]
* @Route("[uriPath/]", name="[routeName/]"[if (unit.oclIsKindOf(DynamicUnit))]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (dynamicUnit.hasValidatedRouteParameters(false))]
, requirements={[for (key : Attribute | dynamicUnit.uriPathValidatedKeys(false)) separator(', ')]
"[key.routeParameterName(dynamicUnit.routeParameters())/]" = "[comment key.validationPattern/]"[/for]}[/if][/let][/if])
[/if]
[/template]


[template public securityAnnotation(page : Page) post(trim())]
[page.securityAnnotation(page.commonRole)/]
[/template]

[template public securityAnnotation(unit : ContentUnit) post(trim())]
[unit.displayedOn.securityAnnotation(unit.authorisationRoles)/]
[/template]

[template public securityAnnotation(action : Action) post(trim())]
[action.parentUnit.displayedOn.securityAnnotation(action.authorisationRoles)/]
[/template]

[template private securityAnnotation(page : Page, rawRoles : String) post(trim())]
[let roles : Sequence(String) = rawRoles.trim().tokenize(',; ')]
[if (roles->size() = 1)]
* @IsGranted("[roles->first()/]")
[else]
* @Security("[for (role : String | roles) separator(' or ')]has_role('[role/]')[/for]")
[/if]
[/let]
[/template]