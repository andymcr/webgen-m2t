[comment encoding = UTF-8 /]
[module controller(
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::literals/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::constant/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::types/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]


[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(NullLiteral)
		or expression.oclIsTypeOf(BooleanLiteral)
		or expression.oclIsTypeOf(IntegerLiteral)
		or expression.oclIsTypeOf(StringLiteral)) post(trim())]
[expression.valueExpression()/]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(TimeLiteral)) post(trim())]
[let literal : TimeLiteral = expression.oclAsType(TimeLiteral)]
$time
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
new \DateTime()
[/template]


[template private formalParameters(callback : Callable) post(trim())]
[for (parameter : FormalParameter | callback.parameters) separator(', ')]
[if (not parameter.dataType.oclIsUndefined())][parameter.implementationType()/] [/if]$[parameter.name/][/for]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(Callable)) post(trim())]
[let callback : Callable = expression.oclAsType(Callable)]
function ([callback.formalParameters()/]) {
    return [callback.expression.controllerExpression(accessor, parentAccessor)/];
}
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(ReduceFunction)) post(trim())]
[let reduce : ReduceFunction = expression.oclAsType(ReduceFunction)]
array_reduce([reduce.value.controllerExpression(accessor, parentAccessor)/], [reduce.callback.controllerExpression(accessor, parentAccessor)/][if (not reduce.initial.oclIsUndefined())]
, [reduce.initial.controllerExpression(accessor, parentAccessor)/][/if])
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(SizeFunction)) post(trim())]
[let size : SizeFunction = expression.oclAsType(SizeFunction)]
count([size.value.controllerExpression(accessor, parentAccessor)/])
[/let]
[/template]


[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(ConstantReference)) post(trim())]
[let constant : ConstantReference = expression.oclAsType(ConstantReference)]
\[constant.value.serviceNamespace()/]\[constant.value.definedBy.className()/]::[constant.value.name/][if (constant.value.useFunction())]()[/if]
[/let]
[/template]

[template public controllerExpression(guard : Expression, accessor : String, parentAccessor : String)
	? (guard.oclIsTypeOf(AttributeVariable)) post(trim())]
[let path : AttributeVariable = guard.oclAsType(AttributeVariable)]
[if (path.useContainerAsContext())]
[parentAccessor/][else]
[accessor/][/if]->[path.attribute.getMethodName()/]()
[/let] 
[/template]

[template public controllerExpression(guard : Expression, accessor : String, parentAccessor : String)
	? (guard.oclIsTypeOf(AssociationVariable)) post(trim())]
[let path : AssociationVariable = guard.oclAsType(AssociationVariable)]
[if (path.useContainerAsContext())]
[parentAccessor/][else]
[accessor/][/if]->[path.association.getMethodName()/]()[if (not path.childFeature.oclIsUndefined())]
[path.childFeature.pathExpression()/][/if]
[/let] 
[/template]

[template public pathExpression(path : ChildFeature)
	? (path.oclIsTypeOf(ChildAttribute)) post(trim())]
[let attribute : ChildAttribute = path.oclAsType(ChildAttribute)]
->[attribute.attribute.getMethodName()/]()
[/let] 
[/template]

[template public pathExpression(path : ChildFeature)
	? (path.oclIsTypeOf(ChildAssociation)) post(trim())]
[let association : ChildAssociation = path.oclAsType(ChildAssociation)]
->[association.association.getMethodName()/]()[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.pathExpression()/][/if]
[/let] 
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(ParameterVariable)) post(trim())]
[let variable : ParameterVariable = expression.oclAsType(ParameterVariable)]
$[variable.formal.name/]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(CurrentUser)) post(trim())]
[let path : CurrentUser = expression.oclAsType(CurrentUser)]
$this->getUser()
[/let]
[/template]


[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateBooleanVariable)) post(trim())]
[let predicate : PredicateBooleanVariable = expression.oclAsType(PredicateBooleanVariable)]
[if (predicate.negated)]$queryBuilder->expr()->not([/if][predicate.feature.controllerExpression(accessor, parentAccessor)/][if (predicate.negated)])[/if]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
[predicate.predicates->first().controllerExpression(accessor, parentAccessor)/][for (expression : Expression | predicate.predicates->subOrderedSet(2, predicate.predicates->size()))]
 [predicate.operator()/] [expression.controllerExpression(accessor, parentAccessor)/][/for]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
[predicate.left.controllerExpression(accessor, parentAccessor)/] [predicate.operator()/] [predicate.right.controllerExpression(accessor, parentAccessor)/]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
[predicate.left.controllerExpression(accessor, parentAccessor)/] [predicate.operator()/] [predicate.right.controllerExpression(accessor, parentAccessor)/]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
$queryBuilder->expr()->[predicate.operator()/]([predicate.left.controllerExpression(accessor, parentAccessor)/], [predicate.right.controllerExpression(accessor, parentAccessor)/])
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsNull = expression.oclAsType(PredicateIsNull)]
$queryBuilder->expr()->[if (predicate.negated)]isNotNull[else]isNull[/if]([predicate.value.controllerExpression(accessor, parentAccessor)/])
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
$queryBuilder->expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.value.controllerExpression(accessor, parentAccessor)/], '0')
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String, parentAccessor : String)
	? (expression.oclIsTypeOf(ArithmeticOperation)) post(trim())]
[let arithmetic : ArithmeticOperation = expression.oclAsType(ArithmeticOperation)]
[arithmetic.operands->first().controllerExpression(accessor, parentAccessor)/][for (operand : Expression | arithmetic.operands->subOrderedSet(2, arithmetic.operands->size()))]
 [arithmetic.operator()/] [operand.controllerExpression(accessor, parentAccessor)/][/for]
[/let]
[/template]

[query private operator(arithmetic : ArithmeticOperation) : String
	= if arithmetic.operator = ArithmeticOperator::Add then
			'+'
		else if arithmetic.operator = ArithmeticOperator::Subtract then
			'-'
		else if arithmetic.operator = ArithmeticOperator::Multiply then
			'*'
		else if arithmetic.operator = ArithmeticOperator::Divide then
			'/'
		else
			'?'
		endif endif endif endif
/]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'&&'
		else if predicate.operator = BooleanOperator::Or then
			'||'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'=='
		else
			'!='
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'>'
			else
				'<='
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'<'
			else
				'>='
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]


[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.predicates)]
[expression.controllerVariable()/]
[/for]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
[predicate.value.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
$now = new \DateTime();
[/template]


[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(TimeLiteral)) post(trim())]
[let literal : TimeLiteral = expression.oclAsType(TimeLiteral)]
$time = new \DateTime('[literal.value/]');
[/let]
[/template]