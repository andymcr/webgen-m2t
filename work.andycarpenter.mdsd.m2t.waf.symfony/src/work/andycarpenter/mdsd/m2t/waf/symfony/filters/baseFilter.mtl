[comment encoding = UTF-8 /]
[module baseFilter(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[template public baseFilter(model : WafModel)]
[file(model.filterFilename(model.filterBaseClassName()), false)]
<?php
namespace [model.filterNamespace()/];

use [model.filterNamespace()/]\[model.filterInterfaceClassName()/];
use ReflectionClass;
use Symfony\Component\Form\Form;


abstract class [model.filterBaseClassName()/] implements [model.filterInterfaceClassName()/]
{
    /**
     * Name of the filter.
     */
    private string $name = '';

    /**
     * Selection alias of the entity containing the filtered feature.
     */
    private string $entityAliasName = '';

    /**
     * Name of the feature that is filtered.
     */
    private string $featureName = '';

     /**
     * Reflector used to access filter data.
     */
    protected ReflectionClass $dataReflector;

   /**
     * @param string $name
     * @param string $entityAliasName
     * @param string $featureName
     * @param string $filterDataClass
     */
    public function __construct(string $name, string $entityAliasName, string $featureName, string $filterDataClass)
    {
        $this->name = $name;
        $this->entityAliasName = $entityAliasName;
        $this->featureName = $featureName;
        $this->dataReflector = new ReflectionClass($filterDataClass);
    }

   /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
     }

   /**
     * @return string
     */
    public function getEntityAliasName(): string
    {
        return $this->entityAliasName;
     }

   /**
     * @return string
     */
    public function getFeatureName(): string
    {
        return $this->featureName;
     }

    /**
     *
     * @param Object $filterData
     */
    public function isActive(Object $filterData): bool
    {
 //       $reflectionMethod = $this->dataReflector->getMethod($this->getName());
 //       return null !== $reflectionMethod->invoke($filterData);
        $reflectionProperty = $this->dataReflector->getProperty($this->getName());
        return null !== $reflectionProperty->getValue($filterData);
    }
}
[/file]
[/template]