[comment encoding = UTF-8 /]
[module interface(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes]


[query private asId(string : String) : String
	= if self.size() < 2 then
			self.toLowerCase()
		else
			self.substring(1, 1)
				.concat(self.substring(2, self.size()).replaceAll('([A-Z][^A-Z])', '_$1'))
				.toLowerCase()
		endif
/]

[query public id(element : NamedElement) : String
	= element.name.asId()
/]


[query public cancelId(unit : EditUnit) : String
	= 'cancel'
/]

[query public submitId(unit : EditUnit) : String
	= 'submit'
/]


[query public homeUnit(model : WafModel) : ContentUnit
	= let homes : Sequence(ActionMenuEntry)
		= model.navigation.menus.menuEntries()
			->select(e | e.name.equalsIgnoreCase('Home'))
		in if homes->notEmpty() then
				homes->first().action
			else
				null
			endif
/]

[query private menuEntries(menu : Menu) : Sequence(ActionMenuEntry)
	= menu.entries
		->select(e | e.oclIsKindOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
		->union(
			menu.entries
				->select(e | e.oclIsKindOf(SubmenuEntry)).oclAsType(SubmenuEntry)
				->collect(m | m.menuEntries())
			)
/]

[query public styleClass(menu : Menu) : String
	= menu.styleClass
/]


[query public hasJavascript(page : Page) : Boolean
	= page.hasAutocompleteFields
/]

[query public hasRoutingUnits(page : Page) : Boolean
	= page.routingUnits()->notEmpty()
/]

[query public hasFiltersOrPagination(page : Page) : Boolean
	= page.hasFilters or page.hasPagination
/]

[query public routingUnits(page : Page) : OrderedSet(ContentUnit)
	= page.dynamicUnits
		->select(u | u.routeParameters() = page.routeParameters())
/]


[query public cancelLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).cancelLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).cancelLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public formId(unit : DynamicUnit) : String
	= let typeName : String
		= unit.contentType.id()
		in if false then
				typeName
			else
				typeName
			endif
/]

[query public hasClearLabel(unit : EditUnit) : Boolean
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			not unit.oclAsType(CreateUpdateUnit).clearLabel.oclIsUndefined()
		else
			false
		endif
/]

[query public hasCustomisedCancelLabel(unit : EditUnit) : Boolean
	= unit.cancelLabel <> unit.displayedOn.partOf.defaultCancelLabel
/]

[query public hasCustomisedSubmitLabel(unit : EditUnit) : Boolean
	= unit.confirmLabel <> unit.displayedOn.partOf.defaultSaveLabel
/]

[query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormHead
				or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
				or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if uUnit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormFoot
			or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= true
/]

[comment query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::OnFeature
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasOmittedFieldLabels(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).omitFieldLabels
		else if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).omitFieldLabels
		else
			false
		endif endif
/]

[query public isHomeUnit(unit : ContentUnit) : Boolean
	= let homeUnit : ContentUnit
		= unit.displayedOn.partOf.homeUnit()
		in if homeUnit.oclIsUndefined() then
				false
			else
				homeUnit = unit
			endif
/]

[query public isRoutingUnit(unit : ContentUnit) : Boolean
	= let routingUnits : OrderedSet(ContentUnit)
		= unit.displayedOn.routingUnits()
		in if routingUnits->isEmpty() then
				false
			else
				routingUnits->first() = unit
			endif
/]


[query public fieldId(field : UnitField) : String
	=  if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(NamedElement).id()
		else
			field.oclAsType(UnitFeature).fieldId()
		endif
/]

[comment consider fields with feature paths, which might have same persistent feature name/]
[query public fieldId(field : UnitFeature) : String
	= let featuresWithName : Sequence(Feature)
		= field.displayedOn.featureFields
				->collect(f | f.persistentFeature)
				->select(f | f.name = field.persistentFeature.name)
		in if featuresWithName->size() = 1 then
				field.persistentFeature.id()
			else
				field.persistentFeature.partOf.id().concat('.').concat(field.persistentFeature.id())
			endif
/]

[query public isConditionalDisplay(field : UnitField) : Boolean
	= not field.hideWhen.oclIsUndefined()
/]