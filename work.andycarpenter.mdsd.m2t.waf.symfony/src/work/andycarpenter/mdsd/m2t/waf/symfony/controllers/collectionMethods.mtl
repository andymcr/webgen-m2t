[comment encoding = UTF-8 /]
[module collectionMethods(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::expression/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controller/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::attributes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::commonMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (not collectionUnit.inlineSelectCode())]
[collectionUnit.actionSupportMethods()/]

[/if]
[collectionUnit.actionMethod()/]
[if (collectionUnit.hasFilters2())]

[collectionUnit.filterMethod()/]
[/if]
[/let]
[/template]

[template public actionMethod(unit : CollectionUnit) post(trim())]
/**
 */
[if (unit.isAuthorised())]
[unit.securityAnnotation()/]
[/if]
[unit.routeAttribute()/]
public function [unit.actionName()/]([unit.actionMethodFormals()/]): Response
{
[if (unit.controller.isMultiPage())]
	[if (unit.isConditionallyDisplayed)]
    $parameters = ['['/][']'/];
	[/if]
	[if (unit.isContained() or unit.inlineSelectCode())]
    [unit.renderCode()/]
	[/if]
    return $this->render('[unit.controller.controllerTemplateDirectory()/]/[unit.templateName()/][unit.htmlExtension()/][unit.twigExtension()/]', [if (unit.isConditionallyDisplayed)]
$parameters[else]['['/]
		[if (unit.isContained() and unit.loadContainingType())]
        '[unit.containerParameter()/]' => [unit.containerInstanceVariable()/],
		[/if]
		[if (unit.inlineSelectCode())]
        '[unit.instanceParameter()/]' => [unit.instanceVariable()/]
		[else]
        '[unit.instanceParameter()/]' => $this->[unit.selectName()/]([unit.selectMethodParameters()/])
		[/if]
    [']'/][/if]);
[else]
[if (unit.isDislayedOnlyOnExplicitRoute())]
    [unit.selectCode()/]
[/if]
    return $this->renderPage([unit.renderMethodActuals()/]);
[/if]
}
[/template]

[template private filterMethod(unit : CollectionUnit) post(trim())]
/**
 */
[if (unit.isAuthorised())]
[unit.securityAnnotation()/]
[/if]
[unit.routeFilterAttribute()/]
public function [unit.actionFilterName()/]([unit.actionMethodFormals()/]): Response
{
}
[/template]

[template public actionSupportMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (not collectionUnit.inlineSelectCode())]
private function [collectionUnit.selectName()/]([collectionUnit.selectMethodParameters(true)/]): Pagerfanta
{
    [collectionUnit.selectCode()/]
}
[/if]
[/let]
[/template]

[template public renderCode(unit : ContentUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (collectionUnit.isContained() and collectionUnit.loadContainingType())]
[collectionUnit.loadContainer()/]
	[if (collectionUnit.isConditionallyDisplayed or unit.controller.isSinglePage())]
$parameters['['/]'[collectionUnit.containerParameter()/]'[']'/] = [collectionUnit.containerInstanceVariable()/];
	[/if]
[/if]
[if (collectionUnit.isDislayedOnlyOnExplicitRoute() and unit.controller.isSinglePage())]
if (isset([unit.instanceVariable()/])) {
    [collectionUnit.renderCode2()/]
}
[elseif (collectionUnit.isConditionallyDisplayed)]
if (!([collectionUnit.hideWhen.controllerExpression(collectionUnit.containerInstanceVariable(), collectionUnit.containerInstanceVariable())/])) {
    [collectionUnit.renderCode2()/]
}
[else]
[collectionUnit.renderCode2()/]
[/if]
[/let]
[/template]

[template private renderCode2(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode())]
[unit.selectCode()/]
[elseif (unit.isConditionallyDisplayed or unit.controller.isSinglePage())]
$parameters['['/]'[unit.instanceParameter()/]'[']'/] = $this->[unit.selectName()/]([unit.selectMethodParameters()/]);
[/if]
[/template]

[template private selectMethodParameters(unit : CollectionUnit) post(trim())]
[unit.selectMethodParameters(false)/]
[/template]

[template private selectMethodParameters(unit : CollectionUnit, formal : Boolean) post(trim())]
[if (unit.hasFilters or unit.hasPagination)][if (formal)]
Request [/if]$request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameterList(formal)/]
[/template]

[template private selectionParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasRouteParameters())]
[unit.routeParameterList(false)/][/if]
[/template]

[template private selectCode(unit : CollectionUnit) post(trim())]
[if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
[unit.queryInstanceVariable()/] = $this->[unit.selection.definedBy.repositoryInstanceName()/]->[unit.findMethodName(selection)/]([unit.selectionParameters()/]);
	[else]
[unit.queryInstanceVariable()/] = $this->[unit.filter.selection.definedBy.repositoryInstanceName()/]->[unit.findMethodName(filter)/]([unit.selectionParameters()/]);
	[/if]
[else]
[unit.queryInstanceVariable()/] = [unit.getContentRepository()/]->findAll[if (unit.hasPagination)]Query[/if]();
[/if]
[if (unit.hasPagination)]
$adapter = new QueryAdapter([unit.queryInstanceVariable()/]);
[if (unit.inlineSelectCode())]
[if (unit.controller.isMultiPage())]
[unit.instanceVariable()/][else]
$parameters['['/]'[unit.instanceParameter()/]'[']'/][/if] =[else]
return[/if] Pagerfanta::createForCurrentPageWithMaxPerPage(
    $adapter,
    $request->query->getInt('page', 1),
    self::[unit.pageSizeConstant()/]);
[/if]
[/template]

[template private filterSelect(unit : CollectionUnit) post(trim())]
[for (filter : Filter | unit.supportedFilters) separator('else')]
if ($request->query->has('[filter.name/]Filter'))
    [unit.filterCall(filter)/]
[/for]
[/template]

[template private filterCall(unit : CollectionUnit, filter : Filter)]
$query = [unit.getContentRepository()/]->[filter.methodName/]Query(
[if (unit.hasRouteParameters(filter.selection))]
    [unit.routeParameterList(filter.selection, false)/][if(filter.parameters->notEmpty() or filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())]
, [/if]

[/if]
[for (parameter : FormalParameter | filter.parameters)]
    /* @phpstan-ignore-next-line */
    $request->query->get('[parameter.name/]')[if (i < filter.parameters->size() or unit.hasPagination)],[/if]
[/for]
);
[/template]