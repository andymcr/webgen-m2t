[comment encoding = UTF-8 /]
[module collectionMethods(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/service',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::expression::expression/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::core::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::actions/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::units/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::attributes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::commonMethods/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::controller/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[collectionUnit.actionMethod()/]
[if (not collectionUnit.inlineSelectCode())]

[collectionUnit.actionSupportMethods()/]
[/if]
[/let]
[/template]

[template public actionMethod(unit : CollectionUnit) post(trim())]
/**
 */
[if (unit.isAuthorised)]
[unit.securityAttribute()/]
[/if]
[unit.routeAttribute()/]
public function [unit.actionName()/]([unit.actionMethodFormals()/]): Response
{
[if (unit.isDislayedOnlyOnExplicitRoute())]
    [unit.selectCode()/]

[/if]
    return $this->renderPage([unit.renderMethodActuals()/]);
}
[/template]

[template public actionSupportMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (not collectionUnit.inlineSelectCode())]
private function [collectionUnit.selectName()/]([collectionUnit.selectMethodParameters(true)/]): Pagerfanta
{
    [collectionUnit.selectCode()/]
}
[/if]
[/let]
[/template]

[template public actionCore(unit : CollectionUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[/template]

[template public renderCode(unit : ContentUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (collectionUnit.isContained and not collectionUnit.containingTypeLoadedElsewhere())]
[collectionUnit.containerInstanceVariable()/] = [collectionUnit.loadContainerInstance()/];
if (![collectionUnit.containerInstanceVariable()/]) {
    throw $this->createNotFoundException('The [collectionUnit.containingType.name/] does not exist');
}
$parameters['['/]'[collectionUnit.containerParameter()/]'[']'/] = [collectionUnit.containerInstanceVariable()/];
[/if]
[if (collectionUnit.isDislayedOnlyOnExplicitRoute())]
if (isset([unit.instanceVariable()/])) {
    [collectionUnit.renderCode2()/]
}
[elseif (collectionUnit.isConditionallyDisplayed)]
if (!([collectionUnit.hideWhen.controllerExpression(collectionUnit.instanceVariable(), collectionUnit.containerInstanceVariable())/])) {
    [collectionUnit.renderCode2()/]
}
[else]
[collectionUnit.renderCode2()/]
[/if]
[/let]
[/template]

[template private renderCode2(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode())]
[unit.selectCode()/]
[else]
$parameters['['/]'[unit.instanceParameter()/]'[']'/] = $this->[unit.selectName()/]([unit.selectMethodParameters()/]);
[/if]
[/template]

[template private selectMethodParameters(unit : CollectionUnit) post(trim())]
[unit.selectMethodParameters(false)/]
[/template]

[template private selectMethodParameters(unit : CollectionUnit, formal : Boolean) post(trim())]
[if (unit.hasFilters or unit.hasPagination)][if (formal)]
Request [/if]$request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameterList(formal)/]
[/template]

[template private selectionParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasRouteParameters())]
[unit.routeParameterList(false)/][/if]
[/template]

[template private selectCode(unit : CollectionUnit)
	?(not unit.hasFilters) post(trim())]
[let variable : String = if unit.hasPagination and not unit.selection.oclIsUndefined() then
		 '$query'
	else
		'$parameters[\''.concat(unit.instanceParameter()).concat('\']')
	endif]
[if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
[variable/] = $this->[unit.selection.definedBy.instanceName()/]->[unit.findMethodName(selection)/]([unit.selectionParameters()/]);
	[else]
[variable/] = $this->[unit.filter.selection.definedBy.instanceName()/]->[unit.findMethodName(filter)/]([unit.selectionParameters()/]);
	[/if]
	[if (unit.hasPagination)]
$adapter = new QueryAdapter([variable/]);
$parameters['['/]'[unit.instanceParameter()/]'[']'/] = Pagerfanta::createForCurrentPageWithMaxPerPage(
    $adapter,
    $request->query->get('page', 1),
    self::[unit.pageSizeConstant()/]);
	[/if]
[else]
[variable/] = [unit.getContentRepository()/]->findAll();
[/if]
[/let]
[/template]

[template private selectCode(unit : CollectionUnit)
	?( unit.hasFilters) post(trim())]
[if (unit.hasFilters)]
[unit.filterSelect()/]
else
[/if]
[if (unit.hasFilters)]    [/if][if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
[unit.queryInstanceVariable()/] = $this->[unit.selection.definedBy.instanceName()/]->[unit.findMethodName(selection)/]([unit.selectionParameters()/]);
	[else]
[unit.queryInstanceVariable()/] = $this->[unit.filter.selection.definedBy.instanceName()/]->[unit.findMethodName(filter)/]([unit.selectionParameters()/]);
	[/if]
[else]
[unit.queryInstanceVariable()/] = [unit.getContentRepository()/]->findAll();
[/if]
[if (unit.hasPagination)]
$adapter = new QueryAdapter($query);
[if (unit.inlineSelectCode())]
$parameters['['/]'[unit.instanceParameter()/]'[']'/] =[else]
return[/if] Pagerfanta::createForCurrentPageWithMaxPerPage(
    $adapter,
    $request->query->get('page', 1),
    [unit.defaultPaginationSize/]);
[/if]
[/template]

[template private filterSelect(unit : CollectionUnit) post(trim())]
[for (filter : Filter | unit.supportedFilters) separator('else')]
if ($request->query->has('[filter.name/]Filter'))
    [unit.filterCall(filter)/]
[/for]
[/template]

[template private filterCall(unit : CollectionUnit, filter : Filter)]
$query = [unit.getContentRepository()/]->[filter.methodName/]Query(
[if (unit.hasRouteParameters(filter.selection))]
    [unit.routeParameterList(filter.selection, false)/][if(filter.parameters->notEmpty() or filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())]
, [/if]

[/if]
[for (parameter : FormalParameter | filter.parameters)]
    $request->query->get('[parameter.name/]')[if (i < filter.parameters->size() or unit.hasPagination)],[/if]
[/for]
);
[/template]