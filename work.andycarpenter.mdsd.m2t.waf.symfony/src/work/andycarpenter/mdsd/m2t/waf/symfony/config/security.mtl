[comment encoding = UTF-8 /]
[module security(
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::uriRoutes/]


[template public configSecurity(authentication : LocalAuthenticationSystem)]
[file (authentication.configPackagesDirectory().concat('/').concat('security').concat(authentication.yamlExtension()), false)]
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: [authentication.modelsNamespace()/]\[authentication.authenticationModel.modelClassName()/]
                property: [authentication.identifierFeature.modelPropertyName()/]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
#            login_throttling: null

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            custom_authenticator: [authentication.authenticationNamespace()/]\[authentication.authenticatorName()/]
            logout:
[if (authentication.logoutElement.routeName() <> '/logout')]
                path: [authentication.logoutElement.routeName()/]
[/if]
		[if (authentication.allowRememberMe)]
            remember_me:
                secret:   '%kernel.secret%'
                lifetime: 1209600 # 14 days
                signature_properties: ['['/]password[']'/]
                always_remember_me: true
		[/if]

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: true

    # [protected ('role.hierarchy')]
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ['['/]ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH[']'/]

    # [/protected]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^[authentication.loginElement.uriPath()/]$, roles: PUBLIC_ACCESS, requires_channel: https }
[if (authentication.allowSelfRegistration)]
        - { path: ^[authentication.registrationElement.uriPath()/], roles: PUBLIC_ACCESS, requires_channel: https }
[/if]
        - { path: ^[authentication.forgottenPasswordElement.uriPath()/], roles: PUBLIC_ACCESS, requires_channel: https }
        # [protected ('access.control')]
        - { path: ^/, roles: PUBLIC_ACCESS, requires_channel: https }
        # [/protected]


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
[/file]
[/template]
