[comment encoding = UTF-8 /]
[module autocompleteType(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::translation/]


[template public autocompleteTypes(wafModel : WafModel)]
[for (association : UnitAssociation | wafModel.autocompleteFields)]
[association.autocompleteType(association.association.targetType)/]
[/for]
[/template]

[template public autocompleteType(association : UnitAssociation, searchType : Entity)]
[file(association.autocompleteTypeFilename(), false)]
<?php
namespace [searchType.formNamespace()/];

use [searchType.modelsNamespace()/]\[searchType.modelClassName()/];
use Symfony\Component\Form\AbstractType;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Security\Core\Security;
use Symfony\UX\Autocomplete\Form\AsEntityAutocompleteField;
use Symfony\UX\Autocomplete\Form\ParentEntityAutocompleteType;


#['['/]AsEntityAutocompleteField[']'/]
class [association.autocompleteTypeClassName()/] extends AbstractType
{
    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(['['/]
            'label' => '[association.association.captionContainedId()/]',
            'translation_domain' => 'entity',
[if (not association.isSingleton or not association.isRequired)]
            'required' => false,
[/if]
            'class' => [searchType.modelClassName()/]::class,
            'choice_label' => [if (association.valueDisplay.oclIsUndefined())]'defaultLabel'[else]'[association.valueDisplay.name.toLowerFirst()/][if (not association.valueDisplay.name.endsWith('Label'))]Label[/if]'[/if],
            'choice_translation_domain' => false,
[if (association.isSingleton)]
            'placeholder' => 'actions.labels.select_one',
[else]
            'multiple' => true,
[/if]
            'searchable_fields' => [searchType.searchFields()/],
[if (not association.displayedOn.authorisationRoles.oclIsUndefined())]
            'security' => '[association.displayedOn.authorisationRoles/]',
[/if]
        [']'/]);
    }

    public function getParent(): string
    {
        return ParentEntityAutocompleteType::class;
    }
}
[/file]
[/template]

[template private searchFields(searchType : Entity) post(trim())]
['['/] [for (key : Attribute | searchType.uriPathKeys() ) separator(', ')]
'[key.searchPath(searchType)/]'[/for] [']'/]
[/template]

[query private searchPath(key : Attribute, searchType : Entity) : String
	= if searchType.attributeKeys->includes(key) then
			key.modelPropertyName()
		else if searchType.isContained then
				searchType.containingAssociation.modelPropertyName()
					.concat('.')
					.concat(key.searchPath(searchType.containingType))
		else
			''
		endif endif
/]