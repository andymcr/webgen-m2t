[comment encoding = UTF-8 /]
[module controller(
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::parameters/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::controllers::attributes/]


[template public authenticationController(authentication : Authentication, genModel : WafModel)
	? (authentication.oclIsTypeOf(LocalAuthenticationSystem)) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
[file(localAuthentication.controllerFilename(genModel), false)]
<?php
[if (genModel.hasAPI)]
namespace [authentication.webControllersNamespace()/];
[else]
namespace [authentication.controllersNamespace()/];
[/if]

[localAuthentication.useStatements()/]


class [localAuthentication.controllerClassName()/] extends [localAuthentication.baseControllerClassName()/]
{
    use ResetPasswordControllerTrait;

    [localAuthentication.properties()/]

    [localAuthentication.constructor()/]

[if (localAuthentication.hasRegistrationElement)]
	[localAuthentication.registrationElement.elementMethods(genModel)/]

[/if]
	[localAuthentication.loginElement.elementMethods(genModel)/]

	[localAuthentication.logoutElement.elementMethods(genModel)/]

	[localAuthentication.forgottenPasswordElement.elementMethods(genModel)/]

	[localAuthentication.changePasswordElement.elementMethods()/]
}
[/file]
[/let]
[/template]

[template private useStatements(authentication : LocalAuthenticationSystem) post(trim())]
use [authentication.modelsNamespace()/]\[authentication.authenticationModel.modelClassName()/];
use [authentication.modelsNamespace()/]\[authentication.resetPasswordRequestModel.modelClassName()/];
use [authentication.formNamespace()/]\[authentication.forgottenPasswordElement.typeRequestClassName()/];
use [authentication.formNamespace()/]\[authentication.forgottenPasswordElement.typeResetClassName()/];
use [authentication.formNamespace()/]\[authentication.loginElement.typeClassName()/];
[if (authentication.hasRegistrationElement)]
use [authentication.formNamespace()/]\[authentication.registrationElement.typeClassName()/];
[/if]
use [authentication.formNamespace()/]\[authentication.changePasswordElement.typeClassName()/];
use [authentication.repositoriesNamespace()/]\[authentication.authenticationModel.repository.repositoryClassName()/];
[if (authentication.hasRegistrationElement)]
use App\Security\EmailVerifier;
[/if]
[if (authentication.captcha)]
use Karser\Recaptcha3Bundle\Validator\Constraints\Recaptcha3Validator;
[/if]
use Psr\Log\LoggerInterface;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Bundle\FrameworkBundle\Controller\[authentication.baseControllerClassName()/];
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use Symfony\Contracts\Translation\TranslatorInterface;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
[/template]

[template private properties(authentication : LocalAuthenticationSystem) post(trim())]
/**
 * @var ResetPasswordHelperInterface
 */
private ResetPasswordHelperInterface $resetPasswordHelper;

/**
 * @var [authentication.authenticationModel.repository.repositoryClassName()/] $[authentication.authenticationModel.repository.instanceName()/]
 */
private [authentication.authenticationModel.repository.repositoryClassName()/] $[authentication.authenticationModel.repository.instanceName()/];

/**
 * @var TranslatorInterface $translator
 */
private TranslatorInterface $translator;

/**
 * @var LoggerInterface $logger
 */
private LoggerInterface $logger;
[/template]

[template private constructor(authentication : LocalAuthenticationSystem) post(trim())]
public function __construct([authentication.authenticationModel.repository.repositoryClassName()/] $[authentication.authenticationModel.repository.instanceName()/], ResetPasswordHelperInterface $resetPasswordHelper, TranslatorInterface $translator, LoggerInterface $securityLogger)
{
    $this->[authentication.authenticationModel.repository.instanceName()/] = $[authentication.authenticationModel.repository.instanceName()/];
    $this->resetPasswordHelper = $resetPasswordHelper;
    $this->translator = $translator;
    $this->logger = $securityLogger;
}
[/template]


[template private elementMethods(element : RegistrationElement, genModel : WafModel) post(trim())]
/**
 **/
[element.routeAttribute()/]
public function [element.actionName()/](Request $request, UserPasswordHasherInterface $userPasswordHasher): Response
{
    if ($this->getUser()) {
[if (genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[genModel.homeUnit().routeName()/]");
[/if]
    }

    $user = new [element.authentication.userModel.modelClassName()/]();
    $form = $this->createForm([element.typeClassName()/]::class, $user);
    $form->handleRequest($request);
    if ($form->isSubmitted() && $form->isValid()) {
        $user->setPassword($userPasswordHasher->hashPassword(
            $user, $form->get('plainPassword')->getData()
        ));
        [element.authentication.authenticationModel.repository.instanceName()/]->save($user, true);

        // generate a signed url and email it to the user
        $this->emailVerifier->sendEmailConfirmation('app_verify_email', $user,
            (new TemplatedEmail())
		        ->from(new Address(
                    /* @phpstan-ignore-next-line */
                    $this->getParameter('[genModel.siteProperties.securityFromEmailId()/]'),
                    /* @phpstan-ignore-next-line */
                    $this->getParameter('[genModel.siteProperties.securityFromNameId()/]')))
                ->to($user->getEmail())
                ->subject('Please Confirm your Email')
                ->htmlTemplate('registration/confirmation_email.html.twig')
        );
        // do anything else you need here, like send an email

[if (genModel.homeUnit().oclIsUndefined())]
            return $this->redirect("/");
[else]
            return $this->redirectToRoute("[genModel.homeUnit().routeName()/]");
[/if]
    }

    return $this->render('[element.authenticationTemplate()/]/[element.templateName()/][element.htmlExtension()/][element.twigExtension()/]', ['['/]
        '[element.instanceParameter()/]' => $[element.formVariable()/]->createView()
    [']'/]);
}

/**
 [element.routeEmailVerification()/]
 **/
public function verifyUserEmail(Request $request, EmailVerifier $emailVerifier, AuthenticationRepository $authenticationRepository): Response
{
    $id = $request->get('id');

    if (null === $id) {
        return $this->redirectToRoute('app_register');
    }

    $user = $authenticationRepository->find($id);

    if (null === $user) {
        return $this->redirectToRoute('app_register');
    }

    // validate email confirmation link, sets User::isVerified=true and persists
    try {
        $this->emailVerifier->handleEmailConfirmation($request, $user);
    } catch (VerifyEmailExceptionInterface $exception) {
        $this->addFlash('verify_email_error', $exception->getReason());
         return $this->redirectToRoute('app_register');
    }

    // @TODO Change the redirect on success and handle or remove the flash message in your templates
    $this->addFlash('success', 'Your email address has been verified.');

    return $this->redirectToRoute('app_register');
}
[/template]


[template private elementMethods(element : LoginElement, genModel : WafModel) post(trim())]
/**
 **/
[element.routeAttribute()/]
public function [element.actionName()/](AuthenticationUtils $authenticationUtils): Response
{
    if ($this->getUser()) {
[if (genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[genModel.homeUnit().routeName()/]");
[/if]
    }

    [element.formVariable()/] = $this->createForm([element.typeClassName()/]::class);

    $parameters = ['['/][']'/];
    $parameters['['/]'[element.instanceParameter()/]'[']'/] = [element.formVariable()/]->createView();
    $parameters['['/]'error'[']'/] = $authenticationUtils->getLastAuthenticationError();
    return $this->render('[element.authenticationTemplate()/]/[element.templateName()/][element.htmlExtension()/][element.twigExtension()/]', $parameters);
}
[/template]

[template private elementMethods(element : LogoutElement, genModel : WafModel) post(trim())]
/**
 */
[element.routeAttribute()/]
public function [element.actionName()/](): Response
{
    throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
}
[/template]


[template private elementMethods(element : ForgottenPasswordElement, genModel : WafModel) post(trim())]
[element.requestMethod(genModel)/]

[element.sendEmailMethod(genModel)/]

[element.checkEmailMethod(genModel)/]

[element.resetPasswordMethod(genModel)/]
[/template]

[template private requestMethod(element : ForgottenPasswordElement, genModel : WafModel) post(trim())]
/**
 **/
[element.routeAttribute()/]
public function [element.actionName()/]Request(Request $request, MailerInterface $mailer): Response
{
    if ($this->getUser()) {
        $this->logger->debug("Forgotten password process started by logged in user " . $this->getUser()->getUserIdentifier());
[if (genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[genModel.homeUnit().routeName()/]");
[/if]
    }

    [element.formVariable()/] = $this->createForm([element.typeRequestClassName()/]::class);
    [element.formVariable()/]->handleRequest($request);
    if ([element.formVariable()/]->isSubmitted() && [element.formVariable()/]->isValid()) {
        return $this->processSendingPasswordResetEmail(
            [element.formVariable()/]->get('[element.authentication.identifierFeature.modelPropertyName()/]')->getData(),
            $mailer
        );
    }

    $parameters = ['['/][']'/];
    $parameters['['/]'[element.instanceParameter()/]'[']'/] = [element.formVariable()/]->createView();
    return $this->render('[element.authenticationTemplate()/]/[element.viewRequestName()/][element.htmlExtension()/][element.twigExtension()/]', $parameters);
}
[/template]

[template private sendEmailMethod(element : ForgottenPasswordElement, genModel : WafModel) post(trim())]
private function processSendingPasswordResetEmail(string $identifier, MailerInterface $mailer): RedirectResponse
{
    $this->logger->info("Request to reset password for " . $identifier);
    $user = $this->[element.authentication.authenticationModel.repository.instanceName()/]->findOneBy(['['/]
        'email' => $identifier,
    [']'/]);

    // Do not reveal whether a user account was found or not.
    if (!$user) {
        $this->logger->info($identifier . "does not identify a valid user");
        return $this->redirectToRoute('[element.routeEmailSentName()/]');
    }

    try {
        $resetToken = $this->resetPasswordHelper->generateResetToken($user);
    } catch (ResetPasswordExceptionInterface $e) {
        $this->logger->info("Problem getting reset token " . $e->getReason());
        // If you want to tell the user why a reset email was not sent, uncomment
        // the lines below and change the redirect to '[element.routeName()/]'.
        // Caution: This may reveal if a user is registered or not.
        //
        // $this->addFlash('reset_password_error', sprintf(
        //     'There was a problem handling your password reset request - %s',
        //     $e->getReason()
        // ));

        return $this->redirectToRoute('[element.routeEmailSentName()/]');
    }

    $this->logger->info("Sending password reset request email to " . $user->getEmail());
    $email = (new TemplatedEmail())
        ->from(new Address(
                /* @phpstan-ignore-next-line */
                $this->getParameter('[genModel.siteProperties.securityFromEmailId()/]'),
                /* @phpstan-ignore-next-line */
                $this->getParameter('[genModel.siteProperties.securityFromNameId()/]')))
        ->to($user->getEmail())
        ->subject('[element.emailCheckSubject/]')
        ->htmlTemplate('[element.authenticationTemplate()/]/[element.viewEmailMessageName()/][element.htmlExtension()/][element.twigExtension()/]')
        ->context(['['/]
            'user' => $user,
            'resetToken' => $resetToken,
        [']'/]);

    $mailer->send($email);

    // Store the token object in session for retrieval in check-email route.
    $this->setTokenObjectInSession($resetToken);

    return $this->redirectToRoute('[element.routeEmailSentName()/]');
}
[/template]

[template private checkEmailMethod(element : ForgottenPasswordElement, genModel : WafModel) post(trim())]
/**
 * Confirmation page after a user has requested a password reset.
 *
 **/
[element.routeEmailSentAttribute()/]
public function [element.actionName()/]CheckEmail(): Response
{
    // Generate a fake token if the user does not exist or someone hit this page directly.
    // This prevents exposing whether or not a user was found with the given email address or not
    if (null === ($resetToken = $this->getTokenObjectFromSession())) {
        $resetToken = $this->resetPasswordHelper->generateFakeResetToken();
    }

    return $this->render('[element.authenticationTemplate()/]/[element.viewCheckEmailName()/][element.htmlExtension()/][element.twigExtension()/]', ['['/]
//        'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
       'resetToken' => $resetToken,
    [']'/]);
}
[/template]

[template private resetPasswordMethod(element : ForgottenPasswordElement, genModel : WafModel) post(trim())]
/**
 **/
[element.routeResetPasswordAttribute()/]
public function [element.actionName()/]Reset(Request $request, UserPasswordHasherInterface $passwordHasher, string $token = null): Response
{
    if ($token) {
        // We store the token in session and remove it from the URL, to avoid the URL being
        // loaded in a browser and potentially leaking the token to 3rd party JavaScript.
        $this->storeTokenInSession($token);

        return $this->redirectToRoute('[element.routeResetPasswordName()/]');
    }

    $token = $this->getTokenFromSession();
    if (null === $token) {
        throw $this->createNotFoundException('No reset password token found in the URL or in the session.');
    }

    try {
        /** @var [authentication.authenticationModel.modelClassName()/] $user */
        $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
    } catch (ResetPasswordExceptionInterface $e) {
        $this->addFlash('reset_password_error', sprintf(
            '%s - %s',
            $this->translator->trans(ResetPasswordExceptionInterface::MESSAGE_PROBLEM_VALIDATE, ['['/][']'/], 'ResetPasswordBundle'),
            $this->translator->trans($e->getReason(), ['['/][']'/], 'ResetPasswordBundle')
        ));

        return $this->redirectToRoute('[element.routeName()/]');
    }

    // The token is valid; allow the user to change their password.
    [element.formVariable()/] = $this->createForm([element.typeResetClassName()/]::class);
    [element.formVariable()/]->handleRequest($request);
    if ([element.formVariable()/]->isSubmitted() && [element.formVariable()/]->isValid()) {
        // A password reset token should be used only once, remove it.
        $this->resetPasswordHelper->removeResetRequest($token);

        $encodedPassword = $passwordHasher->hashPassword(
            $user,
            [element.formVariable()/]->get('plainPassword')->getData()
        );
        $user->setPassword($encodedPassword);
        $this->[element.authentication.authenticationModel.repository.instanceName()/]->save($user, true);

        // The session is cleaned up after the password has been changed.
        $this->cleanSessionAfterReset();
        $this->logger->info("Password changed for " . $user->getUserIdentifier());

        return $this->redirectToRoute('[genModel.homeUnit().routeName()/]');
    }

    $parameters = ['['/][']'/];
    $parameters['['/]'[element.instanceParameter()/]'[']'/] = [element.formVariable()/]->createView();
    return $this->render('[element.authenticationTemplate()/]/[element.viewResetName()/][element.htmlExtension()/][element.twigExtension()/]', $parameters);
}
[/template]

[template private elementMethods(element : ChangePasswordElement) post(trim())]
/**
 **/
[element.routeAttribute()/]
public function [element.actionName()/]Reset(Request $request, UserPasswordHasherInterface $passwordHasher, string $token = null): Response
{
}
[/template]
