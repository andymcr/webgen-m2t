[comment encoding = UTF-8 /]
[module entityTests(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/security')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::expression/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]


[template public modelTests(entity : Entity)]
[file(entity.modelTestFilename(), false)]
<?php
namespace [entity.modelTestsNamespace()/];

use [entity.modelsNamespace()/]\[entity.modelClassName()/];
use PHPUnit\Framework\TestCase;


class [entity.modelTestClassName()/] extends TestCase
{
[for (feature : Feature | entity.features->select(f | not f.isResourceFeature))]
    [feature.testMethodDefault()/]

[/for]
}
[/file]
[/template]

[template private testMethodDefault(feature : Feature) post(trim())]
public function test[feature.modelPropertyName().toUpperFirst()/]Default(): void
{
	$[feature.partOf.instanceName()/] = new [feature.partOf.modelClassName()/]();
    [feature.testMethodCoreDefault()/]
}
[/template]

[template private testMethodCoreDefault(feature : Feature)
	?(feature.isBooleanFeature and feature.isSingleton) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
[if (attribute.defaultSingletonValue() = 'true')]
$this->assertTrue($[attribute.partOf.instanceName()/]->[attribute.getMethodName()/]());
	[else]
$this->assertFalse($[attribute.partOf.instanceName()/]->[attribute.getMethodName()/]());
	[/if]
[/let]
[/template]

[template private testMethodCoreDefault(feature : Feature)
	?(feature.isDateFeature and feature.isSingleton) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
[if (attribute.hasDefaultValue)]
	[if (attribute.defaultValue.oclIsTypeOf(CurrentTime))]
$this->assertEqualsWithDelta([attribute.oclAsType(Attribute).defaultSingletonValue()/], $[attribute.partOf.instanceName()/]->[feature.getMethodName()/](), 5);
	[else]
$this->assertEquals([attribute.oclAsType(Attribute).defaultSingletonValue()/], $[attribute.partOf.instanceName()/]->[feature.getMethodName()/]());
	[/if]
[elseif (attribute.isRequired)]
$this->assertEqualsWithDelta([attribute.oclAsType(Attribute).defaultSingletonValue()/], $[attribute.partOf.instanceName()/]->[feature.getMethodName()/](), 5);
[else]
$this->assertNull($[attribute.partOf.instanceName()/]->[attribute.getMethodName()/]());
[/if]
[/let]
[/template]

[template private testMethodCoreDefault(feature : Feature)
	?(feature.isAttributeFeature and feature.isSingleton and not feature.isBooleanFeature and not feature.isDateFeature) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
$this->assertEquals([attribute.oclAsType(Attribute).defaultSingletonValue()/], $[attribute.partOf.instanceName()/]->[feature.getMethodName()/]());
[/let]
[/template]

[template private defaultSingletonValue(attribute : Attribute) post(trim())]
[if (attribute.hasDefaultValue)]
[attribute.defaultValue.defaultExpression()/]
[else]
	[if (attribute.isBooleanFeature)]
false
	[elseif (attribute.isDateFeature)]
new \DateTimeImmutable()
	[elseif (attribute.isEmailFeature)]
''
	[elseif (attribute.isEnumerationFeature)]
0
	[elseif (attribute.isFloatFeature)]
0.0
	[elseif (attribute.isIntegerFeature)]
0
	[elseif (attribute.isLocationFeature)]
	[elseif (attribute.isResourceFeature)]
	[elseif (attribute.isStringFeature)]
''
	[elseif (attribute.isTextareaFeature)]
''
	[elseif (attribute.isUrlFeature)]
''
	[else]
''
	[/if]
[/if]
[/template]

[template private testMethodCoreDefault(feature : Feature)
	?(feature.isAttributeFeature and not feature.isSingleton) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
[if (attribute.partOf.implementsUserInterface and attribute.name = 'roles')]
$this->assertCount(1, $[attribute.partOf.instanceName()/]->[attribute.getMethodName()/]());
[else]
$this->assertCount(0, $[attribute.partOf.instanceName()/]->[attribute.getMethodName()/]());
[/if]
[/let]
[/template]

[template private testMethodCoreDefault(feature : Feature)
	?(feature.isAssociationFeature) post(trim())]
[let association : Association = feature.oclAsType(Association)]
[if (association.isSingleton)]
	[if (association.associationContainer or association.isRequired)]
$this->expectError();
	[/if]
$this->assertNull($[association.partOf.instanceName()/]->[association.getMethodName()/]());
[else]
$this->assertCount(0, $[association.partOf.instanceName()/]->[association.getMethodName()/]());
[/if]
[/let]
[/template]

[template private createUserInstance(security : SecurityModel) post(trim())]
[if (security.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[let localAuthentication : LocalAuthenticationSystem = security.authentication.oclAsType(LocalAuthenticationSystem)]
new [localAuthentication.authenticationModel.modelClassName()/]()
[/let]
[else]
new [security.authentication.userModel.modelClassName()/]()
[/if]
[/template]