[comment encoding = UTF-8 /]
[module repository(
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]
[import work::andycarpenter::mdsd::m2t::expression::expression/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::constant/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::types/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::uriRoutes/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::repository::queryDoctrine/]


[query private hasCurrentUser(repository : Repository) : Boolean
	= repository.selections
		->select(s | s.hasCurrentUser())
		->notEmpty()
/]

[query private hasCurrentUser(selection : Selection) : Boolean
	= if selection.condition.oclIsUndefined() then
				false
			else
				selection.condition.hasCurrentUser()
			endif
/]

[query private hasConditionParameters(selection : Selection) : Boolean
	= if selection.condition.oclIsUndefined() then
				false
			else
				selection.condition.hasParameters()
			endif
/]


[template public repository(repository : Repository, security : SecurityModel)]
[file(repository.repositoryFilename(), false)]
<?php
namespace [repository.repositoryNamespace()/];

[if (repository.serves.attributes->notEmpty())]
use [repository.modelsNamespace()/]\[repository.serves.modelClassName()/];
[/if]
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
[if (repository.selections->select(s | s.filters->notEmpty())->notEmpty())]
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
[/if]
[if (repository.selections->notEmpty())]
use Doctrine\ORM\Tools\Pagination\Paginator;
[/if]
[if (security.authentication.userModel.repository = repository)]
use Symfony\Component\Security\Core\Security;
[/if]
[if (repository.serves.implementsUserInterface)]
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
[/if]
[if (repository.serves.implementsResetPasswordInterface)]
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestInterface;
use SymfonyCasts\Bundle\ResetPassword\Persistence\Repository\ResetPasswordRequestRepositoryTrait;
use SymfonyCasts\Bundle\ResetPassword\Persistence\ResetPasswordRequestRepositoryInterface;
[/if]


/**
 * @extends [repository.baseRepositoryClassName()/]<[repository.serves.modelClassName()/]>
 */
class [repository.className()/] extends [repository.baseRepositoryClassName()/][if (repository.serves.implementsResetPasswordInterface)]
 implements ResetPasswordRequestRepositoryInterface[/if]

{
[if (repository.serves.implementsResetPasswordInterface)]
    use ResetPasswordRequestRepositoryTrait;

[/if]
[for (constant : Constant | repository.constants)]
    [if (constant.useFunction())]private[else]public[/if] static $[constant.name/] = [if (constant.useFunction())]null[else][constant.value.queryExpression()/][/if];


[/for]
[if (security.authentication.userModel.repository = repository)]
    /**
     * @var Security $security
     */
    private Security $security;

[/if]
[if (repository.hasCurrentUser())]
    /**
     * @var [security.authentication.userModel.repository.className()/] $[security.authentication.userModel.repository.instanceName()/]
     */
    private [security.authentication.userModel.repository.className()/] $[security.authentication.userModel.repository.instanceName()/];

[/if]
    public function __construct(ManagerRegistry $managerRegistry[if (security.authentication.userModel.repository = repository)]
, Security $security[/if][if (repository.hasCurrentUser())]
, [security.authentication.userModel.repository.className()/] $[security.authentication.userModel.repository.instanceName()/][/if])
    {
        parent::__construct($managerRegistry, [repository.serves.modelClassName()/]::class);
[if (security.authentication.userModel.repository = repository)]
        $this->security = $security;
[/if]
[if (repository.hasCurrentUser())]
        $this->[security.authentication.userModel.repository.instanceName()/] = $[security.authentication.userModel.repository.instanceName()/];
[/if]
    }

[for (constant : Constant | repository.constants->select(c | c.useFunction()))]
    public static function [constant.name/]()
    {
	[if (constant.value.oclIsUndefined())]
        // [protected ('constant '.concat(constant.name))]
        // [/protected]
	[else]
		[if (constant.value.oclIsTypeOf(TimeLiteral))]
        if (empty($[constant.name/])) {
            $[constant.name/] = new \DateTime('[constant.value.oclAsType(TimeLiteral).value/]');
        }

        return $[constant.name/];
		[/if]
	[/if]
    }

[/for]
[if (security.authentication.userModel.repository = repository)]
    [repository.getCurrentUserMethod(security)/]

[/if]
[if (repository.serves.implementsUserInterface)]
    [repository.userInterfaceMethods()/]

[/if]
[if (repository.serves.implementsResetPasswordInterface)]
    [repository.resetPasswordMethods()/]

[/if]
[if (repository.serves.attributes->select(a | not a.hasSlugFields)->notEmpty() and not repository.serves.implementsResetPasswordInterface)]
    [repository.createMethod()/]

[/if]
[if (repository.findOne.oclIsUndefined() and repository.serves.hasRouteParameters())]
    [repository.findMethod()/]

[/if]
[if (not repository.findAll.oclIsUndefined())]
    [repository.findAll.findAllMethod()/]

[elseif (repository.selections->select(s | s.name.equalsIgnoreCase('all'))->notEmpty())]
    [repository.selections->any(s | s.name.equalsIgnoreCase('all')).findAllMethod()/]

[/if]
[for (selection : Selection | repository.selections->select(s | not s.name.equalsIgnoreCase('all')))]
    [selection.selectionMethod(security)/]

[/for]
[if (not repository.serves.implementsResetPasswordInterface)]
    [repository.removeMethod()/]

    [repository.saveMethod()/]

    [repository.flushMethod()/]

[/if]
}
[/file]
[/template]

[template private getCurrentUserMethod(repository : Repository, security : SecurityModel) post(trim())]
/**
 * @return [security.authentication.userModel.modelClassName()/]
 *
 */
public function getCurrentUser(): [security.authentication.userModel.modelClassName()/]
{
    $queryBuilder = $this->createQueryBuilder('[repository.serves.selectName()/]');
    $[repository.instanceName()/] = $queryBuilder
        ->where($queryBuilder->expr()->eq('[security.authentication.userKey.modelPropertyName()/].', ':[security.authentication.userKey.name/]'))
        ->setParameter('[security.authentication.userKey.name/]', $this->security->getUser()->getUsername())
        ->getQuery()->getOneOrNullResult();
    if(is_null($[repository.instanceName()/])) {
        throw new \Exception();
    }
    return $[repository.instanceName()/];
}
[/template]

[template private userInterfaceMethods(repository : Repository) post(trim())]
/**
 * Used to upgrade (rehash) the user's password automatically over time.
 *
 * @param UserInterface $user
 * @param string $newEncodedPassword
 */
public function upgradePassword(UserInterface $user, string $newEncodedPassword): void
{
    if (!$user instanceof [repository.serves.modelClassName()/]) {
        throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', \get_class($user)));
    }

    $user->setPassword($newEncodedPassword);
    $this->save($user, true);
}
[/template]

[template private resetPasswordMethods(repository : Repository) post(trim())]
/**
 *
 * @param object $user
 * @param \DateTimeInterface $expiresAt
 * @param string $selector
 * @param string $hashedToken
 *
 * @return ResetPasswordRequestInterface
 */
public function createResetPasswordRequest(object $user, \DateTimeInterface $expiresAt, string $selector, string $hashedToken): ResetPasswordRequestInterface
{
    return new [repository.serves.modelClassName()/]($user, $expiresAt, $selector, $hashedToken);
}
[/template]

[template private findMethod(repository : Repository) post(trim())]
[let entity : Entity = repository.serves]
/**
 *
 [entity.documentParameters()/]
 *
 * @return [repository.serves.modelClassName()/]|null
 */
public function [repository.serves.findMethodName()/]([entity.routeParameters()/]): ?[repository.serves.modelClassName()/]
{
    $queryBuilder = $this->createQueryBuilder('[repository.serves.selectName()/]');
    return $queryBuilder
[if (entity.isContained or entity.hasAssociationKeys)]
        [entity.containerJoin()/]
[/if]
[if (entity.uriPathKeys()->notEmpty())]
	[if (entity.uriPathKeys()->size() < 2)]
        ->where([entity.uriPathKeys()->first().findWhere(entity)/])
	[else]
        ->where(
            [entity.findWhere(entity) /]
        )
	[/if]
[/if]
[for (key : Attribute | entity.uriPathKeys())]
        ->setParameter('[key.routeParameterName(entity)/]', $[key.routeParameterName(entity)/])
[/for]
        ->getQuery()->getOneOrNullResult();
}
[/let]
[/template]

[template private routeParameters(routingType : Entity) post(trim())]
[for (key : Attribute | routingType.uriPathKeys()) separator (', ')]
[key.implementationType()/] $[key.routeParameterName(routingType)/][/for]
[/template]

[template private documentParameters(routingType : Entity) post(trim())]
[for (key : Attribute | routingType.uriPathKeys())]
* @param [key.implementationType()/] $[key.routeParameterName(routingType)/]
[/for]
[/template]

[template private containerJoin(entity : Entity) post(trim())]
[let container : Entity = entity.containingType]
->join('[entity.selectName()/].[entity.containingAssociation.modelPropertyName()/]', '[container.selectName()/]')
[if (container.isContained and entity <> container)]
[container.containerJoin()/]
[/if]
[/let]
[for (key : Association | entity.associationKeys->select(k | not k.isContainer))]
->join('[entity.selectName()/].[key.modelPropertyName()/]', '[key.targetType.selectName()/]')
[/for]
[/template]

[template private findWhere(entity : Entity, base : Entity) post(trim())]
[let keys : Sequence(Attribute) = entity.uriPathKeys()]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))]
$queryBuilder->expr()->andX([key.findWhere(base)/],
[/for]
[keys->last().findWhere(base)/]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))])[/for]
[/let]
[/template]

[template private findWhere(key : Attribute, base : Entity) post(trim())]
$queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.modelPropertyName()/]', ':[key.routeParameterName(base)/]')
[/template]

[template private createMethod(repository : Repository) post(trim())]
[let entity : Entity = repository.serves]
/**
 *
 [entity.documentCreateParameters()/]
 * @param bool $flush
 *
 * @return [repository.serves.modelClassName()/]
 */
public function create([entity.createParameters()/], $flush = false): [repository.serves.modelClassName()/]
{
    $new = new [entity.modelClassName()/]();
[for (attribute : Attribute | entity.createFeatures())]
    $new->set[attribute.modelPropertyName().toUpperFirst()/]($[attribute.instanceName()/]);
[/for]
    $this->save($new, $flush);
    return $new;
}
[/let]
[/template]

[query private createFeatures(entity : Entity) : OrderedSet(Attribute)	
	= entity.attributes
		->select(a | not a.hasSlugFields and a.isSingleton and not a.isResourceFeature)
/]

[template private createParameters(entity : Entity) post(trim())]
[for (attribute : Attribute | entity.createFeatures()) separator(', ')]
[attribute.implementationType()/] $[attribute.instanceName()/][if (not attribute.isRequired)] = null[/if][/for]
[/template]

[template private documentCreateParameters(entity : Entity) post(trim())]
[for (attribute : Attribute | entity.createFeatures())]
* @param [attribute.implementationType()/][if (not attribute.isRequired)]|null[/if] $[attribute.instanceName()/]
[/for]
[/template]

[template private removeMethod(repository : Repository) post(trim())]
/**
 *
 * @param [repository.serves.modelClassName()/] $entity
 * @param bool $flush
 */
public function remove([repository.serves.modelClassName()/] $entity, bool $flush = false): void
{
    $this->_em->remove($entity);
    if ($flush)
    {
        $this->flush();
    }
}
[/template]

[template private saveMethod(repository : Repository) post(trim())]
/**
 *
 * @param [repository.serves.modelClassName()/] $entity
 * @param bool $flush
 */
public function save([repository.serves.modelClassName()/] $entity, bool $flush = false): void
{
    $this->_em->persist($entity);
    if ($flush)
    {
        $this->flush();
    }
}
[/template]

[template private flushMethod(repository : Repository) post(trim())]
/**
 *
 */
public function flush(): void
{
    $this->_em->flush();
}
[/template]

[template private findAllMethod(selection : Selection) post(trim())]
[if (selection.filters->notEmpty())]
[selection.builderMethod()/]

[/if]
/**
 *
 *
 * @return array<int, [selection.definedBy.serves.modelClassName()/]>[if (selection.hasPaginationSupport)]
|Paginator<[selection.definedBy.serves.modelClassName()/]>[/if]
 */
public function [selection.methodName/]([if (selection.hasPaginationSupport)]
[selection.limitFormals()/][/if])
{
[if (selection.filters->notEmpty())]
    $query = $this->[selection.builderMethodName()/]([selection.limitActuals()/])->getQuery();
[else]
    [selection.builderCode()/]
    $query = $queryBuilder->getQuery();
[/if]

    [selection.queryResult()/]
}

[if (selection.filters->notEmpty())]
[selection.filterMethods()/]

[/if]
[/template]

[template private selectionMethod(selection : Selection, security : SecurityModel)
	? (selection.filters->isEmpty()) post(trim())]
/**
 *
 [selection.documentParameters()/]
 *
 * @return [selection.documentReturnType()/]
 */
public function [selection.methodName/]([selection.formals()/])[selection.returnType()/]
{
    [selection.builderCode()/]
    $query = $queryBuilder->getQuery();
[if (selection.uriPathKeys()->notEmpty() or selection.hasFormals or selection.hasConditionParameters())]
    [selection.queryParametersCode(security)/]
[/if]

    [selection.queryResult()/]
}
[/template]

[template private selectionMethod(selection : Selection, security : SecurityModel)
	? (selection.filters->notEmpty()) post(trim())]
[selection.builderMethod()/]

[if (selection.selectPath->notEmpty() or selection.hasFormals or selection.hasConditionParameters())]
[selection.parametersMethod(security)/]

[/if]
/**
 *
 [selection.documentParameters()/]
 *
 * @return [selection.documentReturnType()/]
 */
public function [selection.methodName/]([selection.formals()/])[selection.returnType()/]
{
    $query = $this->[selection.builderMethodName()/]([selection.actuals()/])->getQuery();
[if (selection.selectPath->notEmpty() or selection.hasFormals or selection.hasConditionParameters())]
    $this->[selection.parametersMethodName()/]($query[if (selection.selectPath->notEmpty() or selection.hasFormals)]
, [selection.selectionActuals()/][/if]);
[/if]

    [selection.queryResult()/]
}

[selection.filterMethods()/]
[/template]

[template private builderMethod(selection : Selection) post(trim())]
/**
 *
 [selection.documentParameters()/]
 *
 * @return QueryBuilder
 */
private function [selection.builderMethodName()/]([selection.formals()/]): QueryBuilder
{
    [selection.builderCode()/]
    return $queryBuilder;
}
[/template]

[template private parametersMethod(selection : Selection, security : SecurityModel) post(trim())]
/**
 *
 * @param Query $query
[for (key : Attribute | selection.uriPathKeys()) separator(', ')]
 * @param [key.implementationType()/] $[key.routeParameterName(selection.selectionType)/]
[/for]
 */
private function [selection.parametersMethodName()/](Query $query[if (selection.selectPath->notEmpty() or selection.hasFormals)]
, [selection.selectionActuals()/][/if]) : void
{
    [selection.queryParametersCode(security)/]
}
[/template]

[template private filterMethods(selection : Selection) post(trim())]
[for (filter : Filter | selection.filters)]
/**
 *
 [filter.documentParameters()/]
 *
 * @return [selection.documentReturnType()/]
 */
public function [filter.methodName/]([filter.formals()/])[selection.returnType()/]
{
    $queryBuilder = $this->[selection.builderMethodName()/]([selection.actuals()/]);
    $queryBuilder->[if (selection.selectPath->isEmpty() and selection.condition.oclIsUndefined())]where[else]andWhere[/if]([filter.condition.queryExpression()/]);
    $query = $queryBuilder->getQuery();
	[if (selection.selectPath->notEmpty() or selection.hasFormals or selection.hasConditionParameters())]
    $this->[selection.parametersMethodName()/]($query[if (selection.selectPath->notEmpty() or selection.hasFormals)]
, [selection.selectionActuals()/][/if]);
	[/if]
	[for (parameter : FormalParameter | filter.parameters)]
    if (is_null($[parameter.name/]) || strcmp(trim($[parameter.name/]), '') === 0) {
        $query->setParameter('[parameter.name/]', '%');
    } else {
		[if (filter.condition.oclIsUndefined())]
        $query->setParameter('[parameter.name/]', $[parameter.name/]);
		[elseif (filter.condition.parameterUsedInLike(parameter, false))]
			[if (parameter.dataType.oclIsUndefined())]
        $query->setParameter('[parameter.name/]', strpos($[parameter.name/], '%') ? $[parameter.name/] : '%' . $[parameter.name/] . '%');
			[elseif (parameter.dataType.isStringClassifier)]
        $query->setParameter('[parameter.name/]', strpos($[parameter.name/], '%') ? $[parameter.name/] : '%' . $[parameter.name/] . '%');
			[else]
        $query->setParameter('[parameter.name/]', $[parameter.name/]);
			[/if]	
	[else]
        $query->setParameter('[parameter.name/]', $[parameter.name/]);
		[/if]
    }
	[/for]

    [selection.queryResult()/]
}
[/for]
[/template]

[template private returnType(selection : Selection) post(trim())]
[if (selection.limit = 1)]
: ?[selection.definedBy.serves.modelClassName()/]
[elseif (selection.hasPaginationSupport)]

[else]
: array
[/if]
[/template]

[template private documentReturnType(selection : Selection) post(trim())]
[if (selection.limit = 1)]
[selection.definedBy.serves.modelClassName()/]|null
[elseif (selection.hasPaginationSupport)]
array<int, [selection.definedBy.serves.modelClassName()/]>|Paginator<[selection.definedBy.serves.modelClassName()/]>
[else]
array<int, [selection.definedBy.serves.modelClassName()/]>
[/if]
[/template]

[template private documentParameters(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty() or selection.hasFormals)]
[selection.documentSelectionParameters()/]
[/if]
[if (selection.hasPaginationSupport)]
[selection.documentPagination()/]
[/if]
[/template]

[template private documentParameters(filter : Filter) post(trim())]
[if (filter.selection.selectPath->notEmpty() or filter.selection.hasFormals)]
[filter.selection.documentSelectionParameters()/]
[/if]
[if (filter.parameters->notEmpty())]
[filter.documentFilterParameters()/]
[/if]
[if (filter.selection.hasPaginationSupport)]
[filter.selection.documentPagination()/]
[/if]
[/template]

[template private documentSelectionParameters(selection : Selection) post(trim())]
[for (key : Attribute | selection.uriPathKeys())]
* @param [key.implementationType()/] $[key.routeParameterName(selection.selectionType)/]
[/for]
[for (parameter : FormalParameter | selection.parameters)]
* @param [parameter.implementationType()/] $[parameter.name/]
[/for]
[/template]

[template private documentFilterParameters(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters)]
* @param [parameter.implementationType()/]|null $[parameter.name/][if (parameter.description <> '')] [parameter.description/][/if]
[/for]
[/template]

[template private documentPagination(selection : Selection) post(trim())]
* @param int $offset
* @param int $limit
[/template]

[template private formals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty() or selection.hasFormals)]
[selection.selectionFormals()/][if (selection.hasPaginationSupport)]
, [/if][/if][if (selection.hasPaginationSupport)]
[selection.limitFormals()/]
[/if]
[/template]

[template private formals(filter : Filter) post(trim())]
[if (filter.selection.selectPath->notEmpty() or filter.selection.hasFormals)]
[filter.selection.selectionFormals()/][if (filter.parameters->notEmpty() or filter.selection.hasPaginationSupport)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterFormals()/][if (filter.selection.hasPaginationSupport)]
, [/if]
[/if]
[if (selection.hasPaginationSupport)]
[filter.selection.limitFormals()/]
[/if]
[/template]

[template private selectionFormals(selection : Selection) post(trim())]
[for (key : Attribute | selection.uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectionType)/][/for]
[if (selection.uriPathKeys()->notEmpty() and selection.hasFormals)]
, [/if]
[for (parameter : FormalParameter | selection.parameters) separator(', ')]
[parameter.implementationType()/] $[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private limitFormals(selection : Selection) post(trim())]
[selection.definedBy.limitFormals(selection.limit)/]
[/template]

[template private limitFormals(service : Repository, limit : Integer) post(trim())]
int $offset = 0, int $limit = [limit/]
[/template]

[template private criteriaLimitFormals(selection : Selection) post(trim())]
int $offset = 0, int $limit = 0
[/template]

[template private filterFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
?string $[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private actuals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty() or selection.hasFormals)]
[selection.selectionActuals()/][if (selection.hasPaginationSupport)]
, [/if]
[/if]
[selection.limitActuals()/]
[/template]

[template private actuals(filter : Filter) post(trim())]
[if (filter.selection.selectPath->notEmpty() or filter.selection.hasFormals)]
[selection.selectionActuals()/][if (filter.parameters->notEmpty() or filter.selection.limit > -1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterActuals()/][if (filter.selection.hasPaginationSupport)], [/if]
[/if]
[filter.selection.limitActuals()/]
[/template]

[template private selectionActuals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty())]
	[for (key : Attribute | selection.selectionType.uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectionType)/][/for]
[if (selection.hasFormals)]
, [/if]
[/if]
[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private limitActuals(selection : Selection) post(trim())]
[if (selection.hasPaginationSupport)]
$offset, $limit
[/if]
[/template]

[template private filterActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private builderCode(selection : Selection) post(trim())]
$queryBuilder = $this->createQueryBuilder('[selection.definedBy.serves.selectName()/]');
[if (selection.fields->notEmpty())]
[selection.fields()/]
[/if]
[if (selection.selectPath->notEmpty() or selection.joins->notEmpty())]
[selection.joins()/]
[/if]
[if (selection.selectPath->notEmpty() or not selection.condition.oclIsUndefined())]
[selection.condition()/]
[/if]
[if (selection.ordering->notEmpty())]
[selection.orderBy()/]
[/if]
[if (selection.hasPaginationSupport)]
if ($limit > 0) {
    $queryBuilder->setFirstResult($offset);
    $queryBuilder->setMaxResults($limit);
}
[/if]
[if (selection.distinct)]
$queryBuilder->distinct();
[/if]
[/template]

[template private fields(selection : Selection) post(trim())]
[let first : Feature = selection.fields->first()]
$queryBuilder->select([first.field(first.alias(selection))/]);
[/let]
[if (selection.fields->size() > 1)]
	[for (field : Feature | selection.fields->subOrderedSet(2, selection.fields->size()))]
$queryBuilder->addSelect([field.field(field.alias(selection))/]);
	[/for]
[/if]
[/template]

[template private field(field : Feature, alias : String) post(trim())]
'[field.partOf.selectName()/].[field.modelPropertyName()/][if (not alias.oclIsUndefined())]
 [alias/][/if]'
[/template]

[template private joins(selection : Selection) post(trim())]
[for (join : Association | selection.joins)]
$queryBuilder->join('[join.partOf.selectName()/].[join.modelPropertyName()/]', '[join.targetType.selectName()/]');
[/for]
[if (selection.selectPath->notEmpty())]
	[for (element : Association | selection.selectPath)]
		[if (selection.joins->excludes(element))]
$queryBuilder->join('[element.sourceType.selectName()/].[element.modelPropertyName()/]', '[element.targetType.selectName()/]');
		[/if]
	[/for]
	[if (selection.selectionType.isContained)]
[selection.joinContainer(selection.selectionType, selection.joins->collect(a | a.partOf))/]
	[/if]
[/if]
[/template]

[template private joinContainer(selection : Selection, childType : Entity, explicitJoins : Sequence(Entity)) post(trim())]
[let association : Association = childType.containingAssociation]
[if (explicitJoins->excludes(childType))]
$queryBuilder->join('[childType.selectName()/].[association.modelPropertyName()/]', '[association.targetType.selectName()/]');
[/if]
[if (association.targetType.isContained)]
[selection.joinContainer(association.targetType, explicitJoins)/]
[/if]
[/let]
[/template]

[template private condition(selection : Selection) post(trim())]
[if (selection.uriPathKeys()->notEmpty())]
[let routingEntity : Entity = selection.selectionType]
	[if (selection.uriPathKeys()->size() = 1)]
	[let key : Attribute = selection.uriPathKeys()->first()]
$queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.modelPropertyName()/]', ':[key.routeParameterName(routingEntity)/]'));
	[/let]
	[else]
$queryBuilder->where($queryBuilder->expr()->andX(
		[for (key : Attribute | selection.uriPathKeys())]
    $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.modelPropertyName()/]', ':[key.routeParameterName(routingEntity)/]')[if (i <> selection.uriPathKeys()->size())],[/if]
		[/for]
));
	[/if]
[/let]
[/if]
[if (not selection.condition.oclIsUndefined())]
$queryBuilder->[if (selection.selectPath->notEmpty())]andWhere[else]where[/if]([selection.condition.queryExpression()/]);
[/if]
[/template]

[template private orderBy(selection : Selection) post(trim())]
$queryBuilder->orderBy([selection.ordering->first().path.queryExpression()/], [selection.ordering->first().order()/]);
[if (selection.ordering->size() > 1)]
	[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
$queryBuilder->addOrderBy([order.path.queryExpression()/], [order.order()/]);
	[/for]
[/if]
[/template]

[template private queryParametersCode(selection : Selection, security : SecurityModel) post(trim())]
[if (selection.uriPathKeys()->notEmpty())]
[selection.querySelectedParameters()/]
[/if]
[if (selection.hasConditionParameters())]
[selection.condition.queryParameter(security)/]
[/if]
[/template]

[template private querySelectedParameters(selection : Selection) post(trim())]
[let routingEntity : Entity = selection.selectionType]
	[for (key : Attribute | selection.uriPathKeys())]
$query->setParameter('[key.routeParameterName(routingEntity)/]', $[key.routeParameterName(routingEntity)/]);
	[/for]
[/let]
[/template]

[template private queryResult(selection : Selection) post(trim())]
[if (selection.limit = 1)]
return $query->getOneOrNullResult();
[elseif (selection.hasPaginationSupport)]
if ($limit > 0)
    return new Paginator($query[if (selection.definedBy.serves.primaryKeys->size() > 1)], false[/if]);
else
    return $query->getResult();
[else]
return $query->getResult();
[/if]
[/template]

[template private formalParameters(parameters : FormalParameterList) post(trim())]
[for (parameter : FormalParameter | parameters.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())] = [parameter.defaultValue/][/if][/for]
[/template]
