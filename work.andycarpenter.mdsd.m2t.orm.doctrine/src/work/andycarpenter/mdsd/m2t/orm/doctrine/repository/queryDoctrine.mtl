[comment encoding = UTF-8 /]
[module queryDoctrine(
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/security')]
[import work::andycarpenter::mdsd::m2t::expression::literals/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::constant/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]


[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(NullLiteral)
		or expression.oclIsTypeOf(IntegerLiteral)) post(trim())]
[expression.valueExpression()/]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(StringLiteral)) post(trim())]
[let literal : StringLiteral = expression.oclAsType(StringLiteral)]
$queryBuilder->expr()->literal('[literal.value/]')
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
':now'
[/template]


[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(ConstantReference)) post(trim())]
[let constant : ConstantReference = expression.oclAsType(ConstantReference)]
[constant.value.definedBy.className()/]::[constant.value.name/][if (constant.value.useFunction())]()[/if]
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsKindOf(FeatureVariable)) post(trim())]
[let variable : FeatureVariable = expression.oclAsType(FeatureVariable)]
'[variable.feature().partOf.selectName()/].[variable.feature().modelPropertyName()/]'
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(ParameterVariable)) post(trim())]
[let variable : ParameterVariable = expression.oclAsType(ParameterVariable)]
':[variable.formal.name/]'
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(CurrentUser)) post(trim())]
[let path : CurrentUser = expression.oclAsType(CurrentUser)]
':user'
[/let]
[/template]


[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
$queryBuilder->expr()->[predicate.operator()/]([if (predicate.predicates->any(e | e.oclIsKindOf(Predicate))->notEmpty())]
[for (expression : Expression | predicate.predicates) separator (',')]

    [expression.queryExpression()/][/for]

)
[else]
[for (expression : Expression | predicate.predicates) separator (', ')]
[expression.queryExpression()/]
[/for]
[/if]
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
$queryBuilder->expr()->[predicate.operator()/]([if (predicate.left.oclIsKindOf(Predicate) or predicate.right.oclIsKindOf(Predicate))]

    [predicate.left.queryExpression()/],
    [predicate.right.queryExpression()/]
)
[else]
[predicate.left.queryExpression()/], [predicate.right.queryExpression()/])
[/if]
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
$queryBuilder->expr()->[predicate.operator()/]([predicate.left.queryExpression()/], [predicate.right.queryExpression()/])
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateInOperator)) post(trim())]
[let predicate : PredicateInOperator = expression.oclAsType(PredicateInOperator)]
$queryBuilder->expr()->[predicate.operator()/]([predicate.left.queryExpression()/], [predicate.right.queryExpression()/])
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
$queryBuilder->expr()->[predicate.operator()/]([predicate.left.queryExpression()/], [predicate.right.queryExpression()/])
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsNull = expression.oclAsType(PredicateIsNull)]
$queryBuilder->expr()->[if (predicate.negated)]isNotNull[else]isNull[/if]([predicate.value.queryExpression()/])
[/let]
[/template]

[template public queryExpression(expression : Expression)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
$queryBuilder->expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.value.queryExpression()/], '0')
[/let]
[/template]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'andX'
		else if predicate.operator = BooleanOperator::Or then
			'orX'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'eq'
		else
			'neq'
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'gt'
			else
				'lte'
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'lt'
			else
				'gte'
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateInOperator) : String
	= if not predicate.negated then
			'in'
		else
			'notIn'
		endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]


[template public order(order : Order) post(trim())]
[if (order.oclIsTypeOf(Asc))]
'ASC'
[else]
'DESC'
[/if]
[/template]


[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.predicates)]
[expression.queryParameter(security)/]
[/for]
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
[predicate.left.queryParameter(security)/]
[predicate.right.queryParameter(security)/]
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
[predicate.left.queryParameter(security)/]
[predicate.right.queryParameter(security)/]
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
[predicate.left.queryParameter(security)/]
[predicate.right.queryParameter(security)/]
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
[predicate.value.queryParameter(security)/]
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(ParameterVariable)) post(trim())]
[let variable : ParameterVariable = expression.oclAsType(ParameterVariable)]
->setParameter('[variable.formal.name/]', $[variable.formal.name/])
[/let]
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
->setParameter('now', new \DateTime('now'))
[/template]

[template public queryParameter(expression : Expression, security : SecurityModel)
	? (expression.oclIsTypeOf(CurrentUser)) post(trim())]
->setParameter('user', $this->[security.authentication.userModel.repository.repositoryInstanceName()/]->getCurrentUser())
[/template]


[query public parameterUsedInLike(expression : Expression, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= if expression.oclIsTypeOf(PredicateBooleanOperator) then
			expression.oclAsType(PredicateBooleanOperator).parameterUsedInLike(parameter, withinLike)
		else if expression.oclIsTypeOf(PredicateEqualityOperator) then
			expression.oclAsType(PredicateEqualityOperator).parameterUsedInLike(parameter, withinLike)
		else if expression.oclIsTypeOf(PredicateComparisonOperator) then
			expression.oclAsType(PredicateComparisonOperator).parameterUsedInLike(parameter, withinLike)
		else if expression.oclIsTypeOf(PredicateLikeOperator) then
			expression.oclAsType(PredicateLikeOperator).parameterUsedInLike(parameter, withinLike)
		else if expression.oclIsTypeOf(PredicateIsEmpty) then
			expression.oclAsType(PredicateIsEmpty).parameterUsedInLike(parameter, withinLike)
		else if expression.oclIsTypeOf(ParameterVariable) then
			expression.oclAsType(ParameterVariable).parameterUsedInLike(parameter, withinLike)
		else
			false
		endif endif endif endif endif endif
/]

[query private parameterUsedInLike(predicate : PredicateBooleanOperator, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= predicate.predicates->select(e | e.parameterUsedInLike(parameter, withinLike))->notEmpty()
/]

[query private parameterUsedInLike(predicate : PredicateEqualityOperator, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= predicate.left.parameterUsedInLike(parameter, withinLike)
		or predicate.right.parameterUsedInLike(parameter, withinLike)
/]

[query private parameterUsedInLike(predicate : PredicateComparisonOperator, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= predicate.left.parameterUsedInLike(parameter, withinLike)
		or predicate.right.parameterUsedInLike(parameter, withinLike)
/]

[query private parameterUsedInLike(predicate : PredicateLikeOperator, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= predicate.left.parameterUsedInLike(parameter, true)
		or predicate.right.parameterUsedInLike(parameter, true)
/]

[query private parameterUsedInLike(predicate : PredicateIsEmpty, parameter : FormalParameter, withinLike : Boolean) : Boolean
	= predicate.value.parameterUsedInLike(parameter, withinLike)
/]

[query private parameterUsedInLike(variable : ParameterVariable, parameter1 : FormalParameter, withinLike : Boolean) : Boolean
	= variable.formal = parameter1
/]
