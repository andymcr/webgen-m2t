[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://andycarpenter.work/metamodel/expression',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]


[query public keyEntity(entity : Entity) : Entity
	= if entity.attributeKeys->notEmpty() then
			entity
		else if entity.isContained then
			entity.containingType.keyEntity()
		else
			null
		endif endif
/]

[query public parentEntity(entity : Entity) : Entity
	= let keyEntity : Entity = entity.keyEntity()
		in if keyEntity.oclIsUndefined() then
				null
			else if not keyEntity.isContained then
				null
			else
				keyEntity.containingType.keyEntity()
			endif endif
/]


[query public uriPathKeys(routingType : Entity) : Sequence(Attribute)
	= let keyEntity : Entity = routingType.keyEntity()
		in if keyEntity.oclIsUndefined() then
				Sequence{}
			else
				let localKeys : OrderedSet(Attribute) = keyEntity.attributeKeys
					in let parentKeys : Sequence(Attribute) = routingType.parentUriPathKeys()
						in if localKeys->isEmpty() then
								parentKeys
							else
								localKeys->iterate(k; j : Sequence(Attribute) = parentKeys | j->append(k))
							endif
			endif
/]

[query private parentUriPathKeys(entity : Entity) : Sequence(Attribute)
	= let parentEntity : Entity = entity.parentEntity()
		in if parentEntity.oclIsUndefined() then
				Sequence{}
			else if entity = parentEntity then
				Sequence{}
			else
				parentEntity.uriPathKeys()
			endif endif
/]

[query public hasRouteParameters(routingType : Entity) : Boolean
	= routingType.uriPathKeys()->notEmpty()
/]

[query public selectionKeys(selection : Selection) : Set(Attribute)
	= if selection.selectPath->notEmpty() then
			selection.uriPathKeys()->asSet()
		else if selection.condition.oclIsUndefined() then
			Set{}
		else
			selection.condition.selectionKeys()
		endif endif
/]

[query public uriPathKeys(selection : Selection) : Sequence(Attribute)
	= let pathKeys : Sequence(Attribute)
		= if selection.selectPath->isEmpty() then
				Sequence{}
			else
				selection.selectionType().uriPathKeys()
			endif
		in if selection.condition.oclIsUndefined() then
			pathKeys
		else
			pathKeys->iterate(key;
				keys : Sequence(Attribute) = Sequence{}
				| if selection.condition.resolvedKeys()->includes(key) then
						keys
					else
						keys->append(key)
					endif)
		endif
/]

[query private selectionKeys(predicate : Predicate) : Set(Attribute)
	= if predicate.oclIsTypeOf(PredicateEqualityOperator) then
			let attribute : Attribute 
				= predicate.oclAsType(PredicateEqualityOperator).selectionKeys()
				in if attribute.oclIsUndefined() then
						Set{}
					else
						Set{ attribute }
					endif
		else if predicate.oclIsTypeOf(PredicateBooleanOperator) then
			predicate.oclAsType(PredicateBooleanOperator).selectionKeys()
		else
			Set{}
		endif endif
/]

[query private selectionKeys(predicate : PredicateEqualityOperator) : Attribute
	= if predicate.left.oclIsTypeOf(AttributeVariable) and predicate.right.oclIsTypeOf(ParameterVariable) then
			let variable : AttributeVariable = predicate.left.oclAsType(AttributeVariable)
				in if variable.attribute.oclIsUndefined() then
						null
					else
						variable.attribute
					endif
		else if predicate.left.oclIsTypeOf(ParameterVariable) and predicate.right.oclIsTypeOf(AttributeVariable) then
			let variable : AttributeVariable = predicate.right.oclAsType(AttributeVariable)
				in if variable.attribute.oclIsUndefined() then
						null
					else
						variable.attribute
					endif
		else
			null
		endif endif
/]

[query private selectionKeys(predicate : PredicateBooleanOperator) : Set(Attribute)
	= predicate.predicates->iterate(
			e : Predicate;
			attributes : Set(Attribute) = Set{}
			| attributes->union(e.selectionKeys()))
/]

[query private resolvedKeys(predicate : Predicate) : Set(Attribute)
	= if predicate.oclIsTypeOf(PredicateEqualityOperator) then
			predicate.oclAsType(PredicateEqualityOperator).resolvedKeys()
		else if predicate.oclIsTypeOf(PredicateBooleanOperator) then
			predicate.oclAsType(PredicateBooleanOperator).resolvedKeys()
		else
			Set{}
		endif endif
/]

[query private resolvedKeys(predicate : PredicateEqualityOperator) : Set(Attribute)
	= if predicate.left.oclIsTypeOf(AssociationVariable) and predicate.right.oclIsTypeOf(CurrentUser) then
			let variable : AssociationVariable = predicate.left.oclAsType(AssociationVariable)
				in if variable.association.oclIsUndefined() then
						Set{}
					else
						variable.association.targetType.uriPathKeys()->asSet()
					endif
		else if predicate.left.oclIsTypeOf(CurrentUser) and predicate.right.oclIsTypeOf(AssociationVariable) then
			let variable : AssociationVariable = predicate.right.oclAsType(AssociationVariable)
				in if variable.association.oclIsUndefined() then
						Set{}
					else
						variable.association.targetType.uriPathKeys()->asSet()
					endif
		else
			Set{}
		endif endif
/]

[query private resolvedKeys(predicate : PredicateBooleanOperator) : Set(Attribute)
	= predicate.predicates->iterate(
			e : Predicate;
			attributes : Set(Attribute) = Set{}
			| attributes->union(e.resolvedKeys()))
/]


[query public routeParameterName(attribute : Attribute, routingType : Entity) : String
	= if routingType.oclIsUndefined() then
			attribute.name
		else
			attribute.routeParameterName(routingType.uriPathKeys())
		endif
/]

[query public routeParameterName(attribute : Attribute, routeParameters : Sequence(Attribute)) : String
	= if routeParameters->select(p | p.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.oclAsType(Entity).modelClassName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif
/]
