[comment encoding = UTF-8 /]
[module factory(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]


[template public factory(entity : Entity)]
[file(entity.factoryFilename(), false)]
<?php
namespace [entity.factoriesNamespace()/];

use [entity.modelsNamespace()/]\[entity.modelClassName()/];
use Zenstruck\Foundry\RepositoryProxy;
use Zenstruck\Foundry\ModelFactory;
use Zenstruck\Foundry\Proxy;


/**
 * @extends ModelFactory<[entity.modelClassName()/]>
 *
 * @method static [entity.modelClassName()/]|Proxy createOne(array $attributes = ['['/][']'/])
 * @method static [entity.modelClassName()/]['['/][']'/]|Proxy['['/][']'/] createMany(int $number, array|callable $attributes = ['['/][']'/])
 * @method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] createSequence(array|callable $sequence)
 * @method static [entity.modelClassName()/]|Proxy find(object|array|mixed $criteria)
 * @method static [entity.modelClassName()/]|Proxy findOrCreate(array $attributes)
 * @method static [entity.modelClassName()/]|Proxy first(string $sortedField = 'id')
 * @method static [entity.modelClassName()/]|Proxy last(string $sortedField = 'id')
 * @method static [entity.modelClassName()/]|Proxy random(array $attributes = ['['/][']'/])
 * @method static [entity.modelClassName()/]|Proxy randomOrCreate(array $attributes = ['['/][']'/]))
 * @method static [entity.modelClassName()/]['['/][']'/]|Proxy['['/][']'/] all()
 * @method static [entity.modelClassName()/]['['/][']'/]|Proxy['['/][']'/] findBy(array $attributes)
 * @method static [entity.modelClassName()/]['['/][']'/]|Proxy['['/][']'/] randomSet(int $number, array $attributes = ['['/][']'/]))
 * @method static [entity.modelClassName()/]['['/][']'/]|Proxy['['/][']'/] randomRange(int $min, int $max, array $attributes = ['['/][']'/]))
 * @method static [entity.repository.repositoryClassName()/]|RepositoryProxy repository()
 * @method [entity.modelClassName()/]|Proxy create(array|callable $attributes = ['['/][']'/])
 *
 * @phpstan-method static [entity.modelClassName()/]&Proxy createOne(array $attributes = ['['/][']'/])
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] createMany(int $number, array|callable $attributes = ['['/][']'/])
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] createSequence(array|callable $sequence)
 * @phpstan-method static [entity.modelClassName()/]&Proxy find(object|array|mixed $criteria)
 * @phpstan-method static [entity.modelClassName()/]&Proxy findOrCreate(array $attributes)
 * @phpstan-method static [entity.modelClassName()/]&Proxy first(string $sortedField = 'id')
 * @phpstan-method static [entity.modelClassName()/]&Proxy last(string $sortedField = 'id')
 * @phpstan-method static [entity.modelClassName()/]&Proxy random(array $attributes = ['['/][']'/])
 * @phpstan-method static [entity.modelClassName()/]&Proxy randomOrCreate(array $attributes = ['['/][']'/])
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] all()
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] findBy(array $attributes)
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] randomSet(int $number, array $attributes = ['['/][']'/])
 * @phpstan-method static [entity.modelClassName()/]['['/][']'/]&Proxy['['/][']'/] randomRange(int $min, int $max, array $attributes = ['['/][']'/])
 * @phpstan-method [entity.modelClassName()/]&Proxy create(array|callable $attributes = ['['/][']'/])
 */
class [entity.factoryClassName()/] extends ModelFactory
{
    [comment entity.constructorMethod()/]

    [entity.defaultsMethod()/]

    [comment entity.initializeMethod()/]

    [entity.classMethod()/]
}
[/file]
[/template]

[template private constructorMethod(entity : Entity) post(trim())]
public function __construct()
{
    parent::__construct()
}
[/template]

[template private defaultsMethod(entity : Entity) post(trim())]
/**
 * @inheritdoc ModelFactory
 * 
 * @return array<string, mixed>
 **/
protected function getDefaults(): array
{
    return ['['/]
[for (attribute : Attribute | entity.attributes)]
	[if (attribute.isRequired)]
        '[attribute.modelPropertyName()/]' => [attribute.fakeValue()/],
	[/if]
[/for]
    [']'/];
}
[/template]

[template private fakeValue(attribute : Attribute) post(trim())]
[if (attribute.isBooleanFeature)]
self::faker()->boolean()
[elseif (attribute.isDateFeature)]
new \DateTimeImmutable(self::faker()->iso8601('+2 years'))
[elseif (attribute.isEmailFeature)]
self::faker()->email()
[elseif (attribute.isEnumerationFeature)]
self::faker()->randomNumber()
[elseif (attribute.isFloatFeature)]
self::faker()->randomFloat()
[elseif (attribute.isIntegerFeature)]
self::faker()->randomNumber()
[elseif (attribute.isLocationFeature)]
[elseif (attribute.isResourceFeature)]
[elseif (attribute.isStringFeature)]
self::faker()->text()
[elseif (attribute.isTextareaFeature)]
self::faker()->paragraph()
[elseif (attribute.isUrlFeature)]
self::faker()->url()
[else]
self::faker()->text()
[/if]
[/template]

[template private initializeMethod(entity : Entity) post(trim())]
protected static function initialize(): self
{
    return $this;
}
[/template]

[template private classMethod(entity : Entity) post(trim())]
/**
 * @link ModelFactory
 */
protected static function getClass(): string
{
    return [entity.modelClassName()/]::class;
}
[/template]