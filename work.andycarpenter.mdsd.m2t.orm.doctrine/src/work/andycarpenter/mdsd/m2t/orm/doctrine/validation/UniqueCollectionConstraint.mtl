[comment encoding = UTF-8 /]
[module UniqueCollectionConstraint(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::files/]
[import work::andycarpenter::mdsd::m2t::orm::doctrine::names/]


[template public uniqueCollectionConstraint(ormModel : OrmModel)]
[file(ormModel.collectionUniqueFilename(), false)]
<?php
namespace [ormModel.validatorNamespace()/];

use Symfony\Component\Validator\Attribute\HasNamedArguments;
use Symfony\Component\Validator\Constraint;


#['['/]\Attribute[']'/]
class [ormModel.collectionUniqueClassName()/] extends Constraint
{
    public string $message = 'Entry already exists in the collection "{{ collection }}".';
 
    /**
      * @var array<int, string> $fields
      **/
    public array $fields;

    /**
      * @var string $parentProperty
      **/
    public string $parentProperty;

     /**
      * @var string $collectionProperty
      **/
   public string $collectionProperty;


    /**
      * @param array<int, string> $fields
      * @param string $parentProperty
      * @param string collectionProperty
      * @param array<int, string>|null $groups
      * @param mixed|null $payload
      **/
    #['['/]HasNamedArguments[']'/]
    public function __construct(array $fields, string $parentProperty, string $collectionProperty, array $groups = null, mixed $payload = null)
    {
        parent::__construct(['['/][']'/], $groups, $payload);
        $this->fields = $fields;
        $this->parentProperty = $parentProperty;
        $this->collectionProperty = $collectionProperty;
    }

    /**
     * Returns whether the constraint can be put onto classes, properties or
     * both.
     *
     * This method should return one or more of the constants
     * Constraint::CLASS_CONSTRAINT and Constraint::PROPERTY_CONSTRAINT.
     *
     * @return string|string['['/][']'/] One or more constant values
     */
    public function getTargets(): string
    {
        return self::CLASS_CONSTRAINT;
    }
}
[/file]
[/template]