[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://andycarpenter.work/metamodel/base',
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping')]


[query public snakeCase(string : String) : String
	= string.toLowerFirst().replaceAll('([A-Z]+)', '_$1').toLower()
/]


[query public appName(eObject : EObject) : String
	= 'App'
/]

[query public appValidation(eObject : EObject) : String
	= eObject.appName().concat('Valadation')
/]


[query public baseRepositoryClassName(eObject : EObject) : String
	= 'ServiceEntityRepository'
/]

[query public factoryClassSuffix(eObject : EObject) : String
	= 'Factory'
/]

[query public fixtureClassSuffix(eObject : EObject) : String
	= 'Fixture'
/]

[query public testClassSuffix(eObject : EObject) : String
	= 'Test'
/]

[query public validatorClassSuffix(model : OrmModel) : String
	= 'Validator'
/]


[query public instanceName(element : NamedElement) : String
	= element.name.toLowerFirst()
/]


[query public modelClassName(type : EnumerationType) : String
	= type.name
/]


[query public factoryClassName(entity : Entity) : String
	= entity.modelClassName().concat(entity.factoryClassSuffix())
/]

[query public fixtureClassName(entity : Entity) : String
	= entity.modelClassName().concat(entity.fixtureClassSuffix())
/]

[query public findMethodName(entity : Entity) : String
	= 'findOne'
/]

[query public modelClassName(entity : Entity) : String
	= entity.name
/]

[query public modelTestClassName(entity : Entity) : String
	= entity.modelClassName().concat(entity.testClassSuffix())
/]

[query public routeName(entity : Entity) : String
	= entity.name.toLowerFirst()
/]

[query public selectName(entity : Entity) : String
	= entity.name.toLowerFirst()
/]


[query public normalizerClassName(entity : Entity) : String
	= entity.name.concat('Normalizer')
/]


[query public addMethodName(feature : Feature) : String
	= 'add'.concat(feature.singletonName.toUpperFirst())
/]

[query private booleanPrefix(attribute : Attribute) : String
	= if attribute.booleanIsHasChoice = IsHasChoices::isA then
			'is'
		else
			'has'
		endif
/]

[query public detailsPropertyName(feature : ResourceFeature) : String
	= feature.modelPropertyName().concat('Details')
/]

[query public filePropertyName(feature : ResourceFeature) : String
	= feature.modelPropertyName().concat('File')
/]

[query public getMethodName(feature : Feature) : String
	= let prefix : String
		= if feature.isAttributeFeature and feature.isBooleanFeature then
				feature.oclAsType(Attribute).booleanPrefix()
			else
				'get'
			endif
		in prefix.concat(feature.modelPropertyName().toUpperFirst())
/]

[query public getDetailsMethodName(feature : ResourceFeature) : String
	= 'get'.concat(feature.detailsPropertyName().toUpperFirst())
/]

[query public getFileMethodName(feature : ResourceFeature) : String
	= 'get'.concat(feature.filePropertyName().toUpperFirst())
/]

[query public getNameMethodName(feature : ResourceFeature) : String
	= 'get'.concat(feature.namePropertyName().toUpperFirst())
/]

[query public featureInstanceName(feature : Feature) : String
	= feature.modelPropertyName()
/]

[query public mappingName(feature : ResourceFeature) : String
	= if feature.partOf.resourceFeatures->size() > 1 then
			feature.partOf.instanceName().concat('_').concat(feature.featureInstanceName())
		else
			feature.partOf.instanceName().snakeCase()
		endif
/]

[query public modelClassName(association : Association) : String
	= association.targetType.modelClassName()
/]

[query public modelPropertyName(feature : Feature) : String
	= feature.name
/]

[query public namePropertyName(feature : ResourceFeature) : String
	= feature.modelPropertyName().concat('Name')
/]

[query public removeMethodName(feature : Feature) : String
	= 'remove'.concat(feature.singletonName.toUpperFirst())
/]

[query public setMethodName(feature : Feature) : String
	= 'set'.concat(feature.modelPropertyName().toUpperFirst())
/]

[query public setDetailsMethodName(feature : ResourceFeature) : String
	= 'set'.concat(feature.detailsPropertyName().toUpperFirst())
/]

[query public setFileMethodName(feature : ResourceFeature) : String
	= 'set'.concat(feature.filePropertyName().toUpperFirst())
/]

[query public setNameMethodName(feature : ResourceFeature) : String
	= 'set'.concat(feature.namePropertyName().toUpperFirst())
/]


[query public collectionUniqueClassName(eObject : EObject) : String
	= 'CollectionUnique'
/]

[query public collectionUniqueValidatorClassName(ormModel : OrmModel) : String
	= ormModel.collectionUniqueClassName().concat(ormModel.validatorClassSuffix())
/]


[query public repositoryInstanceName(repository : Repository) : String
	= repository.repositoryClassName().toLowerFirst()
/]

[query public repositoryClassName(repository : Repository) : String
	= repository.name.concat('Repository')
/]

[query public repositoryTestClassName(repository : Repository) : String
	= repository.repositoryClassName().concat(repository.testClassSuffix())
/]


[query public className(container : ConstantContainer) : String
	= if container.oclIsTypeOf(Repository) then
			container.oclAsType(Repository).repositoryClassName()
		else
			'Unknown'
		endif
/]


[query public alias(field : Feature, selection : Selection) : String
	= if selection.oclIsUndefined() then
			null
		else
			let fieldNames : Sequence(String)
				= selection.fields->collect(f | f.modelPropertyName())
				in if fieldNames->select(n | n = field.modelPropertyName())->size() > 1 then
						field.partOf.oclAsType(Entity).selectName().concat(field.name.toUpperFirst())
					else
						null
					endif
		endif
/]

[query public builderMethodName(association : Association) : String
	= association.name.concat('Builder')
/]

[query public childSelectionName(association : Association, selection : Selection) : String
	= association.name.concat(selection.instanceName().toUpperFirst())
/]

[query public findMethodName(association : Association, selection : Selection) : String
	= 'find'.concat(association.name.toUpperFirst()).concat(selection.name.toUpperFirst())
/]

[query public parametersMethodName(association : Association) : String
	= association.name.concat('Parameters')
/]

[query public selectName(association : Association, repository : Repository) : String
	= let entity : Entity
		= if repository.serves.features->includes(association) then
				association.targetType
			else
				association.sourceType
			endif
		in entity.selectName()
/]


[query public builderMethodName(selection : Selection) : String
	= selection.instanceName().concat('Builder')
/]

[query public criteriaMethodName(selection : Selection) : String
	= selection.instanceName().concat('Criteria')
/]

[query public instanceName(selection : Selection) : String
	= selection.name.toLowerFirst()
/]

[query public methodQueryName(selection : Selection) : String
	= selection.methodName.concat('Query')
/]

[query public parametersMethodName(selection : Selection) : String
	= selection.instanceName().concat('Parameters')
/]


[query public methodQueryName(filter : Filter) : String
	= filter.methodName.concat('Query')
/]