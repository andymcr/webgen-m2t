[comment encoding = UTF-8 /]
[module entity(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]

[template public generateModel(service : Service, authentication : Authentication)]
[file(service.modelFilename(), false)]
<?php
namespace [service.modelsNamespace()/];

use Doctrine\ORM\Mapping as ORM;
[if (service.hasCollectionAssociations())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]

/**
 * @ORM\Entity
 * @ORM\Table(name="[if (service.view = true)][service.viewName/][else][service.tableName()/][/if]")
 **/
class [service.modelClassName()/]
{
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue
	 **/
	protected $[service.keyName()/];

[for (feature : ServiceFeature | service.features)]
	/**
	[if (feature.oclIsKindOf(ServiceEntityElement))]
	 * @ORM\Column(type="[feature.oclAsType(ServiceEntityElement).feature.ormType/]")
	[elseif (feature.oclIsTypeOf(ServiceEntityAssociation))]
	[let association : ServiceEntityAssociation = feature.oclAsType(ServiceEntityAssociation)]
	[let attribute : Association = association.feature]
		[if (attribute.oclIsTypeOf(SingletonAssociation))]
		[let singleton : SingletonAssociation = attribute.oclAsType(SingletonAssociation)]
	 * @ORM\[singleton.associationRelationship/](targetEntity="[association.oppositeService.modelName/]")
		[if (singleton.owningEnd = true)]
     * @ORM\JoinColumn(name="[association.columnName()/]", referencedColumnName="[association.oppositeService.keyName()/]")
		[/if]
		[/let]
		[else]
		[let collection : CollectionAssociation = attribute.oclAsType(CollectionAssociation)]
	 * @ORM\[collection.associationRelationship/](targetEntity="[association.oppositeService.modelName/]"[if (collection.associationRelationship = CollectionAssociationRelationships::OneToMany)], mappedBy="[association.oppositeColumnName()/]"[/if])
		[if (association.isOwningEnd())]
     * @ORM\JoinTable(name="[association.feature.pivotTableName/]",
			joinColumns={@ORM\JoinColumn(name="[feature.oppositeColumnName()/]")},
			inverseJoinColumns={@ORM\JoinColumn(name="[feature.columnName()/]")})
		[/if]
		[/let]
		[/if]
	[/let]
	[/let]
	[/if]
	 **/
	protected $[feature.modelPropertyName()/];

[/for]
[if (service.hasDefaultValueFeatures() or service.hasForcedValueFeatures() or service.hasCollectionAssociations())]
	public function __construct()
	{
	[for (feature : ServiceFeature | service.features)]
		[if (feature.hasDefaultValue())]
		$this->[feature.modelPropertyName()/] = [feature.oclAsType(IncludedElement).defaultValue.generateCriteriaExpression()/];
		[/if]
		[if (feature.hasForcedValue())]
		$this->[feature.modelPropertyName()/] = [feature.oclAsType(IncludedFeature).forcedValue.generateCriteriaExpression()/];
		[/if]
		[if (feature.oclIsTypeOf(ServiceAssociation))]
			[if (feature.oclAsType(ServiceAssociation).isOwningEnd())]
		$this->[feature.modelPropertyName()/] = new ArrayCollection();
			[/if]
		[/if]
	[/for]
	}

[/if]
	public function getId()
	{
		return $id;
	}

[for (feature : ServiceFeature | service.features)]
	public function [if (feature.isBooleanDataType())]is[else]get[/if][feature.modelPropertyName().toUpperFirst()/]()
	{
		return $this->[feature.modelPropertyName()/];
	}

	[if (not feature.hasForcedValue())]
		[if (feature.oclIsKindOf(ServiceEntityElement))]
	public function set[feature.modelPropertyName().toUpperFirst()/]($[feature.instanceName()/]) {
//				array('trim'),
		[if (feature.oclIsKindOf(ServiceEntityElement))]
		[let element : ServiceEntityElement = feature.oclAsType(ServiceEntityElement)]
			[if (element.feature.oclIsTypeOf(SingletonElement))]
				[if (element.isCaseInsensitive())]
		$this->[feature.modelPropertyName()/] = strtolower(trim($[feature.instanceName()/]));
				[elseif (element.isEncrypted())]
//				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
				[else]
		$this->[feature.modelPropertyName()/] = trim($[feature.instanceName()/]);
				[/if]
			[elseif (element.feature.oclIsTypeOf(SingletonDate))]
		if (trim($[feature.instanceName()/]) == FALSE) {
			$this->[feature.modelPropertyName()/] = NULL;
		} else {
		}
			[/if]
		[/let]
		[/if]
	}

		[else]
	public function add[feature.modelPropertyName().toUpperFirst()/]($[feature.modelPropertyName()/])
	{
	}

		[/if]
	[/if]
[/for]
[for (label : ModelLabel | service.displayLabels)]
	public function [label.name/]()
	{
		return sprintf('[label.format/]', [for (feature : ModelLabelFeature | label.features) separator(', ')]
$this->[if (feature.oclIsTypeOf(ModelLabelElement))]
[feature.oclAsType(ModelLabelElement).serviceFeature.modelPropertyName()/][else]
[let association : ModelLabelAssociation = feature.oclAsType(ModelLabelAssociation)]
[association.serviceFeature.modelPropertyName()/]->[if (association.dynamicLabel.oclIsUndefined())]defaultLabel()[else][association.dynamicLabel.name/]()[/if][/let]
[/if][/for]);
	}

[/for]
[if (service.hasValidatedFeatures())]
[let userService : Service
	= if authentication.oclIsUndefined() then
			null
		else if not authentication.oclIsTypeOf(LocalAuthenticationSystem) then
			null
		else
			authentication.oclAsType(LocalAuthenticationSystem).userService
	endif endif]
	[if (service = userService)]
	protected $_validation_required = TRUE;

	public function validation_required($required = TRUE)
	{
		if ($required === NULL)
			return $this->_validation_required;

 		$this->_validation_required = (bool)$required;
		return $this;
	}

	[/if]
	[if (service.accessedBy->select(u | u.oclIsTypeOf(ActionUnit))->notEmpty())]
	protected $_control_fields = array();

	public function control_fields($control_fields)
	{
		$this->_control_fields = $control_fields;
	}

	[/if]
	public function rules()
	{
	[if (service = userService)]
		if ($this->validation_required(NULL)) 
			return array(
		[for (feature : ServiceEntityFeature | service.validatedFeatures())]
				'[feature.modelPropertyName()/]' => array(
			[if (feature.isRequired())]
					array('not_empty'),
			[/if]
				),
		[/for]
			);
		else
			return array();
	[else]
		[if (service.accessedBy->select(u | u.oclIsTypeOf(ActionUnit))->isEmpty())]
		return array(
			[for (feature : ServiceEntityFeature | service.validatedFeatures())]
			'[feature.modelPropertyName()/]' => array(
				[if (feature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		[else]
		$rules = array(
			[for (feature : ServiceEntityFeature | service.validatedFeatures())]
			'[feature.modelPropertyName()/]' => array(
				[if (feature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		return empty($this->_control_fields) ? $rules : array_intersect_key($rules, $this->_control_fields);
		[/if]
	[/if]
	}

[/let]
[/if]
[for (feature : ServiceEntityElement | service.resourceAttributes())]
[let resource : SingletonResource = feature.feature.oclAsType(SingletonResource)]
	private function _save_[feature.modelPropertyName()/]()
	{
		$validation = Validation::factory($_FILES);
		$validation
			->rules('[feature.modelPropertyName()/]', array(
[if (feature.isRequired())]
				array('not_empty'),
				array('Upload::not_empty'),
[/if]
				array('Upload::valid'),
				array('Upload::size', array(':value', [resource.maximumUploadSize/])),
[if (resource.validUploadExtensions->notEmpty())]
				array('Upload::type', array(':value', array([for (extension : String | resource.validUploadExtensions) separator(', ')]'[extension/]'[/for]))),
[/if]
			));
		if ($validation->check() === FALSE)
			throw new ORM_Validation_Exception($this->errors_filename(), $validation);

		if ($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
			return;

		if (!empty($this->[resource.columnName/])) 
			$filename = str_replace(' ', '_', pathinfo($this->[resource.columnName/], PATHINFO_FILENAME));
		else
			$filename = str_replace(' ', '_', pathinfo($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_FILENAME));
		$extension = pathinfo($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[if (resource.uploadsWithinWebsite = true)]
		$filepath = Upload::save($_FILES['['/]'[feature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . '[resource.relativeUploadDirectory/]');
		$this->[feature.columnName()/] = '[resource.relativeUploadDirectory/]/' . $filename . '.' . $extension;
[else]
		$filepath = Upload::save($_FILES['['/]'[feature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[/if]
	}

[/let]
[/for]
[if (service.hasResourceAttributes())]
/*	public function save(Validation $validation = NULL)
	{
[for (feature : ServiceEntityFeature | service.resourceAttributes())]
		$this->_save_[feature.modelPropertyName()/]();
[/for]
		parent::save($validation);
	}
*/
[/if]
[if (if authentication.oclIsUndefined() then false else authentication.oclIsTypeOf(LocalAuthenticationSystem) endif)]
[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
	[if (service = localAuthentication.authenticationService)]
	public function record_last_login()
	{
		$this->last_ip = Request::$client_ip;
		$this->last_login = date('Y-m-d H:i:s');
		$this->update();
	}

	[/if]
	[if (service = localAuthentication.userService)]
	public static function authenticated_user($authentication)
	{
		$user = ORM::factory('[service.modelName/]');
		$user->where('[localAuthentication.userAuthenticationKey.columnName()/]', '=', $authentication->email);
		return $user->find();
	}

// this is something to do with registring
	public function authentication_save()
	{
		[for (feature : ServiceFeature | service.features->select(f | f.isRequired()))]
		if (!isset($this->[feature.modelPropertyName()/])) {
			$this->[feature.modelPropertyName()/] = '';
		}
		[/for]

		return $this->save();
	}

	[/if]
	[if (if localAuthentication.loginAttemptService.oclIsUndefined() then false else service = localAuthentication.loginAttemptService endif)]
	public static function record_attempt($login_id)
	{
		try
		{
			$login_attempt = ORM::factory('[service.modelName/]');
			$login_attempt->login_id = $login_id;
			$login_attempt->ip_address = Request::$client_ip;
			$login_attempt->time = date('Y-m-d H:i:s');
			$login_attempt->save();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording login attempt: :exception', array(
				'exception' => $e->getMessage()
			));
		}
	}

	public static function attempts_exceeded($login_id, $maximum_attempts, $expiry_period)
	{
		$login_attempt = ORM::factory('[service.modelName/]');
		$login_attempt->where_open();
		$login_attempt->where('login_id', '=', $login_id);
		$login_attempt->or_where('ip_address', '=', Request::$client_ip);
		$login_attempt->where_close();
		if ($expiry_period > 0) {
			$login_attempt->where(new Database_Expression('UNIX_TIMESTAMP(time)'), '>', time() - $expiry_period);
		}
		return $login_attempt->count_all() >= $maximum_attempts;
	}

	public static function clear_attempts($login_id, $expiry_period)
	{
		try
		{
			$login_attempt = ORM::factory('[service.modelName/]');
			$login_attempt->where_open();
			$login_attempt->where('login_id', '=', $login_id);
			$login_attempt->where('ip_address', '=', Request::$client_ip);
			$login_attempt->where_close();
			if ($expiry_period > 0)
			{
				$login_attempt->or_where(new Database_Expression('UNIX_TIMESTAMP(time)'), '<', time() - $expiry_period);
			}
			foreach ($login_attempt->find_all() AS $attempt)
			{
				$attempt->delete();
			}
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem clearing login attempts: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
	[if (if localAuthentication.autoLoginService.oclIsUndefined() then false else service = localAuthentication.autoLoginService endif)]
	public static function create_token($key, $authentication, $user_agent)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->key = $key;
			$autologin->user_agent = $user_agent;
			$autologin->last_ip_address = Request::$client_ip;
			$autologin->last_login = date('Y-m-d H:i:s');
			$autologin->authentication_id = $authentication->[localAuthentication.authenticationService.keyName()/];
			$autologin->save();

			return $autologin;
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem saving autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			if ($e instanceof ORM_Validation_Exception)
				Log::instance()->add(Log::ERROR, 'Validation errors :errors', array(
					':errors' => print_r($e->errors(''), TRUE)
				));
			return ORM::factory('[service.modelName/]');
		}
	}

	public static function load_token($cookie, $user_agent, $lifetime)
	{
		try
		{
			$data = unserialize($cookie);
			if (!array_key_exists('user_id', $data) OR !array_key_exists('key', $data))
				return FALSE;
	
			$login_id = $data['['/]'user_id'[']'/];
			$key = $data['['/]'key'[']'/];
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->where('key', '=', $key)
				->where('user_agent', '=', $user_agent)
				// checking time means that reducing lifetime has immediate effect
				->where(new Database_Expression('UNIX_TIMESTAMP(autologin.last_login)'), '>', time() - $lifetime);
			$autologin->join('[localAuthentication.authenticationService.tableName()/]')
				->on('authentication_id', '=', '[localAuthentication.authenticationService.tableName()/].[localAuthentication.authenticationService.keyName()/]')
				->where('[localAuthentication.authenticationService.tableName()/].[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
			return $autologin->find();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem loading autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public function record_last_login()
	{
		try
		{
			$this->last_ip_address = Request::$client_ip;
			$this->last_login = date('Y-m-d H:i:s');
			$this->update();
			}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording autologin: :exception', array(
				':exception' => $e->getMessage()
			));
		}
}

	public static function delete_user($login_id)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->join('[localAuthentication.authenticationService.tableName()/]')
				->on('authentication_id', '=', '[localAuthentication.authenticationService.tableName()/].[localAuthentication.authenticationService.keyName()/]')
				->where('[localAuthentication.authenticationService.tableName()/].[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting user\'s autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public static function delete_expired($lifetime)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->where(new Database_Expression('UNIX_TIMESTAMP(last_login)'), '<', time() - $lifetime);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting expired autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
[/let]
[/if]
}
[/file]
[/template]
