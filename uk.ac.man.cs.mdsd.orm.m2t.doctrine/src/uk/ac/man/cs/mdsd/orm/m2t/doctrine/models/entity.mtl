[comment encoding = UTF-8 /]
[module entity(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::criteria/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]

[template public model(entityOrView : EntityOrView)]
[file(entityOrView.modelFilename(), false)]
<?php
namespace [entityOrView.modelsNamespace()/];

[entityOrView.useStatements()/]


/**
 * @ORM\Entity
 * @ORM\Table(name="[entityOrView.tableName/]")
[if (entityOrView.serializationExcludeAll)]
 * @ExclusionPolicy("all")
[/if]
 **/
class [entityOrView.modelClassName()/][if (entityOrView.implementsUserInterface)] implements UserInterface[/if]
{
[if (not entityOrView.hasPrimaryKeys())]
    [entityOrView.autoIdFeature()/]

[/if]
    [entityOrView.features()/]

[if (entityOrView.oclIsTypeOf(Entity) and (entityOrView.partOf.timestampCreation or entityOrView.partOf.timestampUpdates))]
    [entityOrView.timestampFeatures()/]

[/if]
[if (entityOrView.hasDefaultValueFeatures() or entityOrView.hasCollectionAssociations()or entityOrView.implementsUserInterface)]
    [entityOrView.constructor()/]

[/if]
[if (not entityOrView.hasPrimaryKeys())]
    [entityOrView.idMethods()/]

[/if]
[for (feature : Feature | entityOrView.features)]
    [feature->select(f | not f.isPseudo()).featureMethods()/]

[/for]
[if (entityOrView.oclIsTypeOf(Entity) and (entityOrView.partOf.timestampCreation or entityOrView.partOf.timestampUpdates))]
    [entityOrView.timestampMethods()/]

[/if]
[if (entityOrView.implementsUserInterface)]
    [entityOrView.userInterfaceMethods()/]

[/if]
[for (label : ModelLabel | entityOrView.labels)]
    [label.label()/]

[/for]
[for (resource : SingletonResource | entityOrView.resourceAttributes())]
	[resource.resourceSaveMethod()/]

[/for]
[if (entityOrView.hasResourceAttributes())]
/*	public function save(Validation $validation = NULL)
	{
[for (feature : SingletonResource | entityOrView.resourceAttributes())]
		$this->_save_[feature.modelPropertyName()/]();
[/for]
		parent::save($validation);
	}
*/
[/if]
}
[/file]
[/template]

[template private useStatements(entityOrView : EntityOrView) post(trim())]
use Doctrine\ORM\Mapping as ORM;
[if (entityOrView.collectionAssociations()->select(c | c.isOwningEnd())->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (entityOrView.partOf.timestampCreation or entityOrView.partOf.timestampUpdates)]
use Gedmo\Mapping\Annotation as Gedmo;
[/if]
[if (entityOrView.serializationExcludeAll)]
use JMS\Serializer\Annotation\ExclusionPolicy;
[/if]
[if (entityOrView.features->select(f | f.serializationExpose)->notEmpty())]
use JMS\Serializer\Annotation\Expose;
[/if]
[if (entityOrView.features->select(f | f.serializationGroups->notEmpty())->notEmpty())]
use JMS\Serializer\Annotation\Groups;
[/if]
[if (entityOrView.features->select(f | f.oclIsKindOf(Association)).oclAsType(Association)->select(a | a.serializationMaxDepth > 0)->notEmpty())]
use JMS\Serializer\Annotation\MaxDepth;
[/if]
[if (entityOrView.implementsUserInterface)]
use Symfony\Component\Security\Core\User\UserInterface;
[/if]
use Symfony\Component\Validator\Constraints as Assert;
[/template]

[template private autoIdFeature(entityOrView : EntityOrView) post(trim())]
/**
 * @ORM\Id
 * @ORM\Column(type="[entityOrView.autoKeyPersistentType/]")
 * @ORM\GeneratedValue[if (not entityOrView.autoKeyGenerationStrategy.oclIsUndefined())](strategy="[entityOrView.autoKeyGenerationStrategy/]")[/if]
 **/
protected $[entityOrView.autoKeyName/];
[/template]

[template private features(entityOrView : EntityOrView) post(trim())]
[for (feature : Feature | entityOrView.features->select(f | f.isVisible() or f.isOwningEnd())->select(f | not f.isPseudo()))]
[comment TODO sortout location features /]
	[if (not feature.isLocation())]
/**
  [feature.ormAnnotation()/]
	[if (feature.isValidated())]
  [feature.validationAnnotation()/]
	[/if]
	[if (feature.hasSerializationControl())]
  [feature.serializationAnnotation()/]
	[/if]
  **/
	[if (feature.oclIsKindOf(Attribute))]
protected $[feature.columnName()/];
	[else]
protected $[feature.modelPropertyName()/];
	[/if]

	[/if]
[/for]
[/template]

[template private timestampFeatures(entityOrView : EntityOrView) post(trim())]
[if (entityOrView.partOf.timestampCreation)]
/**
 * @ORM\Column(type="datetime")
 * @Gedmo\Timestampable(on="create")
 **/
protected $created;

[/if]
[if (entityOrView.partOf.timestampUpdates)]
/**
 * @ORM\Column(type="datetime", nullable=true)
 * @Gedmo\Timestampable(on="update")
 **/
protected $updated;
[/if]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(ViewFeature)) post(trim())]
[if (feature.oclIsTypeOf(EncapsulatedAttribute))]
[feature.oclAsType(EncapsulatedAttribute).attribute.ormAnnotation()/]
[elseif (feature.oclIsKindOf(EncapsulatedAssociation))]
[comment feature.oclAsType(EncapsulatedAssociation).association.ormAnnotation()/]
[/if]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(EntityAttribute)) post(trim())]
[let attribute : EntityAttribute =feature.oclAsType(EntityAttribute)]
[if (attribute.primaryKey)]
* @ORM\Id
[/if]
* @ORM\Column(type="[attribute.ormType/]"[if (not feature.isRequired())], nullable=true[/if])
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(EntityAssociation)) post(trim())]
[let association : EntityAssociation = feature.oclAsType(EntityAssociation)]
[let opposite : EntityAssociation = association.opposite]
	[if (association.oclIsTypeOf(SingletonAssociation))]
	[let singleton : SingletonAssociation = association.oclAsType(SingletonAssociation)]
		[if (singleton.primaryKey)]
* @ORM\Id
		[/if]
* @ORM\[singleton.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (singleton.isOwningEnd())]
inversedBy[else]
mappedBy[/if]="[opposite.modelPropertyName()/]"[/if])
		[if (singleton.isOwningEnd())]
			[if (singleton.opposite.keys->size() = 1)]
			[let key : AssociationKey = singleton.opposite.keys->first()]
* @ORM\JoinColumn(name="[key.targetFeature.columnName/]", referencedColumnName="[key.sourceFeature.columnName.toLowerCase()/]", nullable=false)
			[/let]
			[elseif (singleton.opposite.keys->size() > 1)]
* @ORM\JoinColumns({[for (key : AssociationKey | singleton.opposite.keys) separator(',')]

*     @ORM\JoinColumn(name="[key.targetFeature.columnName/]", referencedColumnName="[key.sourceFeature.columnName.toLowerCase()/]", nullable=false)[/for]

* })
			[elseif (singleton.opposite.partOf.primaryKeys()->size() = 1)]
			[let key : EntityFeature = singleton.opposite.partOf.primaryKeys()->first()]
* @ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)
			[/let]
			[elseif (singleton.opposite.partOf.primaryKeys()->size() > 1)]
* @ORM\JoinColumns({[for (key : EntityFeature | singleton.opposite.partOf.primaryKeys()) separator(',')]

*     @ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)[/for]

* })
			[else]
* @ORM\JoinColumn(name="[association.columnName/]", referencedColumnName="[opposite.partOf.oclAsType(Entity).autoKeyName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
			[/if]
		[/if]
	[/let]
	[else]
	[let collection : CollectionAssociation = association.oclAsType(CollectionAssociation)]
* @ORM\[collection.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (collection.associationRelationship = CollectionAssociationRelationships::OneToMany or not association.isOwningEnd())]
mappedBy[else]
inversedBy[/if]="[opposite.modelPropertyName()/]"[/if])
		[if (association.owningEnd)]
* @ORM\JoinTable(name="[association.pivotTableName/]",
    joinColumns={@ORM\JoinColumn(name="[opposite.columnName/]")},
    inverseJoinColumns={@ORM\JoinColumn(name="[association.columnName()/]")})
		[/if]
	[/let]
	[/if]
[/let]
[/let]
[/template]

[template private validationAnnotation(feature : Feature) post(trim())]
[if (feature.isRequired())]
	[if (feature.oclIsKindOf(Attribute))]
* @Assert\NotBlank
	[else]
* @Assert\NotNull
	[/if]
[/if]
[if (feature.isUnique())]
* Unique
[/if]
[/template]

[template private serializationAnnotation(feature : Feature) post(trim())]
[if (feature.serializationExpose)]
* @Expose
[/if]
[if (feature.serializationGroups->notEmpty())]
* @Groups([for (group : String | feature.serializationGroups) separator(', ')]"[group/]"[/for])
[/if]
[if (feature.oclIsKindOf(Association))]
[let association : Association = feature.oclAsType(Association)]
	[if (association.serializationMaxDepth > 0)]
* @MaxDepth([association.serializationMaxDepth/])
	[/if]
[/let]
[/if]
[/template]

[template private constructor(entityOrView : EntityOrView) post(trim())]
public function __construct()
{
[for (feature : Feature | entityOrView.features)]
	[if (feature.hasDefaultValue())]
    $this->[feature.modelPropertyName()/] = [feature.defaultValue().valueExpression()/];
	[/if]
	[if (feature.oclIsTypeOf(CollectionAttribute))]
    $this->[feature.modelPropertyName()/] = Array();
	[/if]
	[if (feature.oclIsTypeOf(CollectionAssociation))]
		[if (feature.oclAsType(CollectionAssociation).owningEnd)]
    $this->[feature.modelPropertyName()/] = new ArrayCollection();
		[/if]
	[/if]
[/for]
}
[/template]

[template private encoderSelectionMethod(entityOrView : EntityOrView) post(trim())]
public function getEncoderName()
{
    if ($this->created < new \DateTime('2016-01-01 00:00'))
        return 'legacy_encoder';

    return null;
}
[/template]

[template private idMethods(entityOrView : EntityOrView) post(trim())]
public function getId()
{
    return $this->[entityOrView.autoKeyName/];
}
[/template]

[template private featureMethods(feature : Feature) post(trim())]
[feature.getMethod()/]

[if (feature.isSingleton())]
[feature.setMethod()/]

[else]
	[if (feature.oclIsKindOf(EntityFeature))]
	[let feature2 : EntityFeature = feature.oclAsType(EntityFeature)]
		[if (feature2.collectionAllowAdd)]
[feature.addMethod()/]

		[/if]
		[if (feature2.collectionAllowRemove)]
[feature.removeMethod()/]

		[/if]
	[/let]
	[/if]
[/if]
[/template]

[template private getMethod(feature : Feature) post(trim())]
public function [feature.getMethodName()/]()
{
[if (feature.oclIsKindOf(Attribute))]
    return $this->[feature.columnName()/];
[else]
    return $this->[feature.modelPropertyName()/];
[/if]
}
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(SingletonAttribute)) post(trim())]
[let attribute : SingletonAttribute = feature.oclAsType(SingletonAttribute)]
public function set[attribute.modelPropertyName().toUpperFirst()/]($[attribute.instanceName()/])
{
[if (attribute.oclIsTypeOf(SingletonElement))]
[let element : SingletonElement = attribute.oclAsType(SingletonElement)]
	[if (element.caseInsensitive)]
    $this->[element.columnName()/] = strtolower(trim($[element.instanceName()/]));
	[elseif (element.encrypt)]
//				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
	[elseif (element.isEnumerationType() or element.dataType.name = 'Boolean')]
    $this->[element.columnName()/] = $[element.instanceName()/];
	[else]
    $this->[element.columnName()/] = trim($[element.instanceName()/]);
	[/if]
[/let]
[elseif (attribute.oclIsTypeOf(SingletonDate))]
    $this->[attribute.columnName()/] = $[attribute.instanceName()/];
[/if]
}
[/let]
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(Association)) post(trim())]
[let association : Association = feature.oclAsType(Association)]
public function set[association.modelPropertyName().toUpperFirst()/]($[association.instanceName()/])
{
    $this->[association.modelPropertyName()/] = $[association.instanceName()/];
}
[/let]
[/template]

[template private addMethod(feature : Feature)
	? (feature.oclIsKindOf(Attribute)) post(trim())]
public function add[feature.modelPropertyName().toUpperFirst()/]($[feature.instanceName()/])
{
[if (feature.isUnique())]
    if (!in_array($[feature.instanceName()/], $this->[feature.columnName()/], true)) {
        $this->[feature.columnName()/]['['/][']'/] = $[feature.instanceName()/];
    }
[else]
    $this->[feature.columnName()/]['['/][']'/] = $[feature.instanceName()/];
[/if]
}
[/template]

[template private addMethod(feature : Feature) post(trim())]
public function add[feature.modelPropertyName().toUpperFirst()/]($[feature.instanceName()/])
{
[if (feature.isUnique())]
    if (!in_array($[feature.instanceName()/], $this->[feature.modelPropertyName()/], true)) {
        $this->[feature.modelPropertyName()/]->add($[feature.instanceName()/]);
    }
[else]
    $this->[feature.modelPropertyName()/]->add($[feature.instanceName()/]);
[/if]
}
[/template]

[template private removeMethod(feature : Feature) post(trim())]
public function remove[feature.modelPropertyName().toUpperFirst()/]($[feature.instanceName()/])
{
    $this->[feature.modelPropertyName()/]->removeElement($[feature.instanceName()/]);
}
[/template]

[template private userInterfaceMethods(entityOrView : EntityOrView) post(trim())]
public function getPassword() 
{ 
    return null; 
} 

public function getSalt() 
{ 
    return null; 
} 

public function eraseCredentials() 
{ 
} 
[/template]

[template private timestampMethods(entityOrView : EntityOrView) post(trim())]
[if (entityOrView.partOf.timestampCreation)]
public function getCreated()
{
    return $this->created;
}

[/if]
[if (entityOrView.partOf.timestampUpdates)]
public function getUpdated()
{
    return $this->updated;
}
[/if]
[/template]

[template private label(label : ModelLabel) post(trim())]
public function get[label.name.toUpperFirst()/][if (not label.name.endsWith('Label'))]Label[/if]()
{
    return sprintf('[label.format/]', [for (feature : ModelLabelFeature | label.features) separator(', ')]
$this->[if (feature.oclIsTypeOf(ModelLabelAttribute))]
[let attribute : ModelLabelAttribute = feature.oclAsType(ModelLabelAttribute)]
[attribute.attribute.columnName()/][if (attribute.attribute.isDate())]->format('[attribute.dateFormat/]')[/if][/let][else]
[let association : ModelLabelAssociation = feature.oclAsType(ModelLabelAssociation)]
[association.association.modelPropertyName()/]->get[if (association.dynamicLabel.oclIsUndefined())]Default[else][association.dynamicLabel.name.toUpperFirst()/][/if]Label()[/let]
[/if][/for]);
}
[/template]

[template private resourceSaveMethod(resource : SingletonResource) post(trim())]
private function _save_[resource.modelPropertyName()/]()
{
	$validation = Validation::factory($_FILES);
	$validation
		->rules('[resource.modelPropertyName()/]', array(
[if (resource.isRequired())]
			array('not_empty'),
			array('Upload::not_empty'),
[/if]
			array('Upload::valid'),
			array('Upload::size', array(':value', [comment resource.maximumUploadSize/])),
[comment if (resource.validUploadExtensions->notEmpty())/]
			array('Upload::type', array(':value', array([comment for (extension : String | resource.validUploadExtensions) separator(', ')/]'[comment extension/]'[comment /for/]))),
[comment /if/]
		));
	if ($validation->check() === FALSE)
		throw new ORM_Validation_Exception($this->errors_filename(), $validation);

	if ($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
		return;

	if (!empty($this->[resource.columnName/])) 
		$filename = str_replace(' ', '_', pathinfo($this->[resource.columnName/], PATHINFO_FILENAME));
	else
		$filename = str_replace(' ', '_', pathinfo($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_FILENAME));
	$extension = pathinfo($_FILES['['/]'[resource.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[comment if (resource.uploadsWithinWebsite = true) /]
	$filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . '[comment resource.relativeUploadDirectory/]');
	$this->[resource.columnName()/] = '[comment resource.relativeUploadDirectory/]/' . $filename . '.' . $extension;
[comment else/]
	$filepath = Upload::save($_FILES['['/]'[resource.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[comment /if/]
}
[/template]