[comment encoding = UTF-8 /]
[module normalize(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]


[template public normalizer(entity : EntityOrView)]
[file(entity.normalizerFilename(entity), false)]
<?php
namespace [entity.normalizerNamespace()/];

use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\Serializer\Normalizer\SerializerAwareNormalizer;
use [entity.modelsNamespace()/]\[entity.modelClassName()/];


class [entity.normalizerClassName()/] extends SerializerAwareNormalizer implements NormalizerInterface
{
    public function supportsNormalization($data, $format = NULL)
    {
        return $data instanceof [entity.modelClassName()/];
    }

    public function normalize($object, $format = NULL, array $context = array())
    {
        $data = array();
[for (feature : Feature | entity.features->select(f | f.serializationExpose))]
    	[feature.data('$object')/]
[/for]
    	return $data;
    }
}
[/file]
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAttribute)) post(trim())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = [accessor/]->[feature.getMethodName()/]();
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAssociation) and feature.isSingleton()) post(trim())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = $this->serializer->normalize([accessor/]->[feature.getMethodName()/](), $format, $context);
[/template]

[template private data(feature : Feature, accessor : String)
	? (feature.oclIsKindOf(EntityAssociation) and not feature.isSingleton()) post(trim())]
$data['['/]'[feature.modelPropertyName()/]'[']'/] = array_map(
    function ($object) use ($format, $context) {
                    return $this->serializer->normalize($object, $format, $context);
    },
    [accessor/]->[feature.getMethodName()/]()
);
[/template]