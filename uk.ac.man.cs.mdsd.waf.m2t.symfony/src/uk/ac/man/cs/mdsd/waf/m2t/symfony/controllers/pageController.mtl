[comment encoding = UTF-8 /]
[module pageController(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::authenticationMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::createSitemapMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::actionMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::commandMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::commonMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::controlMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::detailsMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::indexMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::searchMethods/]
[comment import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files::controllers::staticMethods/]


[template public generateController(page : Page)]
[file(page.controllerFilename(), false)]
<?php
namespace [page.controllersNamespace()/];

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

class [page.controllerClassName()/] extends [page.baseControllerClassName()/] {

	/**
	 * @Route("[page.path()/][for (unit : DynamicUnit | page.parameterisedUnits()) separator (', ')]
/{[unit.routeParameterName()/]}[/for]", name="[page.name/]")
	 */
	public function indexAction([for (unit : DynamicUnit | page.parameterisedUnits()) separator (', ')]
$[unit.routeParameterName()/] = NULL[/for])
	{
[for (unit : DynamicUnit | page.dynamicUnits())]
        [unit.generateUnitDisplay()/]
[/for]
        return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', array(
            'title' => '[page.displayLabel()/]',
[for (unit : DynamicUnit | page.dynamicUnits())]
            [unit.generateUnitTemplateParameters()/]
[/for]
        ));
	}

[for (unit : ContentUnit | page.units)]
	[if (unit.hasUnitMethods())]
	[comment unit.generateUnitMethods()/]

	[/if]
[/for]
[if (page.hasSupportActions())]
	[if (page.hasDataSupportActions())]
	public function action_support()
	{
	[for (action : UnitSupportAction | page.dataSupportActions())]
		if ($this->request->post('[action.name/]'))
		{
			/* [protected ('support.'.concat(action.name))]
			 */
			/* [/protected]
			 */
		}
	[/for]
	}

	[/if]
	/* [protected (page.instanceName().concat('.support.'))]
	 */
	/* [/protected]
	 */
[/if]
}
[/file]
[/template]
