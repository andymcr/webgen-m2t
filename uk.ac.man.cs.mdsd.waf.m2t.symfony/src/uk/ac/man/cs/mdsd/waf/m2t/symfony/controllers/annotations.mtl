[comment encoding = UTF-8 /]
[module annotations(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]

[template public securityAnnotation(page : Page) post(trim())]
[if (true)]
[if (page.hasAuthorisationRoles())]
* @Security("[for (role : String | page.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[page.requiresRole()/]")
[/if]
[/if]
[/template]

[template public securityAnnotation(unit : ContentUnit) post(trim())]
[if (true)]
[if (unit.hasAuthorisationRoles())]
* @Security("[for (role : String | unit.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[unit.requiresRole/]")
[/if]
[/if]
[/template]

[template public securityAnnotation(action : InlineAction) post(trim())]
[if (action.hasAuthorisationRoles())]
* @Security("[for (role : String | action.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[action.requiresRole()/]")
[/if]
[/template]

[template public routeAnnotation(page : Page) post(trim())]
[if (page.units->isEmpty())]
* @Route("[page.uriPath()/]", name="[page.routeName()/]")
[else]
[let unit : ContentUnit = page.units->first()]
	[if (unit.oclIsKindOf(CollectionUnit))]
[unit.oclAsType(CollectionUnit).routeAnnotation()/]
	[elseif (unit.oclIsKindOf(ContentUnit))]
[unit.oclAsType(ContentUnit).routeAnnotation()/]
	[/if]
[/let]
[/if]
[/template]

[template public routeAnnotation(unit : CollectionUnit) post(trim())]
[unit.oclAsType(ContentUnit).routeAnnotation(unit.oclAsType(DynamicUnit).routeName(), unit.uriPath())/]
[/template]

[template public routeAnnotation(unit : ContentUnit) post(trim())]
[unit.routeAnnotation(unit.routeName(), unit.uriPath())/]
[/template]

[template public routeAnnotationCreate(unit : EditUnit, routeName : String, suffix : String) post(trim())]
[unit.routeAnnotation(routeName, unit.uriPath(unit.contentType, unit.contentType.parentEntity(), suffix))/]
[/template]

[template public routeAnnotation(unit : CollectionUnit, routeName : String, routingType : EntityOrView, suffix : String) post(trim())]
[unit.oclAsType(ContentUnit).routeAnnotation(routeName, unit.uriPath(routingType, suffix))/]
[/template]

[template public routeAnnotationSupport(unit : DynamicUnit, suffix : String) post(trim())]
[unit.routeAnnotation(unit.supportRouteName(), unit.uriPath(unit.routingType(), unit.uriElement.combinePaths(suffix)))/]
[/template]

[template private routeAnnotation(unit : ContentUnit, routeName : String, uriPath : String) post(trim())]
[if (unit.isHomeUnit() and uriPath <> '')]
* @Route("", name="Home")
[/if]
* @Route("[uriPath/]", name="[routeName/]"[if (unit.hasValidatedRouteParameters(false))]
, requirements={[for (key : Attribute | unit.uriPathValidatedKeys(false)) separator(', ')]"[key.routeParameterName(unit.oclAsType(DynamicUnit).contentType())/]" = "[key.validationPattern/]"[/for]}[/if])
[/template]
