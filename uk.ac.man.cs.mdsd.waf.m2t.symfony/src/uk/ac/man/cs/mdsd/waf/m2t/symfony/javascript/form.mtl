[comment encoding = UTF-8 /]
[module form(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::model/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::javascript/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::form/]


[template public javascriptForm(model : WafModel)]
[file(model.webDirectory().concat('/').concat(model.javascriptFormFilename()), false)]
[model.containerLinks()/]

[model.addLinks()/]

[model.addFormFunctions()/]
[/file]
[/template]

[template private containerLinks(model : WafModel) post(trim())]
[for (field : UnitField | model.formFields()->select(f | f.oclIsKindOf(UnitAttribute) and not f.isSingleton()))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[if (attribute.collectionUiAllowAdd or attribute.collectionUiAllowRemove)]
[attribute.containerLink(attribute.attribute.oclAsType(EntityAttribute).singletonName, model)/]

[/if]
[/let]
[/for]
[for (contains : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
[association.containerLink(association.association.targetType().name, model)/]

[/if]
[/let]
[/for]
[/template]

[template private containerLink(feature : UnitFeature, type : String, model : WafModel) post(trim())]
var $[feature.instanceName()/]Container;
[if (feature.collectionUiAllowAdd)]
var $add[type/]Link = $('<input type="button" name="add[type/]" value="Add [type/]"class="add[if (model.hasJQueryClasses())] [model.jQueryClass()/]"[/if]/>');
var $new[type/]LinkDiv = $('<div></div>').append($add[type/]Link);
[/if]
[/template]

[template private addLinks(model : WafModel) post(trim())]
jQuery(document).ready(function() {
[for (field : UnitField | model.formFields()
		->select(f | (f.isBooleanDataType() or f.isDate() or f.isEnumerationType() or f.isIntegerDataType()) and f.isSingleton()
			or f.oclIsKindOf(UnitAssociation) and not f.isContains())->sortedBy(f | f.feature().name))]
    [field.attachJQueryUI()/]

[/for]
[for (field : UnitField | model.formFields()->select(f | f.oclIsTypeOf(UnitAttribute) and not f.isSingleton()))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[if (attribute.collectionUiAllowAdd or attribute.collectionUiAllowRemove)]
    [attribute.addLink(attribute.attribute.oclAsType(EntityAttribute).singletonName, model)/]

[/if]
[/let]
[/for]
[for (contains : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
    [association.addLink(association.association.targetType().name, model)/]

[/if]
[/let]
[/for]
});
[/template]

[template private addLink(feature : UnitFeature, type : String, model : WafModel) post(trim())]
$[feature.instanceName()/]Container = $('div.[feature.feature().name.asId()/]');
if ($[feature.instanceName()/]Container) {
[if (feature.collectionUiAllowRemove)]
    $[feature.instanceName()/]Container.children('div').each(function() {
        add[type/]RemoveLink($(this));
    });
[/if]
[if (feature.collectionUiAllowAdd)]
    $[feature.instanceName()/]Container.append($new[type/]LinkDiv);
    $[feature.instanceName()/]Container.data('index', $[feature.instanceName()/]Container.find(':input').length);
    $add[type/]Link.on('click', function(e) {
        e.preventDefault();
        add[type/]AddForm($[feature.instanceName()/]Container, $new[type/]LinkDiv);
    });
[/if]
}
[/template]

[template private addFormFunctions(model : WafModel) post(trim())]
[for (field : UnitField | model.formFields()->select(f | f.oclIsTypeOf(UnitAttribute) and not f.isSingleton()))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
	[if (attribute.collectionUiAllowAdd)]
[attribute.addAddFormFunction(attribute.attribute.oclAsType(EntityAttribute).singletonName)/]

	[/if]
	[if (attribute.collectionUiAllowRemove)]
[attribute.addRemoveLinkFunction(attribute.attribute.oclAsType(EntityAttribute).singletonName, model)/]

	[/if]
[/let]
[/for]
[for (field : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
	[if (association.collectionUiAllowAdd)]
[association.addAddFormFunction(association.association.targetType().name)/]

	[/if]
	[if (association.collectionUiAllowRemove)]
[association.addRemoveLinkFunction(association.association.targetType().name, model)/]

	[/if]
[/let]
[/for]
[/template]

[template private addAddFormFunction(feature : UnitFeature, type : String)]
function add[type/]AddForm($container, $newLinkDiv) {
    var prototype = $container.data('prototype');
    var index = $container.data('index');
    var $newForm = $(prototype.replace(/__name__/g, index));
    $container.data('index', index + 1);
    $newLinkDiv.before($newForm);
}
[/template]

[template private addRemoveLinkFunction(feature : UnitFeature, type : String, model : WafModel)]
function add[type/]RemoveLink($[feature.instanceName()/]) {
    var $removeLink = $('<input type="button" name="remove[type/]" value="Delete [type/]"class="delete[if (model.hasJQueryClasses())] [model.jQueryClass()/]"[/if]/>');
    $[feature.instanceName()/].append($removeLink);
    $removeLink.on('click', function(e) {
        e.preventDefault();
        $[feature.instanceName()/].remove();
    });
}
[/template]

[query private id(field : UnitField) : String
	= let unit : DynamicUnit = field.displayedOn
		in let typeClassName : String
			= unit.typeClassName(unit.pageDisplayedOn().partOf)
			in typeClassName.substring(1, typeClassName.size() - 4).asId().concat('_').concat(field.modelPropertyName())
/]

[template private attachJQueryUI(field : UnitField)
	? (field.isIntegerDataType() and field.isSingleton()) post(trim())]
[let dataType : Classifier = field.dataType()]
$("#[field.id()/]").spinner();
[/let]
[/template]

[template private attachJQueryUI(field : UnitField)
	? (field.isBooleanDataType() and field.isSingleton()) post(trim())]
$("#[field.id()/]").checkboxradio();
[/template]

[template private attachJQueryUI(field : UnitField)
	? (field.isEnumerationType() and field.isSingleton()) post(trim())]
$("#[field.id()/]").selectmenu();
[/template]

[template private attachJQueryUI(field : UnitField)
	? (field.isDate() and field.isSingleton()) post(trim())]
[if (field.dateDetails() <> DateDetails::TimeOnly)]
$("#[field.id()/][if (field.dateDetails() = DateDetails::DateAndTime)]_date[/if]").datepicker({
    dateFormat: $.datepicker.ISO_8601
});
[/if]
[if (field.dateDetails() <> DateDetails::DateOnly and false)]
$("#[field.id()/][if (field.dateDetails() = DateDetails::DateAndTime)]_time[/if]").wickedpicker([if (field.dateDetails() = DateDetails::TimeOnly or field.hasDefaultValue())]{
[if (field.hasDefaultValue())]
    now: [field.defaultValue().controllerExpression()/],
[/if]
[if (field.dateDetails() = DateDetails::TimeOnly)]
    twentyFour: true,
[/if]
}[/if]);
[/if]
[/template]

[template private attachJQueryUI(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and not field.isContains() and field.isSingleton()) post(trim())]
if ($("#[field.id()/] option").length < 15) {
	$("#[field.id()/]").selectmenu();
} else {
    $("#[field.id()/]").select2();
}
[/template]

[template private attachJQueryUI(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and not field.isContains() and not field.isSingleton()) post(trim())]
$("#[field.id()/]").select2();
[/template]


[template private attachJQueryUI(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and field.isContains()) post(trim())]
[/template]