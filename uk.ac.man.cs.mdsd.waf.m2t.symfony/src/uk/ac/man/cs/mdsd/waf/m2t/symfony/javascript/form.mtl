[comment encoding = UTF-8 /]
[module form(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::javascript/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::form/]


[template public javascriptForm(model : WafModel)]
[file(model.webDirectory().concat('/').concat(model.javascriptFormFilename()), false)]
[model.containerLinks()/]

[model.addLinks()/]

[model.addFormFunctions()/]

$( function() {
[for (field : UnitField | model.formFields()->sortedBy(f | f.feature().name))]
    [field.javascript()/]

[/for]
} );
[/file]
[/template]

[template private containerLinks(model : WafModel) post(trim())]
[for (contains : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
	[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
	[let target : EntityOrView = association.association.targetType()]
var $[target.instanceName()/]Container;
		[if (association.collectionUiAllowAdd)]
var $add[target.name/]Link = $('<input type="button" name="add[target.name/]" value="Add [target.name/]"[if (model.hasJQueryClasses())] class="[model.jQueryClass()/]"[/if]/>');
var $new[target.name/]LinkDiv = $('<div></div>').append($add[target.name/]Link);
		[/if]
		[if (association.collectionUiAllowRemove)]
var $remove[target.name/]Link = $('<input type="button" name="remove[target.name/]" value="Remove"[if (model.hasJQueryClasses())] class="[model.jQueryClass()/]"[/if]/>');
var $remove[target.name/]LinkDiv = $('<div></div>').append($remove[target.name/]Link);
		[/if]

	[/let]
	[/if]
[/let]
[/for]
[/template]

[template private addLinks(model : WafModel) post(trim())]
jQuery(document).ready(function() {
[for (contains : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
	[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
	[let target : EntityOrView = association.association.targetType()]
    $[target.instanceName()/]Container = $('div.[association.name.asId()/]');
    if ($[target.instanceName()/]Container) {
        $[target.instanceName()/]Container.append($new[target.name/]LinkDiv);
        $[target.instanceName()/]Container.data('index', $[target.instanceName()/]Container.find(':input').length);
        $add[target.name/]Link.on('click', function(e) {
            e.preventDefault();
            add[target.name/]Form($[target.instanceName()/]Container, $new[target.name/]LinkDiv);
        });
    }

	[/let]
	[/if]
[/let]
[/for]
});
[/template]

[template private addFormFunctions(model : WafModel) post(trim())]
[for (contains : UnitField | model.formFields()->select(f | f.isContains()))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
	[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
[association.addFormFunction(association.association.targetType())/]

	[/if]
[/let]
[/for]
[/template]

[template private addFormFunction(association : UnitAssociation, target : EntityOrView)]
function add[target.name/]Form($container, $newLinkDiv) {
    var prototype = $container.data('prototype');
    var index = $container.data('index');
    var $newForm = $(prototype.replace(/__name__/g, index));
    $container.data('index', index + 1);
    $newLinkDiv.before($newForm);
}
[/template]

[query private id(field : UnitField) : String
	= 'app_'.concat(field.feature().partOf.name.asId()).concat('_').concat(field.modelPropertyName())
/]

[template private javascript(field : UnitField)
	? ((field.isDataType() and not field.isBooleanDataType() and not field.isEnumerationType())) post(trim())]
[let dataType : Classifier = field.dataType()]
[if (dataType.name = 'Integer')]
$("#[field.id()/]").spinner();
[/if]
[/let]
[/template]

[template private javascript(field : UnitField)
	? (field.isBooleanDataType()) post(trim())]
$("#[field.id()/]").checkboxradio();
[/template]

[template private javascript(field : UnitField)
	? (field.isEnumerationType()) post(trim())]
$("#[field.id()/]").selectmenu();
[/template]

[template private javascript(field : UnitField)
	? (field.isDate()) post(trim())]
[if (field.dateDetails() <> DateDetails::TimeOnly)]
$("#[field.id()/][if (field.dateDetails() = DateDetails::DateAndTime)]_date[/if]").datepicker({
    dateFormat: $.datepicker.ISO_8601
});
[/if]
[if (field.dateDetails() <> DateDetails::DateOnly and false)]
$("#[field.id()/][if (field.dateDetails() = DateDetails::DateAndTime)]_time[/if]").wickedpicker([if (field.dateDetails() = DateDetails::TimeOnly or field.hasDefaultValue())]{
[if (field.hasDefaultValue())]
    now: [field.defaultValue().controllerExpression()/],
[/if]
[if (field.dateDetails() = DateDetails::TimeOnly)]
    twentyFour: true,
[/if]
}[/if]);
[/if]
[/template]

[template private javascript(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and not field.isContains() and field.isSingleton()) post(trim())]
if ($("#[field.id()/] option").length < 15) {
	$("#[field.id()/]").selectmenu();
} else {
    $("#[field.id()/]").select2();
}
[/template]

[template private javascript(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and not field.isContains() and not field.isSingleton()) post(trim())]
$("#[field.id()/]").select2();
[/template]


[template private javascript(field : UnitField)
	? (field.oclIsKindOf(UnitAssociation) and field.isContains()) post(trim())]
[/template]