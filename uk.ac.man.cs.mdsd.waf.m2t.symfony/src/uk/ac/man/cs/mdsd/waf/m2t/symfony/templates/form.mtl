[comment encoding = UTF-8 /]
[module form(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]


[template public unitContent(unit : ContentUnit, dummy : String, accessor : String, depthIndex : Integer)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.formOpen(accessor)/]
 [editUnit.formFields(accessor)/]
[editUnit.formControlAndClose(accessor)/]
[editUnit.script()/]
[/let]
[/template]

[template private formOpen(unit : DynamicUnit, accessor : String) post(trim())]
{{ form_start([accessor/][if (not unit.contentClass.oclIsUndefined())], { 'attr': {'class': '[unit.contentClass/]'} }[/if]) }}
 {{ form_errors([accessor/]) }}
[/template]

[template private formFields(unit : EditUnit, accessor : String) post(trim())]
[for (field : UnitField | unit.inputFields())]
	[if (field.requiresRole <> '')]
{% if is_granted('[field.requiresRole/]') -%}
	[/if]
[field.formField(unit, accessor)/]
	[if (field.requiresRole <> '')]
{%- endif %}
	[/if]
[/for]
[/template]

[template private formControlAndClose(unit : DynamicUnit, accessor : String) post(trim())]
 <div class="[unit.controlClass/]">
  <input type="submit" name="save" value="[unit.submitLabel()/]"[unit.disable(accessor)/]/>
[if (unit.oclIsKindOf(EditUnit))]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
	[if (editUnit.oclIsTypeOf(CreateUpdateUnit))]
	[let createUpdateUnit : CreateUpdateUnit = editUnit.oclAsType(CreateUpdateUnit)]
		[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
  <input type="reset" name="clear" value="[createUpdateUnit.clearLabel/]"[editUnit.disable(accessor)/]/>
		[/if]
	[/let]
	[/if]
	[if (not editUnit.cancelDestination.oclIsUndefined())]
  <input type="submit" name="cancel" value="[editUnit.cancelLabel/]"[editUnit.disable(accessor)/]/>
	[/if]
[/let]
[/if]
[for (action : UnitSupportAction | unit.unitSupportActions())]
  [action.unitSupportLink()/]
[/for]
 </div>
{{ form_row([accessor/]._token) }}
{{ form_end([accessor/], {'render_rest': false}) }}
[/template]

[template private disable(unit : DynamicUnit, accessor : String) post(trim())]
[let twigAccessor : String = accessor.concat('.vars.data')]
[if (not unit.oclIsKindOf(EditUnit))]
{% if [twigAccessor/].[unit.primaryId()/] is null %} disabled="disabled"{% endif %}
[else]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
	[if (editUnit.disableCondition.oclIsUndefined())]
		[if (editUnit.oclIsTypeOf(UpdateUnit))]
{% if [twigAccessor/].[unit.primaryId()/] is null %} disabled="disabled"{% endif %}
		[/if]
	[else] 
		[if (editUnit.oclIsTypeOf(UpdateUnit))]
{% if [twigAccessor/].[unit.primaryId()/] is null or [editUnit.disableCondition.twigExpression(twigAccessor)/] %} disabled="disabled"{% endif %}
		[else]
{% if [editUnit.disableCondition.twigExpression(twigAccessor)/] %} disabled="disabled"{% endif %}
		[/if]
	[/if]
[/let]
[/if]
[/let]
[/template]

[template private primaryId(unit : DynamicUnit) post(trim())]
[let contentType : EntityOrView = unit.contentType()]
[if (contentType.primaryKeys()->isEmpty())]
[contentType.autoKeyName/]
[else]
[contentType.primaryKeys()->first().modelPropertyName()/]
[/if]
[/let]
[/template]

[template private formField(field : UnitField, unit : DynamicUnit, parentAccessor : String)
	? (field.isSingleton() and not field.isContains()
			or field.oclIsTypeOf(UnitAssociation) and not field.isContains()) post(trim())]
{{ form_row([field.propertyAccessor(parentAccessor, null, true)/][if (field.hasClass() or field.hasPlaceholder() or field.hasTitle() or field.disableInput or field.hasUnitTranslation())]
, {[if (field.hasUnitTranslation())]
 'label': '[unit.containedId()/].labels.[field.id()/]',[/if]
[if (field.hasClass() or field.hasPlaceholder() or field.hasTitle())]
 'attr': {[if (field.hasTitle())]
 'title': [field.title(unit)/][if (field.hasPlaceholder() or field.disableInput or field.hasClass())],[/if][/if]
[if (field.hasPlaceholder())]
 'placeholder': [field.placeholder(unit)/][if (field.disableInput or field.hasClass())],[/if][/if]
[if (field.disableInput)]
 'disabled': 'disabled'[if (field.hasClass())],[/if][/if]
[if (field.hasClass())]
 'class': '[field.inputClass()/]'[/if]
 }[if (field.hasUnitTranslation())], [/if][/if]
[if (field.hasUnitTranslation())]
'translation_domain': '[unit.translationDomain()/]'[/if]}[/if]) }}
[/template]

[template private formField(field : UnitField, unit : DynamicUnit, parentAccessor : String)
	? (field.oclIsTypeOf(UnitAttribute) and not field.isSingleton()) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[let accessor : String = field.propertyAccessor(parentAccessor, null, true)]
<div>
 {{- form_label([accessor/]) -}}
 <div class="[attribute.name.asId()/] framed"[if (attribute.collectionUiAllowAdd)]
 data-prototype="{{ form_widget([accessor/].vars.prototype)|e('html_attr') }}"[/if]>
  {% for entry in [accessor/] %}
  <div{% if entry.vars.errors | length > 0 %} class="error"{% endif %}>
   {{- form_widget(entry) -}}
   {{- form_errors(entry) -}}
  </div>
  {% endfor %}
 </div>
</div>
[/let]
[/let]
[/template]

[template private formField(field : UnitField, unit : DynamicUnit, parentAccessor : String)
	? (field.oclIsTypeOf(UnitAssociation) and field.isContains()) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let accessor : String = field.propertyAccessor(parentAccessor, null, true)]
[let childFields : OrderedSet(Feature) = association.association.targetType().features->select(f | not f.isContainer())]
<div>
 {{- form_label([accessor/]) -}}
 <div class="[association.name.asId()/] framed"[if (association.collectionUiAllowAdd)]
 data-prototype="[for (feature : Feature | childFields)]
{{ form_row([accessor/].vars.prototype.[feature.modelPropertyName()/])|e('html_attr') }}[/for]"[/if]>
{% for entry in [accessor/] %}
<div[if (childFields->size() > 1)] class="framed"[/if]>
[for (feature : Feature | childFields)]
{{ form_row(entry.[feature.modelPropertyName()/], { 'attr': {'class': '[feature.name.asId()/]'} } ) }}
[/for]
</div>
{% endfor %}
 </div>
</div>
[/let]
[/let]
[/let]
[/template]

[template private placeholder(field : UnitField, unit : DynamicUnit) post(trim())]
[if (field.hasCustomisedLabel() or field.hasCustomisedPlaceholder() or field.hasCustomisedTitle())]
'[unit.containedId()/].placeholders.[field.id()/]'[else]
'[unit.contentType().id()/].labels.[field.id()/]'[/if]
[/template]

[template private title(field : UnitField, unit : DynamicUnit) post(trim())]
[if (field.hasUnitTranslation())]
'[unit.containedId()/].titles.[field.id()/]'[else]
'[unit.contentType().id()/].labels.[field.id()/]'[/if]
[/template]

[template private script(unit : EditUnit) post(trim())]
<script>
var selects = document.querySelectorAll('select');
for (var i = 0; i < selects.length; ++i) {
    var instance = M.Select.init(selects['['/]i[']'/]);
}
</script>
[/template]


[template public map(unit : DynamicUnit)]
[let mapUnit : MapUnit = unit.oclAsType(MapUnit)]
<div id="[unit.uniqueName()/]">
 <?php
	echo Form::input('[mapUnit.uniqueName()/]_autocomplete', NULL,
		array(
			'id' => '[mapUnit.uniqueName()/]_autocomplete',
//			'class' => 'field.styleClass()/] field.inputClass()/]',
	));
?>
 <div id="[mapUnit.uniqueName()/]_map" class="map-canvas"></div>
 <script src="//code.jquery.com/jquery-2.1.1.min.js"></script>
 <script>
var map;
[if (not mapUnit.readOnly)]
var marker;
var infoWindow;
var autocomplete;
var geocoder;
[/if]

function initialize() {
	var mapOptions = {
		zoom: 12
	};
	map = new google.maps.Map(document.getElementById('[unit.uniqueName()/]_map'), mapOptions);
[if (mapUnit.readOnly)]
[else]
	input = document.getElementById('[unit.uniqueName()/]_autocomplete');
	map.controls['['/]google.maps.ControlPosition.TOP_LEFT[']'/].push(input);
	marker = new google.maps.Marker();
	infoWindow = new google.maps.InfoWindow();
	autocomplete = new google.maps.places.Autocomplete(input);
	autocomplete.bindTo('bounds', map);
	geocoder = new google.maps.Geocoder();

	if(navigator.geolocation) {
		navigator.geolocation.getCurrentPosition(
			function(position) {
				map.setCenter(new google.maps.LatLng(
					position.coords.latitude, position.coords.longitude));
			},
			function() {
				handleNoGeolocation(true);
		});
	} else {
		handleNoGeolocation(false);
	}

	google.maps.event.addListener(map, 'click', function(event) {
		geocoder.geocode({'latLng': event.latLng}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK) {
				if (results['['/]1[']'/]) {
					var contentString = $('<div class="marker-info-win">' +
						'<p class="place-address">' + results['['/]1[']'/].formatted_address + '</p>' +
						'<?php
							echo Form::button('[mapUnit.instanceName()/]', '[mapUnit.submitLabel()/]', array(
								'type' => 'submit',
								'class' => 'save-marker'
							));
						?></div>');    
					showPlace(results['['/]1[']'/].formatted_address, event.latLng, contentString);
 				} else {
					setMarker(event.latLng);
				}
			} else {
				setMarker(event.latLng);
			}
		});
	});

	google.maps.event.addListener(autocomplete, 'place_changed', function() {
		var place = autocomplete.getPlace();
		if (place.geometry) {
			var contentString = $('<div class="marker-info-win">' +
				'<h4 class="place-name">' + place.name + '</h4>' +
				'<p class="place-address">' + place.formatted_address + '</p>' +
				'<?php
					echo Form::button('[mapUnit.instanceName()/]', '[mapUnit.submitLabel()/]', array(
						'type' => 'submit',
						'class' => 'save-marker'
					));
				?></div>');    
			showPlace(place.name, place.geometry.location, contentString);
		} else {
			document.getElementById('[mapUnit.uniqueName()/]_input').placeholder = 'Enter a location';
		}
	});
}

function setMarker(latLng) {
	marker.setMap(map);
	marker.setPosition(latLng);
}

function showPlace(name, latLng, contentString) {
	infoWindow.setContent(contentString['['/]0[']'/]);
	infoWindow.setPosition(latLng);
	infoWindow.set('name', name);
	infoWindow.open(map);
  
  	var saveBtn = contentString.find('button.save-marker')['['/]0[']'/];
		
	if(typeof saveBtn !== 'undefined') {
		google.maps.event.addDomListener(saveBtn, 'click', function(event) {
			saveMarker();
		});
	}
}

function saveMarker() {
	var myData = {
[if (not mapUnit.placeName.oclIsUndefined())]
		[mapUnit.placeName.modelPropertyName()/]: infoWindow.get('name'),
[/if]
		[mapUnit.location.modelPropertyName()/]_latitude: infoWindow.getPosition().lat(),
		[mapUnit.location.modelPropertyName()/]_longitude: infoWindow.getPosition().lng()
	};
	$.ajax({
		type: "POST",
		url: "<?php
			echo Route::get('[comment mapUnit.displayedOn.oclAsType(Page).routeName()/]')->uri(array(
				'action' => '[mapUnit.actionName()/]',
				'param' => 'submit'
			));
?>",
		data: myData,
		success: function(data) {
			marker.setMap(map);
			marker.setPosition(infoWindow.getPosition());
			infoWindow.close();
		},
		error: function(xhr, ajaxOptions, thrownError) {
			alert(thrownError);
		}
	});
}

function handleNoGeolocation(errorFlag) {
  if (errorFlag) {
    var content = 'Error: The Geolocation service failed.';
  } else {
    var content = 'Error: Your browser doesn\'t support geolocation.';
  }

  var options = {
    map: map,
    position: new google.maps.LatLng(60, 105),
    content: content
  };

  var infowindow = new google.maps.InfoWindow(options);
  map.setCenter(options.position);
[/if]
}

google.maps.event.addDomListener(window, 'load', initialize);
 </script>
</div>
[/let]
[/template]
