[comment encoding = UTF-8 /]
[module controller(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::expression::m2t::core::literals/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(NullLiteral)
		or expression.oclIsTypeOf(BooleanLiteral)
		or expression.oclIsTypeOf(IntegerLiteral)
		or expression.oclIsTypeOf(StringLiteral)) post(trim())]
[expression.valueExpression()/]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(TimeLiteral)) post(trim())]
[let literal : TimeLiteral = expression.oclAsType(TimeLiteral)]
$time
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
$now
[/template]


[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(ConstantReference)) post(trim())]
[let constant : ConstantReference = expression.oclAsType(ConstantReference)]
\[constant.value.servicesNamespace()/]\[constant.value.definedBy.className()/]::[constant.value.name/][if (constant.value.useFunction())]()[/if]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(FeatureReference)) post(trim())]
[let path : FeatureReference = expression.oclAsType(FeatureReference)]
[accessor/]->[path.feature.getMethodName()/]()
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(ParameterReference)) post(trim())]
[let path : ParameterReference = expression.oclAsType(ParameterReference)]
':[path.parameter.name/]'
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(CurrentUser)) post(trim())]
[let path : CurrentUser = expression.oclAsType(CurrentUser)]
$this->getUser()
[/let]
[/template]


[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
[predicate.expressions->first().controllerExpression(accessor)/][for (expression : Expression | predicate.expressions->subOrderedSet(2, predicate.expressions->size()))]
 [predicate.operator()/] [expression.controllerExpression(accessor)/][/for]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
[predicate.left.controllerExpression(accessor)/] [predicate.operator()/] [predicate.right.controllerExpression(accessor)/]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
[if (predicate.left.oclIsTypeOf(CurrentTime) or predicate.left.oclIsTypeOf(TimeLiteral))]
[predicate.left.controllerExpression(accessor)/]->diff([predicate.right.controllerExpression(accessor)/])->format('%R') == '[if (predicate.operator = ComparisionOperator::GreaterThan)]-[else]+[/if]'
[else]
[predicate.left.controllerExpression(accessor)/] [predicate.operator()/] [predicate.right.controllerExpression(accessor)/]
[/if]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = expression.oclAsType(PredicateIsOperator)]
[predicate.left.controllerExpression(accessor)/], 'IS[if (predicate.negated)] NOT[/if]', [predicate.right.controllerExpression(accessor)/]
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
$queryBuilder->expr()->[predicate.operator()/]([predicate.left.controllerExpression(accessor)/], [predicate.right.controllerExpression(accessor)/])
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsNull = expression.oclAsType(PredicateIsNull)]
$queryBuilder->expr()->[if (predicate.negated)]isNotNull[else]isNull[/if]([predicate.feature.controllerExpression(accessor)/])
[/let]
[/template]

[template public controllerExpression(expression : Expression, accessor : String)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
$queryBuilder->expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.feature.controllerExpression(accessor)/], '0')
[/let]
[/template]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'&&'
		else if predicate.operator = BooleanOperator::Or then
			'||'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'=='
		else
			'!='
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'>'
			else
				'<='
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'<'
			else
				'>='
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]


[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = expression.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.expressions)]
[expression.controllerVariable()/]
[/for]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = expression.oclAsType(PredicateEqualityOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = expression.oclAsType(PredicateComparisonOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = expression.oclAsType(PredicateIsOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = expression.oclAsType(PredicateLikeOperator)]
[predicate.left.controllerVariable()/]
[predicate.right.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = expression.oclAsType(PredicateIsEmpty)]
[predicate.feature.controllerVariable()/]
[/let]
[/template]

[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(CurrentTime)) post(trim())]
$now = new \DateTime();
[/template]


[template public controllerVariable(expression : Expression)
	? (expression.oclIsTypeOf(TimeLiteral)) post(trim())]
[let literal : TimeLiteral = expression.oclAsType(TimeLiteral)]
$time = new \DateTime('[literal.value/]');
[/let]
[/template]