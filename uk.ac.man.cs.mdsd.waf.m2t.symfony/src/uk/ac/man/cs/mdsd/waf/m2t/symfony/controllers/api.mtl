[comment encoding = UTF-8 /]
[module api(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public controller(resource : Resource, model : WafModel)]
[file(resource.controllerFilename(), false)]
<?php
namespace [resource.apiControllersNamespace()/];

use FOS\RestBundle\Controller\Annotations as Rest;
use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Request\ParamFetcher;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
[comment use Nelmio\ApiDocBundle\Annotation\Operation;
use Nelmio\ApiDocBundle\Annotation\Model;
use Swagger\Annotations as SWG; /]



/**
 * @Route("/api")
 **/
class [resource.controllerClassName()/] extends FOSRestController
{
    [resource.resourceActionMethods()/]
}
[/file]
[/template]

[template private viewAnnotation(resource : Resource) post(trim())]
@Rest\View(serializerEnableMaxDepthChecks="true"[if (resource.defaultSerializationGroups->notEmpty())]
, serializerGroups={[for (group : SerializationGroup | resource.defaultSerializationGroups)]"[group.name/]"[/for]}[/if])
[/template]

[template private resourceActionMethods(resource : Resource) post(trim())]
[if (not resource.getAll.oclIsUndefined() or resource.enableDefaultGetAll)]
[resource.getAllAction()/]

[/if]
[if (not resource.getOne.oclIsUndefined() or resource.enableDefaultGetOne)]
[resource.getOneAction()/]

[/if]
[for (child : Resource | resource.childResources)]
[child.resourceActionMethods()/]
[/for]
[/template]

[template private getOneAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath()/]", name="[resource.routeName()/]One")
 * [resource.viewAnnotation()/]
 * [comment @ApiDoc( /]
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 *     parameters={
[for (key : Attribute | resource.uriPathKeys())]
 *         {"name"="[key.routeParameterName(resource)/]", "dataType"="[key.dataType().name/]", "required"="true", "description"="xx"},
[/for]
 *     },
 * )
 *
 * @return [resource.service.serves.modelClassName()/]
 **/
public function getOne[resource.service.name/]Action([resource.routeParameters()/])
{
    return $this->get('[resource.service.serviceName()/]')->[if (resource.getOne.oclIsUndefined())]
find[else]
[resource.getOne.instanceName()/][/if]([resource.service.serves.routeParameters()/]);
}
[/template]

[template private getAllAction(resource : Resource) post(trim())]
/**
 * @Rest\Get("[resource.uriPath(true)/]", name="[resource.routeName()/]")
 * @Rest\QueryParam(name="page", nullable=true, description="The section of items to return")
 * @Rest\QueryParam(name="pageSize", nullable=true, description="The number of items to return")
 * [resource.viewAnnotation()/]
 * [comment @ApiDoc( /]
[if (resource.parentResource.oclIsUndefined())]
 *     resource="true",
[/if]
 * )
 *
 * @return array
 **/
public function get[resource.service.name/]Action(ParamFetcher $paramFetcher[if (not resource.parentResource.oclIsUndefined())]
, [resource.parentResource.routeParameters()/][/if])
{
[if (resource.parentResource.oclIsUndefined())]
    return $this->get('[resource.service.serviceName()/]')->[if (resource.getAll.oclIsUndefined())]
findAll[else]
[resource.getAll.instanceName()/][/if]($paramFetcher->get("page"), $paramFetcher->get("pageSize"));
[else]
    return $this->get('[resource.parentResource.service.serviceName()/]')->[if (resource.parentResource.getOne.oclIsUndefined())]
find[else]
[resource.parentResource.getOne.instanceName()/][/if]([resource.parentResource.service.serves.routeParameters()/]);
[/if]
}
[/template]

[template private selectCode(resource : Resource) post(trim())]
[if (not resource.limit.oclIsUndefined())]
$this->offset = $request->query->getInt('[resource.limit.parameters->first().name/]', 1);
[/if]
[if (not unit.selectionType.oclIsUndefined())]
$this->[unit.selectionType.instanceName()/] = [unit.getSelectionService()/]->find([unit.selectableParameters()/]);
[/if]
[if (not unit.selectionType.oclIsUndefined() and not unit.containingFeature.oclIsUndefined())]
[unit.childSelect()/]
[else]
[unit.contentSelect()/]
[/if]
[/template]

[template private contentSelect(unit : CollectionUnit) post(trim())]
[if (unit.hasFilters())]
[unit.contentFilterSelect()/]
else
[/if]
[if (not unit.selection.oclIsUndefined())]
	[if (unit.routedSelection())]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->[unit.selection.instanceName()/]([unit.selectableParameters()/][unit.paginationActuals()/]);
	[else]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.selection.instanceName()/]([unit.selectableParameters()/][unit.paginationActuals()/]);
	[/if]
[elseif (unit.oclIsKindOf(DataUnit))]
[let dataUnit : DataUnit = unit.oclAsType(DataUnit)]
	[if (not dataUnit.defaultSelection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[dataUnit.defaultSelection.instanceName()/]([unit.selectableParameters()/][unit.paginationActuals()/]);
	[else]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->findAll([unit.paginationActuals()/]);
	[/if]
[/let]
[else]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->findAll([unit.paginationActuals()/]);
[/if]
[/template]

[template private contentFilterSelect(unit : CollectionUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('else')]
if ([for (parameter : FilterParameter | f.parameters) separator(' && ')]
$request->query->has('[parameter.name/]')[/for])
    [unit.contentFilterCall(f)/]
[/for]
[/template]

[template private contentFilterCall(unit : CollectionUnit, filter : Filter)]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->[filter.selection.instanceName()/](
[for (parameter : FormalParameter | filter.selection.parameters)]
[let actual : FilterParameter = filter.matchingActual(parameter)]
    $request->query->get('[actual.name/]'),
[/let]
[/for]
    [unit.paginationActuals()/]
);
[/template]

