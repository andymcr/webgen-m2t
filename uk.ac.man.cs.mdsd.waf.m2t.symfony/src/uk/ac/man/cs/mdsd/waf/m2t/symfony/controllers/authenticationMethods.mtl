[comment encoding = UTF-8 /]
[module authenticationMethods(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[comment import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::controlMethods/]
[comment import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::editMethods/]


[template protected generateAuthenticationStart(unit : DynamicUnit) post(trim())]
[if (not unit.oclAsType(ControlUnit).cancelDestination.oclIsUndefined())]
[comment unit.generateHandleCancel()/]
[/if]
if (Auth::instance()->logged_in())
{
	$this->template->page_message = 'You are already logged in';
	$this->redirect();
}
[/template]


[template public generateUnitDisplay(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : DynamicUnit = unit.oclAsType(LoginUnit)]
    $authenticationUtils = $this->get('security.authentication_utils');
    $[loginUnit.instanceName()/]_error = $authenticationUtils->getLastAuthenticationError();
    $lastUsername = $authenticationUtils->getLastUsername();
[/let]
[/template]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(RegistrationUnit)) post(trim())]
[let authentication : LocalAuthenticationSystem = unit.displayedOn.oclAsType(Page).partOf.authentication.oclAsType(LocalAuthenticationSystem)]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
[/let]
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
[loginUnit.actionMethod()/]

[loginUnit.loginCheckMethod()/]
[/let]
[/template]

[template public actionMethod(unit : LoginUnit) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = unit.authenticationSystem]
/**
 * [unit.routeAnnotation()/]
 */
public function [unit.actionName()/](Request $request)
{
    $authenticationUtils = $this->get('security.authentication_utils');
    $error = $authenticationUtils->getLastAuthenticationError();
    $lastUsername = $authenticationUtils->getLastUsername();

    return $this->renderPage();
}
[/let]
[/template]

[template public loginCheckMethod(unit : LoginUnit) post(trim())]
[let localAuthentication : LocalAuthenticationSystem = unit.authenticationSystem]
/**
 * @Route("/[unit.loginCheckUriPath()/]", name="login_check")
 */
public function loginCheckAction()
{
    // as the route is handled by the Security system, this controller will not be executed
}
[/let]
[/template]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ForgottenPasswordUnit)) post(trim())]
[let forgottenUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
public function action_[comment forgottenUnit.actionName()/]() {
	// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
	[forgottenUnit.generateAuthenticationStart()/]
	else {
		$this->[forgottenUnit.instanceName()/]->where('[forgottenUnit.loginIdField.modelPropertyName()/]', '=', $this->request->post('[forgottenUnit.loginIdField.modelPropertyName()/]'))->find();
		if ($this->[forgottenUnit.instanceName()/]->loaded())
		{
		}
	$this->template->page_message = 'Email sent';
	}
}
[/let]
[/template]


[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
// $parameters['['/]'[loginUnit.instanceName()/]_error'[']'/] = $[loginUnit.instanceName()/]_error;
//$parameters['['/]'last_username'[']'/] = $lastUsername;
[/let]
[/template]


