[comment encoding = UTF-8 /]
[module authenticationMethods(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[comment import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::commonMethods/]
[comment import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::controlMethods/]
[comment import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::editMethods/]


[template protected generateAuthenticationStart(unit : DynamicUnit) post(trim())]
[if (not unit.oclAsType(ControlUnit).cancelDestination.oclIsUndefined())]
[comment unit.generateHandleCancel()/]
[/if]
if (Auth::instance()->logged_in())
{
	$this->template->page_message = 'You are already logged in';
	$this->redirect();
}
[/template]


[template public generateUnitDisplay(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : DynamicUnit = unit.oclAsType(LoginUnit)]
    $authenticationUtils = $this->get('security.authentication_utils');
    $[loginUnit.instanceName()/]_error = $authenticationUtils->getLastAuthenticationError();
    $lastUsername = $authenticationUtils->getLastUsername();
[/let]
[/template]


[template public generateUnitTemplateParameters(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
'[loginUnit.instanceName()/]_error' => $[loginUnit.instanceName()/]_error,
'last_username' => $lastUsername,
[/let]
[/template]


[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(RegistrationUnit)) post(trim())]
[let authentication : LocalAuthenticationSystem = unit.displayedOn.oclAsType(Page).partOf.authentication.oclAsType(LocalAuthenticationSystem)]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
public function action_[comment registrationUnit.actionName()/]()
{
	[registrationUnit.generateAuthenticationStart()/]
[if (not registrationUnit.cancelDestination.oclIsUndefined())]
	[comment registrationUnit.generateHandleCancel()/]
[/if]
	else if ($this->request->method() == HTTP_Request::POST)
	{
		try
		{
[if (registrationUnit.hasCaptchaFields())]
			[comment registrationUnit.generateValuesFromFormToModel()/]
[if (registrationUnit.hasForcedValueFeatures())]
			[comment registrationUnit.generateForcedFeatureValues()/]
[/if]
			[comment registrationUnit.generateCaptchaCheck()/]
			else
			{
[/if]
				$this->[registrationUnit.instanceName()/]->salt = md5(uniqid(rand(), true));
				$this->[registrationUnit.instanceName()/]->activated = [if (authentication.useEmailActivation)]'0'[else]'1'[/if];
[if (authentication.useEmailActivation)]
				$this->[registrationUnit.instanceName()/]->new_email_key = md5(rand().microtime());
[/if]
[if (registrationUnit.hasInterfaceFields())]
				[comment registrationUnit.generateInterfaceFieldValidation()/]
[/if]
				$this->[registrationUnit.instanceName()/]->save([if (registrationUnit.hasInterfaceFields())]$extra_validation[/if]);
	[if (authentication.useEmailActivation)]
//				$this->[registrationUnit.instanceName()/]->trans_commit();
//				$this->authentication_lib->sendEmail('activate', $this->[registrationUnit.instanceName()/]->email, array(
//					'site_name' => $this->config->item('site_title', 'site'),
//					'user_id' => $this->[registrationUnit.instanceName()/]->id,
//					'username' => $this->[registrationUnit.instanceName()/]->username,
//					'email' => $this->[registrationUnit.instanceName()/]->email,
//					'new_email_key' => $this->[registrationUnit.instanceName()/]->new_email_key,
//					'activation_period' => $this->config->item('email_activation_expire', 'tank_auth')));
//				$this->page_message = 'Activation email sent';
	[else]
		[let authentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
				$user = ORM::factory('[authentication.userService.modelName/]');
				$user->[authentication.userAuthenticationKey.columnName()/] = $this->[registrationUnit.instanceName()/]->[authentication.loginUnit.loginIdField.modelPropertyName()/];
			[for (userFeature : ServiceFeature | authentication.userService.features->select(f | f.isRequired())->select(f | f <> authentication.userAuthenticationKey))]
				$user->[userFeature.columnName()/] = '';
			[/for]
				$user->validation_required(FALSE)->save();
			[if (authentication.sendWelcomeEmail)]
//				$this->authentication_lib->sendEmail('welcome', $this->[registrationUnit.instanceName()/]->email, array(
//					'site_name' => $this->config->item('site_title', 'site'),
//					'username' => $this->[registrationUnit.instanceName()/]->username,
//					'email' => $this->[registrationUnit.instanceName()/]->email));
			[/if]
		[/let]
		[if (not registrationUnit.confirmDestination.oclIsUndefined())]
				$this->redirect(Route::get('[registrationUnit.confirmDestination.controllerName()/]')->uri());
		[else]
				$this->[registrationUnit.instanceName()/]->clear();
				$this->page_message = 'Registration completed';
		[/if]
	[/if]
[if (registrationUnit.hasCaptchaFields())]
			}
[/if]
		}
		catch (ORM_Validation_Exception $e)
		{
			$this->[registrationUnit.instanceName()/]_field_errors = $e->errors('');
	[if (registrationUnit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
			$unreported_field_errors = array_diff_key($this->[registrationUnit.instanceName()/]_field_errors, array([for
	(field : UnitField | registrationUnit.inputFields())
		separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (registrationUnit.hasInterfaceFields())], '_external' => ''[/if]));
			if (!empty($unreported_field_errors))
				$this->[registrationUnit.instanceName()/]_error = print_r($unreported_field_errors, TRUE);
	[/if]
[if (registrationUnit.hasInterfaceFields())]
			[comment registrationUnit.generateRememberInterfaceFields()/]
[/if]
		}
	}
}
[/let]
[/let]
[/template]

[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
[let localAuthentication : LocalAuthenticationSystem = loginUnit.authenticationSystem]
/**
 * @Route("/login_check", name="login_check")
 */
public function loginCheckAction()
{
    // this controller will not be executed,
    // as the route is handled by the Security system
}
[/let]
[/let]
[/template]

[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ForgottenPasswordUnit)) post(trim())]
[let forgottenUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
public function action_[comment forgottenUnit.actionName()/]() {
	// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
	[forgottenUnit.generateAuthenticationStart()/]
	else {
		$this->[forgottenUnit.instanceName()/]->where('[forgottenUnit.loginIdField.modelPropertyName()/]', '=', $this->request->post('[forgottenUnit.loginIdField.modelPropertyName()/]'))->find();
		if ($this->[forgottenUnit.instanceName()/]->loaded())
		{
		}
	$this->template->page_message = 'Email sent';
	}
}
[/let]
[/template]
