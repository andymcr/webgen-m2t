[comment encoding = UTF-8 /]
[module formType(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public formType(entityOrView : EntityOrView, model : WafModel)]
[file(entityOrView.formTypeFilename(), false)]
<?php
namespace [entityOrView.formTypeNamespace()/];

[entityOrView.useStatements(model)/]


class [entityOrView.typeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
[comment Only features that are used by forms are included to minimise number of db queries. Including
others can result in queries for associated entities that are not used. /]
[for (feature : Feature | entityOrView.featuresUsed(model)->sortedBy(f | f.name))]
        $builder->[feature.formFeature()/];
[/for]
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '[entityOrView.modelsNamespace()/]\[entityOrView.modelName()/]'
        ));
    }
}
[/file]
[/template]

[template private useStatements(entityOrView : EntityOrView, model : WafModel) post(trim())]
[let featuresUsed : Sequence(Feature) = entityOrView.featuresUsed(model)]
[for (feature : Feature | featuresUsed->select(f | f.isEnumerationType()))]
use [entityOrView.modelsNamespace()/]\[feature.enumerationType().modelName()/];
[/for]
[if (featuresUsed->select(f | f.oclIsKindOf(Association))->notEmpty())]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
[/if]
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (featuresUsed->select(f | f.isBooleanDataType())->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (featuresUsed->select(f | f.isEnumerationType())->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (featuresUsed->select(a | a.isContains() and not a.isSingleton())->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
[/if]
[if (featuresUsed->select(f | f.isDate()).oclAsType(Attribute)->select(a | a.dateDetails() = DateDetails::DateOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (featuresUsed->select(f | f.isDate()).oclAsType(Attribute)->select(a | a.dateDetails() = DateDetails::DateAndTime)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (featuresUsed->select(f | f.isDataType()).oclAsType(Attribute)->select(a | a.dataType().name.toLowerCase() = 'email')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (featuresUsed->select(f | f.isDataType()).oclAsType(Attribute)->select(a | a.dataType().name.toLowerCase() = 'integer')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (featuresUsed->select(f | f.isDataType()).oclAsType(Attribute)->select(a | a.dataType().name.toLowerCase() = 'string')->notEmpty()
		or featuresUsed->select(f | f.oclIsTypeOf(SingletonURL))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (featuresUsed->select(f | f.isDataType()).oclAsType(Attribute)->select(a | a.dataType().name.toLowerCase() = 'textarea')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TestareaType;
[/if]
[if (featuresUsed->select(f | f.isDate()).oclAsType(Attribute)->select(a | a.dateDetails() = DateDetails::TimeOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;
[/let]
[/template]

[template private formFeature(feature : Feature)
	? (feature.oclIsKindOf(Attribute)) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
add('[attribute.modelPropertyName()/]', [attribute.interfaceType()/], array(
    'label' => '[attribute.partOf.id()/].labels.[attribute.id()/]',
    'translation_domain' => 'entity',
[if (not attribute.isRequired())]
    'required' => FALSE,
[/if]
[if (attribute.isDate())]
	[if (attribute.dateDetails() = DateDetails::DateAndTime)]
    'date_widget' => 'single_text',
    'time_widget' => 'single_text',
	[elseif (attribute.dateDetails() <> DateDetails::DateAndTime)]
    'widget' => 'single_text',
		[if (attribute.dateDetails() = DateDetails::TimeOnly)]
    'with_seconds' => TRUE,
		[/if]
	[/if]
[elseif (attribute.isEnumerationType())]
    'choices' => [attribute.enumerationType().modelName()/]::values(),
    'placeholder' => 'actions.labels.select_one',
[/if]
[if (attribute.hasHtml5Attributes())]
    'attr' => array(
	[if (false)] [comment not attribute.placeholder.oclIsUndefined())/]
        'placeholder' => '[comment attribute.placeholder/]',
	[/if]
	[if (attribute.hasValidationPattern())]
        'pattern' => '[attribute.validationPattern/]',
	[/if]
    ),
[/if]
))
[/let]
[/template]

[template private interfaceType(attribute : Attribute) post(trim())]
[if (attribute.isEnumerationType())]
ChoiceType::class
[elseif (attribute.isBooleanDataType())]
CheckboxType::class
[elseif (attribute.isDataType())]
	[if (attribute.dataType().name.toLowerCase() = 'email')]
EmailType::class
	[elseif (attribute.dataType().name.toLowerCase() = 'integer')]
IntegerType::class
	[elseif (attribute.dataType().name.toLowerCase() = 'text')]
TextType::class
	[elseif (attribute.dataType().name.toLowerCase() = 'textarea')]
TextareaType::class
	[else]
TextType::class
	[/if]
[elseif (attribute.isDate())]
	[if (attribute.dateDetails() = DateDetails::DateOnly)]
DateType::class
	[elseif (attribute.dateDetails() = DateDetails::DateAndTime)]
DateTimeType::class
	[else]
TimeType::class
	[/if]
[else]
TextType::class
[/if]
[/template]

[template private formFeature(feature : Feature)
	? (feature.oclIsKindOf(Association) and not feature.isContains()) post(trim())]
[let association : Association = feature.oclAsType(Association)]
add('[association.modelPropertyName()/]', EntityType::class, array(
    'label' => '[association.partOf.id()/].labels.[association.id()/]',
    'translation_domain' => 'entity',
[if (not association.isRequired() and association.isSingleton())]
    'required' => FALSE,
[/if]
    'class' => '[association.appBundleName()/]:[association.modelName()/]',
    'choice_label' => 'defaultLabel',
    'choice_translation_domain' => false,
[if (association.isSingleton())]
    'placeholder' => 'actions.labels.select_one',
[else]
    'multiple' => true,
[/if]
))
[/let]
[/template]

[template private formFeature(feature : Feature)
	? (feature.oclIsKindOf(Association) and feature.isContains()) post(trim())]
[let association : Association = feature.oclAsType(Association)]
[if (association.isSingleton())]
add('[association.modelPropertyName()/]', [association.targetType().typeClassName()/]::class)
[else]
add('[association.modelPropertyName()/]', CollectionType::class, array(
    'entry_type' => [association.targetType().typeClassName()/]::class,
    'allow_add' => true,
))
[/if]
[/let]
[/template]


[query private featuresUsed(entityOrView : EntityOrView, model : WafModel) : Sequence(Feature)
	= entityOrView.usersOf(model)->iterate(u;
		features : Sequence(Feature) = Sequence{}
		| features->union(entityOrView.featuresUsed(u)))
/]

[query private featuresUsed(entityOrView : EntityOrView, unit : EditUnit) : Sequence(Feature)
	= unit.displayFields->iterate(f;
		features : Sequence(Feature) = Sequence{}
		| features->union(entityOrView.featuresUsed(f)))
/]

[query private featuresUsed(entityOrView : EntityOrView, field : UnitField) : Sequence(Feature)
	= if field.oclIsTypeOf(UnitAttribute) then
			let attribute : Attribute
				= field.oclAsType(UnitAttribute).attribute
				in if entityOrView.features->includes(attribute) then
						Sequence{attribute}
					else
						Sequence{}
					endif
		else if field.oclIsTypeOf(UnitAssociation) then
			let association : Association
				= field.oclAsType(UnitAssociation).association
				in if entityOrView.features->includes(association) then
						Sequence{association}
					else
						Sequence{}
					endif
		else
			Sequence{}
		endif endif
/]


[query private usersOf(entityOrView : EntityOrView, model : WafModel) : Sequence(EditUnit)
	= model.pages->iterate(p;
		units : Sequence(EditUnit) = Sequence{}
		| units->union(entityOrView.usersOf(p)))
/]

[query private usersOf(entityOrView : EntityOrView, page : Page) : Sequence(EditUnit)
	= page.units->select(u | u.oclIsKindOf(EditUnit)).oclAsType(EditUnit)->iterate(u;
		units : Sequence(EditUnit) = Sequence{}
		| units->union(entityOrView.usersOf(u)))
/]

[query private usersOf(entityOrView : EntityOrView, unit : EditUnit) : Sequence(EditUnit)
	= if unit.entities->includes(entityOrView) then
			Sequence{unit}
		else
			Sequence{}
		endif
/]
