[comment encoding = UTF-8 /]
[module formType(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public generateFormType(service : Service)]
[file(service.formTypeFilename(), false)]
<?php
namespace [service.formTypeNamespace()/];

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class [service.typeClassName()/] extends AbstractType
{
	public function buildForm(FormBuilderInterface $builder, array $options)
	{
		$builder[for (feature : ServiceFeature | service.features)]

			->add('[feature.modelPropertyName()/]', '[if (feature.oclIsTypeOf(ServiceEntityElement))]
[let element : ServiceEntityElement = feature.oclAsType(ServiceEntityElement)]
	[if (element.feature.oclIsTypeOf(SingletonElement))]
	[let singleton : SingletonElement = element.feature.oclAsType(SingletonElement)]
		[if (singleton.dataType.oclIsTypeOf(EnumerationType))]
[singleton.dataType.oclAsType(EnumerationType).formTypeName()/][else]
[element.interfaceType/][/if][/let][else]
[element.interfaceType/][/if][/let][elseif (feature.oclIsTypeOf(ServiceEntityAssociation))]
entity[/if]'[if (not feature.isRequired() or feature.oclIsTypeOf(ServiceEntityAssociation))]
, array(
[if (not feature.isRequired())]
                    'required' => false,
[/if]
[if (feature.oclIsTypeOf(ServiceEntityAssociation))]
[let association : ServiceEntityAssociation = feature.oclAsType(ServiceEntityAssociation)]
                    'class' => '[feature.appBundleName()/]:[association.modelName()/]',
                    'choice_label' => 'defaultLabel'
[/let]
[/if]
                )[/if])[/for];
	}

	public function configureOptions(OptionsResolver $resolver)
	{
		$resolver->setDefaults(array(
			'data_class' => '[service.modelsNamespace()/]\[service.modelName/]'
		));
	}

	public function getName()
	{
		return '[service.modelName.toLowerFirst()/]';
	}
}
[/file]
[/template]
