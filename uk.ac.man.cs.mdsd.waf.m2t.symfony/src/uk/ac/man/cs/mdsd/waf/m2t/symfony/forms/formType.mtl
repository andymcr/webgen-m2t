[comment encoding = UTF-8 /]
[module formType(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public formType(service : Service)]
[file(service.formTypeFilename(), false)]
<?php
namespace [service.formTypeNamespace()/];

[service.associationTypeUse()/]
use Symfony\Component\Form\AbstractType;
[service.attributeTypeUse()/]
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;


class [service.typeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
[for (feature : ServiceFeature | service.features)]
        $builder->[feature.formFeature()/];
[/for]
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => '[service.modelsNamespace()/]\[service.modelName()/]'
        ));
    }
}
[/file]
[/template]

[template private attributeTypeUse(service : Service) post(trim())]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'checkbox')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (service.features->select(f | f.isEnumerationTypeSingleton())->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'date')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'datetime')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'email')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'integer')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'text')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'textarea')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TestareaType;
[/if]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAttribute)).oclAsType(ServiceAttribute)->select(a | a.interfaceType = 'time')->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
[/template]

[template private associationTypeUse(service : Service) post(trim())]
[for (feature : ServiceFeature | service.features->select(f | f.isEnumerationTypeSingleton()))]
use [service.modelsNamespace()/]\[feature.enumerationType().modelName()/];
[/for]
[if (service.features->select(f | f.oclIsTypeOf(ServiceAssociation))->notEmpty())]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
[/if]
[/template]

[template private formFeature(feature : ServiceFeature)
	? (feature.oclIsTypeOf(ServiceAttribute)) post(trim())]
[let attribute : ServiceAttribute = feature.oclAsType(ServiceAttribute)]
add('[attribute.modelPropertyName()/]', [attribute.interfaceType()/], array(
    'label' => '[attribute.displayLabel/]',
[if (not attribute.isRequired())]
    'required' => FALSE,
[/if]
[if (attribute.interfaceType = 'datetime')]
    'date_widget' => 'single_text',
    'time_widget' => 'single_text',
[elseif (attribute.interfaceType = 'date' or attribute.interfaceType = 'time')]
    'widget' => 'single_text',
	[if (attribute.interfaceType = 'time')]
    'with_seconds' => TRUE,
	[/if]
[elseif (attribute.isEnumerationTypeSingleton())]
    'choices' => [attribute.enumerationType().modelName()/]::values(),
    'placeholder' => 'Please select one',
[/if]
[if (attribute.hasHtml5Attributes())]
    'attr' => array(
	[if (not attribute.placeholder.oclIsUndefined())]
        'placeholder' => '[attribute.placeholder/]',
	[/if]
	[if (not attribute.validationPattern.oclIsUndefined())]
        'pattern' => '[attribute.validationPattern/]',
	[/if]
    ),
[/if]
))
[/let]
[/template]

[template private interfaceType(attribute : ServiceAttribute) post(trim())]
[if (attribute.isEnumerationTypeSingleton())]
ChoiceType::class
[comment elseif (attribute.isEnumerationTypeSingleton())/]
[comment PasswordType::class /]
[elseif (attribute.interfaceType = 'checkbox')]
CheckboxType::class
[elseif (attribute.interfaceType = 'date')]
DateType::class
[elseif (attribute.interfaceType = 'datetime')]
DateTimeType::class
[elseif (attribute.interfaceType = 'email')]
EmailType::class
[elseif (attribute.interfaceType = 'integer')]
IntegerType::class
[elseif (attribute.interfaceType = 'text')]
TextType::class
[elseif (attribute.interfaceType = 'textarea')]
TextareaType::class
[elseif (attribute.interfaceType = 'time')]
TimeType::class
[else]
TextType::class
[/if]
[/template]

[template private formFeature(feature : ServiceFeature)
	? (feature.oclIsTypeOf(ServiceAssociation) and not feature.isContainer()) post(trim())]
[let association : ServiceAssociation = feature.oclAsType(ServiceAssociation)]
add('[association.modelPropertyName()/]', EntityType::class, array(
    'label' => '[association.displayLabel/]',
[if (not association.isRequired())]
    'required' => FALSE,
[/if]
    'class' => '[association.appBundleName()/]:[association.modelName()/]',
    'choice_label' => 'defaultLabel',
[if (association.isSingleton())]
    'placeholder' => 'Please select one',
[/if]
))
[/let]
[/template]

[template private formFeature(feature : ServiceFeature)
	? (feature.oclIsTypeOf(ServiceAssociation) and feature.isContainer()) post(trim())]
[let association : ServiceAssociation = feature.oclAsType(ServiceAssociation)]
[if (association.isSingleton())]
add('[association.modelPropertyName()/]', [association.targetService().typeClassName()/]::class)
[else]
add('[association.modelPropertyName()/]', CollectionType::class, array(
    'entity_type' => [association.targetService().typeClassName()/]::class,
    'allow_add' => true,
))
[/if]
[/let]
[/template]