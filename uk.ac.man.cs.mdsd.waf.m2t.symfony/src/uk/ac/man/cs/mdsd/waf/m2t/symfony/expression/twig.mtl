[comment encoding = UTF-8 /]
[module twig(
	'http://www.cs.man.ac.uk/mdsd/2016/Expression',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(NullLiteral)) post(trim())]
NULL
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(IntegerLiteral)) post(trim())]
[let literal : IntegerLiteral = guard.oclAsType(IntegerLiteral)]
[literal.value/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(StringLiteral)) post(trim())]
[let literal : StringLiteral = guard.oclAsType(StringLiteral)]
'[literal.value/]'
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(TimeLiteral)) post(trim())]
date('[guard.oclAsType(TimeLiteral).value/]')
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentTime)) post(trim())]
date()
[/template]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ModelReference)) post(trim())]
[let path : ModelReference = guard.oclAsType(ModelReference)]
$this->[path.unit.instanceName()/]->[comment path unit  services->first() keyName()/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(FeatureReference)) post(trim())]
[let path : FeatureReference = guard.oclAsType(FeatureReference)]
[accessor/].[path.feature.modelPropertyName()/]
[/let]
[/template]

[template public featureReference(feature : Feature, accessor : String) post(trim())]
'[feature.columnName()/]'
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ParameterReference)) post(trim())]
[let path : ParameterReference = guard.oclAsType(ParameterReference)]
':[path.parameter.name/]'
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentUserReference)) post(trim())]
[let path : CurrentUserReference = guard.oclAsType(CurrentUserReference)]
$this->get('people')->getId()
[/let]
[/template]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = guard.oclAsType(PredicateBooleanOperator)]
Criteria::expr()->[predicate.operator()/]([if (predicate.expressions->any(e | e.oclIsKindOf(Predicate))->notEmpty())]
[for (expression : Expression | predicate.expressions) separator (',')]

    [expression.twigExpression(accessor)/][/for]

)
[else]
[for (expression : Expression | predicate.expressions) separator (', ')]
[expression.twigExpression(accessor)/]
[/for]
[/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = guard.oclAsType(PredicateEqualityOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = guard.oclAsType(PredicateComparisonOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = guard.oclAsType(PredicateIsOperator)]
[predicate.left.twigExpression(accessor)/], 'IS[if (predicate.negated)] NOT[/if]', [predicate.right.twigExpression(accessor)/]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = guard.oclAsType(PredicateLikeOperator)]
Criteria::expr()->[predicate.operator()/]([predicate.left.twigExpression(accessor)/], [predicate.right.twigExpression(accessor)/])
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsEmpty = guard.oclAsType(PredicateIsEmpty)]
Criteria::expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.feature.twigExpression(accessor)/], '0')
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = guard.oclAsType(PredicateIsEmpty)]
Criteria::expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.feature.twigExpression(accessor)/], '0')
[/let]
[/template]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'and'
		else if predicate.operator = BooleanOperator::Or then
			'or'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'=='
		else
			'!='
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'>'
			else
				'<='
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'<'
			else
				'>='
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]