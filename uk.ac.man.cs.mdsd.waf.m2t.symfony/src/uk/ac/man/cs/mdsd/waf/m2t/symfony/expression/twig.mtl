[comment encoding = UTF-8 /]
[module twig(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::expression::m2t::core::literals/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(NullLiteral)
		or guard.oclIsTypeOf(IntegerLiteral)
		or guard.oclIsTypeOf(StringLiteral)) post(trim())]
[guard.valueExpression()/][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(TimeLiteral)) post(trim())]
date('[guard.oclAsType(TimeLiteral).value/]')[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentTime)) post(trim())]
date()[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ConstantReference)) post(trim())]
[let constant : ConstantReference = guard.oclAsType(ConstantReference)]
[constant.value.definedBy.className().toLowerFirst()/].[constant.value.name/][if (constant.value.useFunction())]()[/if][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsKindOf(FeaturePath)) post(trim())]
[let path : FeaturePath = guard.oclAsType(FeaturePath)]
[path.accessor(accessor)/] [if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let] 
[/template]

[template public featureReference(feature : Feature, accessor : String) post(trim())]
'[feature.columnName()/]'
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(ParameterReference)) post(trim())]
[let path : ParameterReference = guard.oclAsType(ParameterReference)]
':[path.parameter.name/]'[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(CurrentUser)) post(trim())]
[let path : CurrentUser = guard.oclAsType(CurrentUser)]
$this->get('people')->getId()
[/let]
[/template]


[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = guard.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.expressions)]
[if (i > 1)] [predicate.operator()/] [/if][expression.twigExpression(accessor)/][/for][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = guard.oclAsType(PredicateEqualityOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = guard.oclAsType(PredicateComparisonOperator)]
[predicate.left.twigExpression(accessor)/] [predicate.operator()/] [predicate.right.twigExpression(accessor)/][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = guard.oclAsType(PredicateIsOperator)]
[predicate.left.twigExpression(accessor)/], 'IS[if (predicate.negated)] NOT[/if]', [predicate.right.twigExpression(accessor)/][if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = guard.oclAsType(PredicateLikeOperator)]
Criteria::expr()->[predicate.operator()/]([predicate.left.twigExpression(accessor)/], [predicate.right.twigExpression(accessor)/])[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsNull)) post(trim())]
[let predicate : PredicateIsEmpty = guard.oclAsType(PredicateIsEmpty)]
Criteria::expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.feature.twigExpression(accessor)/], '0')[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[template public twigExpression(guard : Expression, accessor : String)
	? (guard.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = guard.oclAsType(PredicateIsEmpty)]
Criteria::expr()->[if (predicate.negated)]gt[else]eq[/if]([predicate.feature.twigExpression(accessor)/], '0')[if (guard.suffixes->notEmpty())] [guard.suffixes()/][/if]
[/let]
[/template]

[query private operator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'and'
		else if predicate.operator = BooleanOperator::Or then
			'or'
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'=='
		else
			'!='
		endif
/]

[query private operator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'>'
			else
				'<='
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'<'
			else
				'>='
			endif
		else
			'?'
		endif endif
/]

[query private operator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]

[template private suffixes(expression : Expression) post(trim())]
[for (suffix : String | expression.suffixes) separator(' ')]
[suffix/][/for]
[/template]