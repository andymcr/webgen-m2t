[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]


[query public appBundleName(eObject : EObject) : String
	= 'AppBundle'
/]


[query public formTypeName(type : EnumerationType) : String
	= type.name.toLowerFirst()
/]

[query public typeClassName(type : EnumerationType) : String
	= type.typePrefix().concat(type.name).concat('Type')
/]

[query public modelClassName(type : EnumerationType) : String
	= type.name
/]

[comment query public name(enumerationLiteral : EnumerationLiteral) : String
	= enumerationLiteral.name.toUpper()
/]


[query public modelClassName(service : Service) : String
	= service.modelName()
/]

[query public modelName(service : Service) : String
	= let entityOrView : EntityOrView = service.encapsulates->first()
		in if not entityOrView.oclIsUndefined() then
			entityOrView.modelName()
			else
				'????'
			endif
/]

[query public serviceClassName(service : Service) : String
	= service.name.concat('Service')
/]

[query public selectName(service : Service) : String
	= service.name
/]

[query public typeClassName(service : Service) : String
	= service.typePrefix().concat(service.name).concat('Type')
/]

[query public typePrefix(eObject : EObject) : String
	= 'App'
/]


[query public modelName(feature : ServiceAssociation) : String
	= feature.association.modelName()
/]


[query public baseControllerClassName(eObject : EObject) : String
	= 'Controller'
/]

[query public instanceName(menu : Menu) : String
	= menu.name.toLowerFirst()
/]

[query public controllerName(page : Page) : String
	= page.name
/]

[query public controllerClassName(page : Page) : String
	= page.controllerName().concat('Controller')
/]

[query public instanceName(page : Page) : String
	= page.name.toLowerFirst()
/]


[query public actionName(unit : ContentUnit) : String
	= unit.instanceName().concat('Action')
/]

[query public controllerName(unit : DynamicUnit) : String
	= unit.pageDisplayedOn().controllerName()
/]

[query public instanceName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]

[query public routeName(unit : ContentUnit) : String
	= unit.uniqueName()
/]

[query public uniqueName(unit : ContentUnit) : String
	= let key : String
		= if unit.displayedOn.oclIsTypeOf(Page) then
				unit.displayedOn.oclAsType(Page).instanceName()
			else
				unit.displayedOn.oclAsType(UnitAssociation).displayedOn.uniqueName()
			endif
		in key.concat('_').concat(unit.instanceName())
/]

[query public viewName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]


[query public actionName(action : InlineAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).instanceName()
				.concat(action.name.toUpperFirst())
		else
			let association : UnitAssociation
					= action.usedBy.oclAsType(UnitAssociation)
				in association.displayedOn.instanceName()
				.concat(association.name.toUpperFirst())
				.concat(action.name.toUpperFirst())
		endif
/]

[query public instanceName(action : InlineAction) : String
	= action.name.toLowerFirst()
/]

[query public modelName(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).service.name
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.modelName()
		endif
/]

[query public modelName(action : FeatureSupportAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).service.name
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.modelName()
		endif
/]


[query public countName(selection : Selection) : String
	= selection.instanceName().concat('_count')
/]

[query public instanceName(selection : Selection) : String
	= selection.name.toLowerFirst()
/]
