[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]


[query private combinePaths(path1 : String, path2 : String) : String
	= if path1 = '' then
			path2
		else if path2.oclIsUndefined() then
			path1
		else if path2 = '' then
			path1
		else
			path1.concat('/').concat(path2)
		endif endif endif
/]

[query private appendContainingAssociation(path : String, keyEntity : EntityOrView) : String
	= if keyEntity.containingAssociation().oclIsUndefined() then
			path
		else
			path.combinePaths(keyEntity.containingAssociation().opposite.name)
		endif
/]


[template public routeParameters(entityOrView : EntityOrView) post(trim())]
[for (key : Attribute | entityOrView.uriPathKeys()) separator (', ')]
$[key.routeParameterName(entityOrView)/][/for]
[/template]

[query public routeParameterName(attribute : Attribute, entityOrView : EntityOrView) : String
	= if entityOrView.oclIsUndefined() then
			attribute.name
		else if entityOrView.uriPathKeys()->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.modelName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif endif
/]


[query public uriPathValidatedKeys(unit : ContentUnit, parentPath : Boolean) : Sequence(Attribute)
	= let selectType : EntityOrView
			= if not parentPath then
					unit.selectType()
				else
					unit.contentType().parentEntity()
				endif
		in if selectType.oclIsUndefined() then
				Sequence{}
			else
				selectType.uriPathKeys()
					->select(k | not k .validationPattern.oclIsUndefined())
					->select(k | k.validationPattern <> '[^/]+')
			endif
/]

[query public hasValidatedRouteParameters(unit : ContentUnit, parentPath : Boolean) : Boolean
	= unit.uriPathValidatedKeys(parentPath)->notEmpty()
/]


[query private keyPath(entityOrView : EntityOrView, base : EntityOrView) : String
	= if entityOrView.attributeKeys()->isEmpty() then
			''
		else
			entityOrView.attributeKeys()
				->collect(k | k.routeParameterName(base))->sep('{', '}/{', '}')->toString()
		endif
/]

[query public uriPath(entityOrView : EntityOrView) : String
	= entityOrView.uriPath(entityOrView)
/]

[query private uriPath(entityOrView : EntityOrView, base : EntityOrView) : String
	= let keyEntity : EntityOrView = entityOrView.keyEntity()
		in if keyEntity.oclIsUndefined() then
				''
			else if not keyEntity.isContained() then
				keyEntity.keyPath(base)
			else
				keyEntity.container().uriPath(base)
					.appendContainingAssociation(keyEntity)
					.combinePaths(keyEntity.keyPath(base))
			endif endif
/]

[query private parentUriPath(entityOrView : EntityOrView) : String
	= let parentEntity : EntityOrView = entityOrView.parentEntity()
		in if parentEntity.oclIsUndefined() then
				''
			else
				let parentPath : String
					= parentEntity.uriPath(parentEntity)
					in if parentPath = '' then
							''
						else
							parentPath.appendContainingAssociation(entityOrView.keyEntity())
						endif
		endif
/]

[query private contentUriPath(unit : ContentUnit) : String
	= if not unit.oclIsKindOf(DynamicUnit) then
			''
		else
			let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
			in if dynamicUnit.contentType().oclIsUndefined() then
					''
				else
					dynamicUnit.contentType().uriPath()
				endif
		endif
/]

[query private selectUriPath(unit : ContentUnit, suffix : String, parentPath : Boolean) : String
	= let element : String
		= if not unit.oclIsKindOf(SelectableUnit) then
				''
			else
				let selectable : SelectableUnit = unit.oclAsType(SelectableUnit)
				in if selectable.selectionType.oclIsUndefined() then
						''
					else if parentPath then
						selectable.selectionType.parentUriPath()
					else
						selectable.selectionType.uriPath()
					endif endif
			endif
		in element.combinePaths(suffix)
/]

[query public uriPath(unit : ContentUnit) :String
	= unit.uriPath(unit.uriElement, false)
/]

[query public uriPath(unit : ContentUnit, suffix : String, parentPath : Boolean) :String
	= unit.pageDisplayedOn().uriPath().combinePaths(unit.selectUriPath(suffix, parentPath))
/]

[query private uriPath(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			page.uriElement
		else
			page.parentPage.uriPath().combinePaths(page.uriElement)
		endif
/]

[query public supportUriPath(unit : ContentUnit) : String
	= unit.uriPath(unit, unit.uriElement.combinePaths('support'), false)
/]

[query public uriPath(action : DeleteAction) : String
	= action.immediateUnit().pageDisplayedOn().uriPath()
		.combinePaths(action.immediateUnit().contentUriPath())
        .combinePaths(action.uriElement)
/]

[query public uriPath(action : FeatureSupportAction) : String
	= action.immediateUnit().pageDisplayedOn().uriPath()
		.combinePaths(action.immediateUnit().contentUriPath())
        .combinePaths(action.uriElement)
/]


[query private parentUriPath(resource : Resource) : String
	= '/'
/]

[query public uriPath(resource : Resource) : String
	= resource.uriPath(false)
/]

[query public uriPath(resource : Resource, basePath : Boolean) : String
	= let baseUri : String
		= if resource.parentResource.oclIsUndefined() then
				'/'.concat(resource.uriElement)
			else
				resource.parentUriPath().combinePaths(resource.uriElement)
			endif
		in if basePath then
				baseUri
			else
				let entity : EntityOrView 
					= resource.service.serves
					in baseUri.combinePaths(entity.keyEntity().keyPath(entity))
			endif
/]


[query private explicitHomeUnit(model : WafModel) : ContentUnit
	= let homeUnits : Sequence(ContentUnit)
		= model.pages
			->collect(p | p.units)
			->select(u | u.uriPath() = '')
		in if homeUnits->notEmpty() then
				homeUnits->first()
			else
				null
			endif
/]

[query public isHomeUnit(unit : ContentUnit) : Boolean
	= let explicitHome : ContentUnit
		= unit.pageDisplayedOn().partOf.explicitHomeUnit()
		in if not explicitHome.oclIsUndefined() then
				explicitHome = unit
			else 
				let homePage : Page
					= unit.pageDisplayedOn().partOf.homePage()
					in if homePage.units->notEmpty() then
							homePage.units->first() = unit
						else
							false
						endif
			endif
/]