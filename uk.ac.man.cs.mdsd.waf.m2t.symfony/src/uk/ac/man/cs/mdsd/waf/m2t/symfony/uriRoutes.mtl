[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[query public routeParameterName(attribute : EntityAttribute) : String
	= attribute.partOf.modelName().toLowerFirst()
		.concat(attribute.name.toUpperFirst())
/]


[query public hasRouteParameters(entityOrView : EntityOrView) : Boolean
	= entityOrView.uriPathKeys()->notEmpty()
/]

[template public routeParameters(entityOrView : EntityOrView) post(trim())]
[for (key : EntityAttribute | entityOrView.uriPathKeys()) separator (', ')]
$[key.routeParameterName()/][/for]
[/template]

[query public uriPathKeys(entityOrView : EntityOrView) : Sequence(EntityAttribute)
	= let localKeys : Sequence(EntityAttribute) = entityOrView.attributeKeys()
		in if entityOrView.isContained() then
			let parentKeys : Sequence(EntityAttribute) = entityOrView.container().uriPathKeys()
				in if localKeys->isEmpty() then
						parentKeys
					else if parentKeys->isEmpty() then
						localKeys
					else
						localKeys->iterate(k; j : Sequence(EntityAttribute) = parentKeys | j->append(k))
					endif endif
			else
				localKeys
			endif
/]


[query public uriCommonPathKeys(page : Page) : Sequence(EntityAttribute)
	= if page.units->isEmpty() then
			Sequence{}
		else if page.units->size() = 1 then
			page.units->first().uriPathKeys()
		else
			page.units->subOrderedSet(2, page.units->size())->iterate(u;
				common : Sequence(EntityAttribute) = page.units->first().uriPathKeys()
				| common->select(k | u.uriPathKeys()->includes(k)))
		endif endif
/]

[query public uriPath(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			page.uriElement
		else
			let parentUri : String = page.parentPage.uriPath()
			in if parentUri = '' then
					page.uriElement
				else if page.uriElement = '' then
					parentUri
				else
					parentUri.concat('/').concat(page.uriElement)
				endif endif
		endif
/]


[query public hasRouteParameters(unit : ContentUnit) : Boolean
	= unit.uriPathKeys()->notEmpty()
/]

[query public pageUriPath(unit : ContentUnit) : String
	= unit.pageDisplayedOn().uriPath()
/]

[query public parentUriPath(pageUriPath : String, serviceUriPath : String) : String
	= if pageUriPath = '' then
			serviceUriPath
		else if serviceUriPath = '' then
			pageUriPath
		else
			pageUriPath.concat('/').concat(serviceUriPath)
		endif endif
/]

[query public supportUriPath(unit : ContentUnit) : String
	= unit.uriPath().concat('/support')
/]

[query public uriPath(unit : ContentUnit) : String
	= unit.uriPath(false)
/]

[query public uriPath(unit : ContentUnit, create : Boolean) : String
	= ''
--	= let parentUriPath : String
--		= unit.pageUriPath().parentUriPath(unit.serviceUriPath(create))
--		in let uriElement : String
--			= if unit.oclIsTypeOf(CreateUpdateUnit) and create then
--					unit.oclAsType(CreateUpdateUnit).createUriElement
--				else
--					unit.uriElement
--				endif
--			in if parentUriPath = '' then
--					uriElement
--				else if uriElement = '' then
--					parentUriPath
--				else
--					parentUriPath.concat('/').concat(uriElement)
--				endif endif
/]

[query public uriPathKeys(unit : ContentUnit) : Sequence(EntityAttribute)
	= if not unit.oclIsKindOf(DynamicUnit) then
			Sequence{}
		else 
			let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
				in if dynamicUnit.entities->isEmpty() then
						Sequence{}
					else
						dynamicUnit.entities->first().uriPathKeys()
					endif
		endif
/]

[query public uriPath(action : DeleteAction) : String
	= ''
--	= action.immediateUnit().containingUnit().pageUriPath().parentUriPath(
--			action.immediateUnit().services->first().uriPath())
--		.concat('/').concat(action.uriElement)
/]

