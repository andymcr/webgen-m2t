[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]

[query public hasValidatedRouteParameters(unit : ContentUnit) : Boolean
	= unit.hasValidatedRouteParameters(false)
/]

[query public hasValidatedRouteParameters(unit : ContentUnit, parentPath : Boolean) : Boolean
	= unit.uriPathValidatedKeys(parentPath)->notEmpty()
/]

[template public routeParameters(entityOrView : EntityOrView) post(trim())]
[entityOrView.routeParameters(false)/]
[/template]

[template public routeParameters(entityOrView : EntityOrView, parentPath : Boolean) post(trim())]
[for (key : Attribute | entityOrView.uriPathKeys(parentPath)) separator (', ')]
$[key.routeParameterName(entityOrView)/][/for]
[/template]

[query public routeParameterName(attribute : Attribute, entityOrView : EntityOrView) : String
	= if entityOrView.uriPathKeys()->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.modelName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif
/]


[query public uriPathValidatedKeys(unit : ContentUnit) : Sequence(Attribute)
	= unit.uriPathValidatedKeys(false)
/]

[query public uriPathValidatedKeys(unit : ContentUnit, parentPath : Boolean) : Sequence(Attribute)
	= unit.uriPathKeys(parentPath)
		->select(k | not k .validationPattern.oclIsUndefined())
		->select(k | k.validationPattern <> '[^/]+')
/]


[query private combinePaths(path1 : String, path2 : String) : String
	= if path1 = '' then
			path2
		else if path2 = '' then
			path1
		else
			path1.concat('/').concat(path2)
		endif endif
/]

[query private parentUriPath(yyy : EntityOrView) : String
	= let keyEntity : EntityOrView
		= yyy.keyEntity()
		in if keyEntity.oclIsUndefined() then
				''
			else if not keyEntity.isContained() then
				''
			else
				keyEntity.container().uriPath(yyy)
					.concat('/')
					.concat(keyEntity.containingAssociation().opposite.name)
			endif endif
/]

[query public uriPath(entityOrView : EntityOrView) : String
	= entityOrView.uriPath(entityOrView)
/]

[query private uriPath(entityOrView : EntityOrView, base : EntityOrView) : String
	= let keyEntity : EntityOrView = entityOrView.keyEntity()
		in if keyEntity.oclIsUndefined() then
				''
			else
				let keyPath : String
					= keyEntity.attributeKeys()
						->collect(k | k.routeParameterName(base))->sep('{', '}/{', '}')->toString()
					in if not keyEntity.isContained() then
							keyPath
						else
							let parentPath : String
								= keyEntity.container().uriPath(base)
								in if parentPath = '' then
										keyEntity.containingAssociation().opposite.name
											.concat('/')
											.concat(keyPath)
									else
										parentPath
											.concat('/')
											.concat(keyEntity.containingAssociation().opposite.name)
											.concat('/')
											.concat(keyPath)
									endif
						endif
			endif
/]

[query public uriPath(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			page.uriElement
		else
			page.parentPage.uriPath().combinePaths(page.uriElement)
		endif
/]

[query private entityUriPath(unit : ContentUnit, parentPath : Boolean) : String
	= if not unit.oclIsKindOf(DynamicUnit) then
			''
		else
			let dynamicUnit : DynamicUnit
				= unit.oclAsType(DynamicUnit)
				in if dynamicUnit.entities->isEmpty() then
						''
					else
						let entityOrView : EntityOrView
							= dynamicUnit.entities->first()
							in if parentPath then
									entityOrView.parentUriPath()
								else
									entityOrView.uriPath()
								endif
					endif
		endif
/]

[query public uriPath(unit : ContentUnit) : String
	= unit.uriPath(false)
/]

[query public uriPath(unit : ContentUnit, create : Boolean) : String
	= let localPath : String
		= let entityPath : String
			= if not unit.oclIsKindOf(DynamicUnit) then
					unit.entityUriPath(create)
				else if unit.oclAsType(DynamicUnit).noRouteParameters then
					''
				else
					unit.entityUriPath(not unit.oclIsKindOf(Selectable) or create)
				endif endif
			in let uriElement : String
				= if unit.oclIsTypeOf(CreateUpdateUnit) and create then
						'create'
					else
						unit.uriElement
					endif
				in if uriElement = '' then
						entityPath
					else if entityPath = '' then
						uriElement
					else
						entityPath.concat('/').concat(uriElement)
					endif endif
		in unit.pageDisplayedOn().uriPath().combinePaths(localPath)
/]

[query public supportUriPath(unit : ContentUnit) : String
	= unit.uriPath().concat('/support')
/]

[query public uriPath(action : DeleteAction) : String
	= let localPath : String
		= action.immediateUnit().entityUriPath(false)
			.concat('/').concat(action.uriElement)
		in let pagePath : String
			= action.immediateUnit().pageDisplayedOn().uriPath()
			in pagePath.combinePaths(localPath)
/]

[query public uriPath(action : FeatureSupportAction) : String
	= let localPath : String
		= action.immediateUnit().entityUriPath(false)
			.concat('/').concat(action.uriElement)
		in let pagePath : String
			= action.immediateUnit().pageDisplayedOn().uriPath()
			in pagePath.combinePaths(localPath)
/]
