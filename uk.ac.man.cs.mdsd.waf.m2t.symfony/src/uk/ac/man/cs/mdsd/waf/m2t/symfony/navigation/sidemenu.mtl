[comment encoding = UTF-8 /]
[module sidemenu(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public contextMenus(model : WafModel)]
[let contextMenus : Set(GlobalMenu)
	= model.globalMenus->collect(m | m.entries)
		->select(e | e.oclIsTypeOf(SubmenuEntry)).oclAsType(SubmenuEntry)
		->collect(e | e.submenu)->asSet()]
[for (menu : GlobalMenu | contextMenus)]
	[menu.menu()/]
[/for]
[/let]
[/template]


[template private menu(menu : GlobalMenu)]
[file(menu.menuFilename(), false)]
{% trans_default_domain "navigation" %}
<div class="nav-content" id="[menu.instanceName()/]">
 <ul class="tabs tabs-transparent">
[for (entry : MenuEntry | menu.entries)]
  [if (entry.requiresRole <> '')]{% if is_granted('[entry.requiresRole/]') %}[/if][entry.entry()/][if (entry.requiresRole <> '')]
{% endif %}[/if]

[/for]
 </ul>
</div>
[/file]
[/template]


[template private menuEntries(menu : Menu)
	? (menu.oclIsTypeOf(DynamicMenu)) post(trim())]
[let dynamicMenu : DynamicMenu = menu.oclAsType(DynamicMenu)]
[if (dynamicMenu.title.oclIsUndefined())]
<h1 class="[dynamicMenu.captionClass/][if (dynamicMenu.omitCaption)] hidden[/if]">{{ 'label.[dynamicMenu.id()/]' | trans }}</h1>
[else]
<h1 class="[dynamicMenu.captionClass/][if (dynamicMenu.omitCaption)] hidden[/if]">{{ [dynamicMenu.instanceName()/].[comment dynamicMenu dynamicTitle modelPropertyName()/] }}</h1>
[/if]
<ul class="[dynamicMenu.layoutClass/]">
 [menu.entries.entry()/]
</ul>
[/let]
[/template]


[template private entry(entry : MenuEntry)
	? (entry.oclIsTypeOf(ActionMenuEntry)) post(trim())]
[let action : ActionMenuEntry = entry.oclAsType(ActionMenuEntry)]
<li class="tab{% if app.request.attributes.get('_route') == '[action.routeName()/]' %} active{% endif %}">[if (action.action.oclIsUndefined())]
<span>{{ '[entry.partOf.id()/].labels.[entry.id()/]' | trans }}</span>[else]
<a href="{{ path('[action.routeName()/]'[if (not action.query.oclIsUndefined())]
, {[for (parameter : QueryParameter | action.query.parameters) separator(', ')]
'[parameter.formal.name/]': '[parameter.value/]'[/for]}[/if]) }}">{{ '[action.partOf.id()/].labels.[action.id()/]' | trans }}</a>[/if]
</li>
[/let]
[/template]