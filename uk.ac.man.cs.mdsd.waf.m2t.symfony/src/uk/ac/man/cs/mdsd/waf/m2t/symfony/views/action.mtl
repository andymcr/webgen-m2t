[comment encoding = UTF-8 /]
[module action(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]


[template public unitSupportLinks(unit : DynamicUnit, accessor : String) post(trim())]
<form action="{{ path('[unit.supportRouteName()/]', { [unit.contentType().routeActualParameters(unit.contentType(), accessor, unit.hasObjectAccess(), unit, unit.oclIsKindOf(IndexUnit))/] }) }}" id="[unit.instanceName()/]" class="[unit.controlClass/]">
[for (action : UnitSupportAction | unit.supportActions())]
 [action.unitSupportLink()/]
[/for]
</form>
[/template]

[template public unitSupportLink(action : UnitSupportAction) post(trim())]
<input type="submit" name="[action.actionName()/]" value="[action.displayLabel/]"[if (not action.confirmMessage.oclIsUndefined())]
onclick="return confirm('[action.confirmMessage/]');"[/if]/>
[/template]


[template public getValue(field : UnitField, accessor : String) post(trim())]
[if (field.oclIsTypeOf(UnitFeature))]
[field.oclAsType(UnitFeature).getValue(accessor)/]
[else]
NULL
[/if]
[/template]

[template public getValue(feature : UnitFeature, accessor : String) post(trim())]
[if (feature.oclIsTypeOf(UnitAttribute))]
[feature.oclAsType(UnitAttribute).getValue(accessor)/]
[else]
[feature.oclAsType(UnitAssociation).getValue(accessor)/]
[/if]
[/template]

[template public getValue(attribute : UnitAttribute, accessor : String) post(trim())]
[attribute.attribute.getValue(accessor)/]
[/template]

[template public getValue(association : UnitAssociation, accessor : String) post(trim())]
[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.getValue(accessor)/]
[else]
	[if (not association.valueDisplay.oclIsUndefined())]
[association.valueDisplay.label(accessor)/]
	[else]
[accessor/].defaultLabel()
	[/if]
[/if]
[/template]

[template public getValue(child : ChildPath, accessor : String)
	? (child.oclIsTypeOf(ChildPathAttribute)) post(trim())]
[let attribute : ChildPathAttribute = child.oclAsType(ChildPathAttribute)]
[attribute.attribute.getValue(accessor)/]
[/let]
[/template]

[template public getValue(child : ChildPath, accessor : String)
	? (child.oclIsTypeOf(ChildPathAssociation)) post(trim())]
[let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)]
[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.getValue(accessor)/]
[else]
[accessor/].defaultLabel()
[/if]
[/let]
[/template]


[template public getValue(attribute : Attribute, accessor : String)
	? (attribute.isDataType() and not attribute.isEnumerationType()
		or attribute.isDate() or attribute.isUrl() or attribute.isResource()) post(trim())]
[accessor/]
[/template]

[template public getValue(attribute : Attribute, accessor : String)
	? (attribute.isEnumerationType()) post(trim())]
[accessor/] | [attribute.enumerationType().filterName()/] | trans({}, 'entity')
[/template]


[template public actionLink(action : InlineAction, entity : EntityOrView, unit : ContentUnit, routeParametersAccessor : String, label : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(DeleteAction))  post(trim())]
[let delete : DeleteAction = action.oclAsType(DeleteAction)]
[let page : Page = delete.immediateUnit().pageDisplayedOn()]
[action.anchor(delete.routeName(), entity, routeParametersAccessor, label, title, delete.confirmMessage, conditionAccessor, unit, page.hasFilterParameters() or page.hasPagination(), objectAccess)/]
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, entity : EntityOrView, unit : ContentUnit, routeParametersAccessor : String, label : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(FeatureSupportAction))  post(trim())]
[let feature : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[action.anchor(feature.routeName(), entity, routeParametersAccessor, label, title, feature.confirmMessage, conditionAccessor, unit, false, objectAccess)/]
[/let]
[/template]

[template public actionLink(action : InlineAction, dummy1 : EntityOrView, dummy2 : ContentUnit, routeParametersAccessor : String, label : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(SelectAction))  post(trim())]
[let select : SelectAction = action.oclAsType(SelectAction)]
[let page : Page = select.immediateUnit().pageDisplayedOn()]
[let targetUnit : ContentUnit = select.target.oclAsType(ContentUnit)]
[action.anchor(targetUnit.routeName(), select.target.selectionType, routeParametersAccessor, label, title, null, conditionAccessor, targetUnit, page = targetUnit.pageDisplayedOn() and (page.hasFilterParameters() or page.hasPagination()), objectAccess)/]
[/let]
[/let]
[/let]
[/template]

[template private anchor(action : InlineAction, routeName : String, entity : EntityOrView, routeParametersAccessor : String, label : String, title : String, confirmMessage : String, conditionAccessor : String, targetUnit : ContentUnit, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (not action.requiresRole.oclIsUndefined())]
{% if is_granted('[action.requiresRole/]') %}[/if][action.anchor2(routeName, entity, routeParametersAccessor, label, title, confirmMessage, conditionAccessor, targetUnit, targetSamePage, objectAccess)/][if (not action.requiresRole.oclIsUndefined())]
{% endif %}[/if]
[/template]

[template private anchor2(action : InlineAction, routeName : String, entity : EntityOrView, routeParametersAccessor : String, label : String, title : String, confirmMessage : String, conditionAccessor : String, targetUnit : ContentUnit, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (action.displayWhen.oclIsUndefined())]
	[if (action.enableWhen.oclIsUndefined())]
[action.anchor3(routeName, entity, routeParametersAccessor, label, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]
	[else]
{% if [action.enableWhen.twigExpression(conditionAccessor)/] %}[action.anchor3(routeName, entity, routeParametersAccessor, label, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]{% else %}[label/]{% endif %}
	[/if]
[else]
{% if [action.displayWhen.twigExpression(conditionAccessor)/] %}[if (action.enableWhen.oclIsUndefined())]
[action.anchor3(routeName, entity, routeParametersAccessor, label, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/][else]
{% if [action.enableWhen.twigExpression(conditionAccessor)/] %}[action.anchor3(routeName, entity, routeParametersAccessor, label, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]{% else %}[label/]{% endif %}[/if]
{% endif %}
[/if]
[/template]

[template private anchor3(action : InlineAction, routeName : String, entity : EntityOrView, routeParametersAccessor : String, label : String, title : String, confirmMessage : String, targetUnit : ContentUnit, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
<a href="{{ path('[routeName/]', [if (targetSamePage)]app.request.query.all|merge([/if]{ [entity.routeActualParameters(entity, routeParametersAccessor, objectAccess, targetUnit, false)/] }[if (targetSamePage)])[/if]) }}" title="[action.displayLabel/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]"[if (not confirmMessage.oclIsUndefined())]
 onclick="return confirm('[confirmMessage/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]');"[/if]>[label/]</a>
[/template]

[template public routeActualParameters(entity : EntityOrView, base : EntityOrView, accessor : String, objectAccess : Boolean, targetUnit : ContentUnit, parentPath : Boolean) post(trim())]
[if (entity.isContained())]
[entity.container().routeActualParameters(base, accessor.concat('.').concat(entity.containingAssociation().modelPropertyName()), objectAccess, targetUnit, parentPath)/]
[/if]
[if (not parentPath)]
	[for (key : Attribute | entity.activeKeys(targetUnit))]
	[let keyAccessor : String
		= if objectAccess then
				accessor.concat('.').concat(key.modelPropertyName())
			else
				accessor.concat('.').concat(key.columnName())
			endif]
'[key.routeParameterName(base)/]': [key.getValue(keyAccessor)/][if (key.isDate())].format('Y-m-d H:i:s')[/if][if (key.encodeUriKey)] | url_encode[/if],
	[/let]
	[/for]
[/if]
[/template]

