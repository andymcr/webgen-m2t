[comment encoding = UTF-8 /]
[module service(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::criteria::criteriaDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::criteria::queryDoctrine/]

[template public service(service : Service)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Tools\Pagination\Paginator;


class [service.className()/]
{
    private $doctrine;

    public function __construct($doctrine)
    {
        $this->doctrine = $doctrine;
    }

    [service.findMethod()/]

    [service.findAllMethod()/]

    [service.deleteMethod()/]

    [service.removeMethod()/]

    [service.saveMethod()/]

[for (selection : Selection | service.selections)]
    [selection.selectionMethod(service)/]

[/for]

    [service.childSelectionMethods()/]

    [service.getRepositoryMethod()/]

    [service.createQueryBuilderMethod()/]
}
[/file]
[/template]

[template private findMethod(service : Service) post(trim())]
public function find([service.serves.routeParameters()/])
{
	$queryBuilder = $this->createQueryBuilder();
	return $queryBuilder
[if (service.serves.isContained() or service.serves.hasAssociationKeys())]
        [service.keyJoin(service.serves)/]
[/if]
[if (service.serves.uriPathKeys()->size() < 2)]
        ->where([service.serves.uriPathKeys()->first().findWhere(service)/])
[else]
        ->where(
            [service.serves.findWhere(service) /]
        )
[/if]
[for (key : EntityAttribute | service.serves.uriPathKeys())]
        ->setParameter('[key.routeParameterName()/]', $[key.routeParameterName()/])
[/for]
        ->getQuery()->getSingleResult();
}
[/template]

[template private keyJoin(service : Service, entityOrView : EntityOrView) post(trim())]
[if (service.serves.isContained())]
[let container : EntityOrView = service.serves.container()]
[let containerService : Service = service.entityService(container)]
->join('[service.selectName()/].[service.serves.containingAssociation().modelPropertyName()/]', '[containerService.selectName()/]')
[containerService.keyJoin(container)/]
[/let]
[/let]
[/if]
[for (key : EntityAssociation | service.serves.associationKeys()->select(k | not k.container))]
[let targetService : Service = service.entityService(key.targetType())]
->join('[service.selectName()/].[key.modelPropertyName()/]', '[targetService.selectName()/]')
[/let]
[/for]
[/template]

[template private findWhere(entityOrView : EntityOrView, service : Service) post(trim())]
[let keys : Sequence(EntityAttribute) = entityOrView.uriPathKeys()]
[for (key : EntityAttribute | keys->subSequence(1, keys->size() - 1))]
$queryBuilder->expr()->andX([key.findWhere(service)/],
[/for]
[keys->last().findWhere(service)/]
[for (key : EntityAttribute | keys->subSequence(1, keys->size() - 1))])[/for]
[/let]
[/template]

[template private findWhere(key : EntityAttribute, service : Service) post(trim())]
$queryBuilder->expr()->eq('[service.entityService(key.partOf).selectName()/].[key.columnName()/]', ':[key.routeParameterName()/]')
[/template]

[template private findAllMethod(service : Service) post(trim())]
public function findAll()
{
	return $this->getRepository()->findAll();
}
[/template]

[template private deleteMethod(service : Service) post(trim())]
public function delete($entity, $flush = false)
{
	$entityManager = $this->doctrine->getEntityManager();
    $entityManager->delete($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private removeMethod(service : Service) post(trim())]
public function remove($entity, $flush = false)
{
	$entityManager = $this->doctrine->getEntityManager();
    $entityManager->remove($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private saveMethod(service : Service) post(trim())]
public function save($entity, $flush = false)
{
	$entityManager = $this->doctrine->getEntityManager();
    $entityManager->persist($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private selectionMethod(selection : Selection, service : Service) post(trim())]
public function [selection.methodName()/]([for (parameter : SelectionParameter | selection.parameters) separator(', ')]
$[parameter.name/] = [if (parameter.defaultValue.oclIsUndefined())]NULL[else]'[parameter.defaultValue/]'[/if][/for][if (selection.parameters->notEmpty())], [/if]$page = NULL, $pageSize = 10)
{
    $queryBuilder = $this->createQueryBuilder();
[for (join : Association | selection.joins)]
    $queryBuilder->join('[service.selectName()/].[join.modelPropertyName()/]', '[join.selectName(service)/]');
[/for]
[if (not selection.filter.oclIsUndefined())]
    $queryBuilder->where([selection.filter.queryExpression()/]);
[/if]
[if (selection.ordering->size() > 0)]
    $queryBuilder->orderBy([selection.ordering->first().path.queryExpression()/], [if (selection.ordering->first().oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if]);
	[if (selection.ordering->size() > 1)]
		[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
    $queryBuilder->addOrderBy([selection.ordering->first().path.queryExpression()/], [if (order.oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if]);
		[/for]
	[/if]
[/if]
    if ($page)
    {
        $queryBuilder->setFirstResult(($page - 1) * $pageSize);
        $queryBuilder->setMaxResults($pageSize);
    }
[if (selection.limit > 0)]
    else
        $queryBuilder->setMaxResults([selection.limit/]);
[/if]
    $query = $queryBuilder->getQuery();
[if (not selection.filter.oclIsUndefined())]
    [selection.filter.queryParameter()/]
[/if]

    if ($page)
        return new Paginator($query);
    else
        return $query->getResult();
}
[/template]

[template private childSelectionMethods(service : Service) post(trim())]
[for (association : Association | service.serves.associations())]
	[if (not association.isSingleton(service.serves))]
	[let targetService : Service = service.entityService(association.targetType())]
	    [for (selection : Selection | targetService.selections)]
[service.childSelectionMethod(association, selection)/]

		[/for]
	[/let]
	[/if]
[/for]
[/template]

[template private childSelectionMethod(service : Service, association : Association, selection : Selection) post(trim())]
public function [association.name/][selection.instanceName().toUpperFirst()/]($[service.instanceName()/])
{
    $criteria = Criteria::create();
[if (not selection.filter.oclIsUndefined())]
    $criteria->where([selection.filter.criteriaExpression()/]);
[/if]
[if (selection.ordering->size() > 0)]
    $criteria->orderBy(array(
	[for (order : Order | selection.ordering)]
        [order.path.criteriaExpression()/] => [if (selection.ordering->first().oclIsTypeOf(Asc))]Criteria::ASC[else]Criteria::DESC[/if],
	[/for]
    ));
[/if]

    return $[service.instanceName()/]->get[association.modelPropertyName().toUpperFirst()/]()->matching($criteria);
}
[/template]

[template private getRepositoryMethod(service : Service) post(trim())]
public function getRepository()
{
    return $this->doctrine->getRepository('[service.appBundleName()/]:[service.serves.modelName()/]');
}
[/template]

[template private createQueryBuilderMethod(service : Service) post(trim())]
public function createQueryBuilder()
{
    return $this->getRepository()->createQueryBuilder('[service.selectName()/]');
}
[/template]
