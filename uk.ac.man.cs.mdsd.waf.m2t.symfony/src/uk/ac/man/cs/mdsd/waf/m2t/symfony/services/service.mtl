[comment encoding = UTF-8 /]
[module service(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::criteriaDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::queryDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::accessor/]

[template public service(service : Service, model : WafModel)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

use Doctrine\Common\Collections\Criteria;
[if (not service.serves.oclIsUndefined())]
	[if (service.serves.hasPseudoAssociations())]
use Doctrine\ORM\Query\Expr;
	[/if]
[/if]
[if (service.selections->notEmpty() or not service.serves.oclIsUndefined() and service.findAll.oclIsUndefined())]
use Doctrine\ORM\Tools\Pagination\Paginator;
[/if]
[if (not service.serves.oclIsUndefined())]
	[if (service.serves.attributes()->notEmpty())]
use [service.modelsNamespace()/]\[service.serves.modelClassName()/];
	[/if]
[/if]
[if (service.operations->notEmpty())]
// [protected ('operations')]
// [/protected]
[/if]

class [service.className()/]
{
[for (constant : Constant | service.constants)]
    [if (constant.useFunction())]private[else]public[/if] static $[constant.name/] = [if (constant.useFunction())]null[else][constant.value.queryExpression()/][/if];


[/for]
[if (not service.serves.oclIsUndefined())]
    private $doctrine;

	[if (service.serves.hasPseudoAssociations())]
    private $entityManager;

	[/if]
[/if]
[for (uses : Service | service.uses)]
    private $[uses.instanceServiceName()/];

[/for]
[if (not service.serves.oclIsUndefined())]
	[if (model.isAuthenticated())]
		[if (service = model.userService())]
    private $securityTokenStorage;
		[else]
    private $[model.userService().instanceName()/];

		[/if]
	[/if]
[/if]
[if (not service.serves.oclIsUndefined() or service.uses->notEmpty())]
    public function __construct([if (not service.serves.oclIsUndefined())]$doctrine[if (service.serves.hasPseudoAssociations())]
, $entityManager[/if][if (model.isAuthenticated())], [if (service = model.userService())]
$securityTokenStorage[else]$[model.userService().instanceName()/][/if][/if][if (service.uses->notEmpty())], [/if][/if][for (uses : Service | service.uses) separator(', ')]$[uses.instanceName()/][/for])
    {
	[if (not service.serves.oclIsUndefined())]
        $this->doctrine = $doctrine;
		[if (service.serves.hasPseudoAssociations())]
        $this->entityManager = $entityManager;
		[/if]
	[/if]
	[for (uses : Service | service.uses)]
        $this->[uses.instanceServiceName()/] =  $[uses.instanceName()/];
	[/for]
	[if (not service.serves.oclIsUndefined())]
		[if (model.isAuthenticated())]
			[if (service = model.userService())]
        $this->securityTokenStorage = $securityTokenStorage;
			[else]
        $this->[model.userService().instanceName()/] = $[model.userService().instanceName()/];
			[/if]
		[/if]
	[/if]
    }

[/if]
[for (constant : Constant | service.constants->select(c | c.useFunction()))]
    public static function [constant.name/]()
    {
	[if (constant.value.oclIsUndefined())]
        // [protected ('constant '.concat(constant.name))]
        // [/protected]
	[else]
		[if (constant.value.oclIsTypeOf(TimeLiteral))]
        if (empty($[constant.name/])) {
            $[constant.name/] = new \DateTime('[constant.value.oclAsType(TimeLiteral).value/]');
        }

        return $[constant.name/];
		[/if]
	[/if]
    }

[/for]
[if (not service.serves.oclIsUndefined())]
	[if (service.findOne.oclIsUndefined() and service.serves.hasRouteParameters())]
    [service.findMethod()/]

	[/if]
	[if (service.findAll.oclIsUndefined())]
    [service.findAllMethod()/]

	[/if]
	[if (service.serves.attributes()->select(a | not a.hasSlugFields())->notEmpty())]
    [service.createMethod()/]

	[/if]
    [service.removeMethod()/]

    [service.saveMethod()/]

[/if]
[if (model.isLocallyAuthenticated())]
[let authentication : LocalAuthenticationSystem = model.localAuthentication()]
	[if (model.userService() = service)]
    [authentication.getUserMethod()/]

	[/if]
[/let]
[elseif (model.isCasAuthenticated())]
[let authentication : CasAuthentication = model.casAuthentication()]
	[if (model.userService() = service)]
    [authentication.getUserMethod(model.userService())/]

	[/if]
[/let]
[/if]
[for (selection : Selection | service.selections)]
    [selection.selectionMethod(service, model.userService())/]

[/for]
[if (not service.serves.oclIsUndefined())]
	[if (service.serves.associations()->select(a | not a.isSingleton(service.serves))
		->collect(a | a.targetType().services(model)->first().selections->select(s | s.fields->isEmpty()))->notEmpty())]
    [service.childSelectionMethods(model)/]

	[/if]
	[if (service.serves.associations()->select(a | a.oclIsKindOf(EntityAssociation) and a.isPseudo())->notEmpty())]
    [service.serves.pseudoAssociationMethods(model)/]

	[/if]
    [service.getRepositoryMethod()/]

    [service.createQueryBuilderMethod()/]

[/if]
[for (operation : BusinessOperation | service.operations)]
    [operation.businessOperation()/]

[/for]
[if (service.operations->notEmpty())]
/*
 * [protected ('operations.support')]
 */
// [/protected]
[/if]
}
[/file]
[/template]

[template private findMethod(service : Service) post(trim())]
[let entity : EntityOrView = service.serves]
public function find([service.serves.routeParameters()/])
{
	$queryBuilder = $this->createQueryBuilder();
	return $queryBuilder
[if (entity.isContained() or entity.hasAssociationKeys())]
        [entity.containerJoin()/]
[/if]
[if (entity.uriPathKeys()->notEmpty())]
	[if (entity.uriPathKeys()->size() < 2)]
        ->where([entity.uriPathKeys()->first().findWhere(entity)/])
	[else]
        ->where(
            [entity.findWhere(entity) /]
        )
	[/if]
[/if]
[for (key : Attribute | entity.uriPathKeys())]
        ->setParameter('[key.routeParameterName(entity)/]', $[key.routeParameterName(entity)/])
[/for]
        ->getQuery()->getOneOrNullResult();
}
[/let]
[/template]

[template private containerJoin(entity : EntityOrView) post(trim())]
[let container : EntityOrView = entity.container()]
->join('[entity.selectName()/].[entity.containingAssociation().modelPropertyName()/]', '[container.selectName()/]')
[if (container.isContained())]
[container.containerJoin()/]
[/if]
[/let]
[for (key : EntityAssociation | entity.associationKeys()->select(k | not k.container))]
->join('[entity.selectName()/].[key.modelPropertyName()/]', '[key.targetType().selectName()/]')
[/for]
[/template]

[template private findWhere(entityOrView : EntityOrView, base : EntityOrView) post(trim())]
[let keys : Sequence(Attribute) = entityOrView.uriPathKeys()]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))]
$queryBuilder->expr()->andX([key.findWhere(base)/],
[/for]
[keys->last().findWhere(base)/]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))])[/for]
[/let]
[/template]

[template private findWhere(key : Attribute, base : EntityOrView) post(trim())]
$queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(base)/]')
[/template]

[template private findAllMethod(service : Service) post(trim())]
public function findAll([service.limitFormals()/])
{
    if ($offset < 0)
	    return $this->getRepository()->findAll();
    else {
        $queryBuilder = $this->createQueryBuilder();
        $queryBuilder->setFirstResult($offset);
        $queryBuilder->setMaxResults($limit);
        $query = $queryBuilder->getQuery();
        return new Paginator($query[if (service.serves.primaryKeys()->size() > 1)], false[/if]);
    }
}
[/template]

[query private joinProperty(authentication : LocalAuthenticationSystem) : String
	= if authentication.authenticationKey = AuthenticationKeyTypes::Email then
			'getEmail()'
		else if authentication.authenticationKey = AuthenticationKeyTypes::Username then
			'getUsername()'
		else
			'unhandled'
		endif endif
/]

[template private createMethod(service : Service) post(trim())]
[let entity : EntityOrView = service.serves]
public function create([for (attribute : Attribute | entity.attributes()->select(a | not a.hasSlugFields())) separator(', ')]$[attribute.instanceName()/] = null[/for], $flush = false)
{
    $new = new [entity.modelName()/]();
[for (attribute : Attribute | entity.attributes()->select(a | not a.hasSlugFields()))]
    $new->set[attribute.modelPropertyName().toUpperFirst()/]($[attribute.instanceName()/]);
[/for]
    $this->save($new, $flush);
    return $new;
}
[/let]
[/template]

[template private removeMethod(service : Service) post(trim())]
public function remove($entity, $flush = false)
{
	$entityManager = $this->doctrine->getManager();
    $entityManager->remove($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private saveMethod(service : Service) post(trim())]
public function save($entity, $flush = false)
{
	$entityManager = $this->doctrine->getManager();
    $entityManager->persist($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private getUserMethod(authentication : CasAuthentication, service : Service) post(trim())]
public function getUser()
{
    return $this->securityTokenStorage->getToken()->getUser();
}
[/template]

[template private getUserMethod(authentication : LocalAuthenticationSystem) post(trim())]
public function getUser()
{
    $user = $this->securityTokenStorage->getToken()->getUser();
    if (empty($user))
        return null;

    return $this->find($user->[authentication.joinProperty()/]);
 }
[/template]

[template private selectionMethod(selection : Selection, service : Service, userService : Service)
	? (selection.filters->isEmpty()) post(trim())]
public function [selection.methodName/]([selection.formals()/])
{
    [selection.builderCode()/]
    $query = $queryBuilder->getQuery();
[if (selection.hasParameters())]
    [selection.queryParametersCode(userService)/]
[/if]

    [selection.queryResult(service)/]
}
[/template]

[template private selectionMethod(selection : Selection, service : Service, userService : Service)
	? (selection.filters->notEmpty()) post(trim())]
private function [selection.builderMethodName()/]([selection.formals()/])
{
    [selection.builderCode()/]
    return $queryBuilder;
}

[if (selection.hasParameters())]
private function [selection.parametersMethodName()/]($query)
{
    [selection.queryParametersCode(userService)/]
}

[/if]
public function [selection.methodName/]([selection.formals()/])
{
    $query = $this->[selection.builderMethodName()/]([selection.actuals()/])->getQuery();
[if (selection.hasParameters())]
    $this->[selection.parametersMethodName()/]($query);
[/if]

    [selection.queryResult(service)/]
}
[for (filter : Filter | selection.filters)]

public function [filter.methodName/]([filter.formals()/])
{
    $queryBuilder = $this->[selection.builderMethodName()/]([selection.actuals()/]);
    $queryBuilder->[if (selection.condition.oclIsUndefined())]where[else]andWhere[/if]([filter.condition.queryExpression()/]);
    $query = $queryBuilder->getQuery();
	[if (selection.hasParameters())]
    $this->[selection.parametersMethodName()/]($query);
	[/if]
	[for (parameter : FormalParameter | filter.parameters)]
    $query->setParameter('[parameter.name/]', $[parameter.name/]);
	[/for]

    [selection.queryResult(service)/]
}
[/for]
[/template]

[template private formals(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined() or selection.parameters->notEmpty())]
[selection.selectionFormals()/][if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[selection.partOf.limitFormals()/][/if]
[/template]

[template private formals(filter : Filter) post(trim())]
[if (not filter.selection.selectVia.oclIsUndefined() or filter.selection.parameters->notEmpty())]
[selection.selectionFormals()/][if (filter.parameters->notEmpty() or filter.selection.limit <> 1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterFormals()/][if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[filter.selection.partOf.limitFormals()/][/if]
[/template]

[template private selectionFormals(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined())]
	[for (key : Attribute | selection.selectVia.targetType().uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectVia.targetType())/][/for]
[if (selection.parameters->notEmpty())]
, [/if]
[/if]
[if (selection.parameters->notEmpty())]
	[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/if]
[/template]

[template private limitFormals(service : Service) post(trim())]
$offset = 0, $limit = 10
[/template]

[template private criterialLimitFormals(selection : Selection) post(trim())]
$offset = 0, $limit = 0
[/template]

[template private filterFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private actuals(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined() or selection.parameters->notEmpty())]
[selection.selectionActuals()/][if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[selection.limitActuals()/][/if]
[/template]

[template private actuals(filter : Filter) post(trim())]
[if (not filter.selection.selectVia.oclIsUndefined() or filter.selection.parameters->notEmpty())]
[selection.selectionActuals()/][if (filter.parameters->notEmpty() or filter.selection.limit <> 1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterActuals()/][if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[filter.selection.limitActuals()/][/if]
[/template]

[template private selectionActuals(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined())]
	[for (key : Attribute | selection.selectVia.partOf.uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectVia.partOf)/][/for]
[if (selection.parameters->notEmpty())]
, [/if]
[/if]
[if (selection.parameters->notEmpty())]
	[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][/for]
[/if]
[/template]

[template private limitActuals(selection : Selection) post(trim())]
$offset, $limit
[/template]

[template private filterActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private builderCode(selection : Selection) post(trim())]
$queryBuilder = $this->createQueryBuilder();
[if (selection.fields->notEmpty())]
[selection.fields()/]
[/if]
[if (selection.joins->notEmpty() or not selection.selectVia.oclIsUndefined())]
[selection.joins()/]
[/if]
[if (not selection.selectVia.oclIsUndefined() or not selection.condition.oclIsUndefined())]
[selection.condition()/]
[/if]
[if (selection.ordering->notEmpty())]
[selection.orderBy()/]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
if ($limit > 0) {
    $queryBuilder->setFirstResult($offset);
    $queryBuilder->setMaxResults($limit);
}
	[if (selection.limit > 0)]
		[if (selection.joins->notEmpty())]
else
		[/if]
    $queryBuilder->setMaxResults([selection.limit/]);
	[/if]
[/if]
[if (selection.distinct)]
$queryBuilder->distinct();
[/if]
[/template]

[template private fields(selection : Selection) post(trim())]
[let first : Feature = selection.fields->first()]
$queryBuilder->select([first.field(first.alias(selection))/]);
[/let]
[if (selection.fields->size() > 1)]
	[for (field : Feature | selection.fields->subOrderedSet(2, selection.fields->size()))]
$queryBuilder->addSelect([field.field(field.alias(selection))/]);
	[/for]
[/if]
[/template]

[template private field(field : Feature, alias : String) post(trim())]
'[field.partOf.selectName()/].[field.columnName()/][if (not alias.oclIsUndefined())]
 [alias/][/if]'
[/template]

[query private entities(selection : Selection) : Set(EntityOrView)
	= selection.joins->collect(a | a.targetType())->asSet()
/]

[template private joins(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined())]
	[if (selection.entities()->excludes(selection.selectVia.targetType()))]
$queryBuilder->join('[selection.selectVia.sourceType().selectName()/].[selection.selectVia.modelPropertyName()/]', '[selection.selectVia.targetType().selectName()/]');
	[/if]
[/if]
[for (join : Association | selection.joins)]
$queryBuilder->join('[join.partOf.selectName()/].[join.modelPropertyName()/]', '[join.targetType().selectName()/]');
[/for]
[/template]

[template private condition(selection : Selection) post(trim())]
[if (not selection.selectVia.oclIsUndefined())]
[let routingEntity : EntityOrView = selection.selectVia.targetType()]
	[if (routingEntity.uriPathKeys()->size() = 1)]
	[let key : Attribute = routingEntity.uriPathKeys()->first()]
$queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(routingEntity)/]'));
	[/let]
	[else]
$queryBuilder->where($queryBuilder->expr->andX(
		[for (key : Attribute | routingEntity.uriPathKeys())]
    $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(routingEntity)/]')[if (i <> routingEntity.uriPathKeys()->size())],[/if]
		[/for]
));
	[/if]
[/let]
[/if]
[if (not selection.condition.oclIsUndefined())]
$queryBuilder->[if (not selection.selectVia.oclIsUndefined())]andWhere[else]where[/if]([selection.condition.queryExpression()/]);
[/if]
[/template]

[template private orderBy(selection : Selection) post(trim())]
$queryBuilder->orderBy([selection.ordering->first().path.queryExpression()/], [selection.ordering->first().order()/]);
[if (selection.ordering->size() > 1)]
	[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
$queryBuilder->addOrderBy([order.path.queryExpression()/], [order.order()/]);
	[/for]
[/if]
[/template]

[template private order(order : Order) post(trim())]
[if (order.oclIsTypeOf(Asc))]
'ASC'
[else]
'DESC'
[/if]
[/template]

[template private queryParametersCode(selection : Selection, userService : Service) post(trim())]
[if (not selection.selectVia.oclIsUndefined())]
	[if (selection.entities()->excludes(selection.selectVia.partOf))]
[selection.querySelectedParameters()/]
	[/if]
[/if]
[if (not selection.condition.oclIsUndefined())]
	[if (selection.condition.hasParameter())]
[selection.condition.queryParameter(userService)/]
	[/if]
[/if]
[/template]

[template private querySelectedParameters(selection : Selection) post(trim())]
[let routingEntity : EntityOrView = selection.selectVia.targetType()]
	[for (key : Attribute | routingEntity.uriPathKeys())]
$query->setParameter('[key.routeParameterName(routingEntity)/]', $[key.routeParameterName(routingEntity)/]);
	[/for]
[/let]
[/template]

[template private queryResult(selection : Selection, service : Service) post(trim())]
[if (selection.limit = 1)]
return $query->getOneOrNullResult();
[elseif (selection.joins->notEmpty() and selection.fields->notEmpty())]
return $query->getResult();
[else]
if ($limit > 0)
    return new Paginator($query[if (service.serves.primaryKeys()->size() > 1)], false[/if]);
else
    return $query->getResult();
[/if]
[/template]

[template private childSelectionMethods(service : Service, model : WafModel) post(trim())]
[for (association : Association | service.serves.associations())]
	[if (not association.isSingleton(service.serves))]
	[let targetType : EntityOrView = association.targetType()]
		[if (not targetType.oclIsUndefined())]
		[let targetService : Service = targetType.services(model)->first()]
			[for (selection : Selection | targetService.selections->select(s | s.fields->isEmpty()))]
				[if (selection.joins->isEmpty())]
					[if (not selection.condition.oclIsUndefined() or selection.ordering->notEmpty())]
[service.childCriteriaMethod(association, selection)/]

					[/if]
				[else]
					[if (not selection.condition.oclIsUndefined())]
[service.childFilterMethod(association, selection)/]

					[/if]
				[/if]
			[/for]
		[/let]
		[/if]
	[/let]
	[/if]
[/for]
[/template]

[template private childCriteriaMethod(service : Service, association : Association, selection : Selection) post(trim())]
public function [association.childSelectionName(selection)/]($[service.instanceName()/][if (selection.limit <> 1)], [selection.criterialLimitFormals()/][/if])
{
    $criteria = Criteria::create();
[if (not selection.condition.oclIsUndefined())]
    $criteria->where([selection.condition.criteriaExpression()/]);
[/if]
[if (selection.limit > 0)]
    $criteria->setMaxResults([selection.limit/]);
[/if]
[if (selection.ordering->size() > 0)]
    $criteria->orderBy(array(
	[for (order : Order | selection.ordering)]
        [order.path.criteriaExpression()/] => [if (selection.ordering->first().oclIsTypeOf(Asc))]Criteria::ASC[else]Criteria::DESC[/if],
	[/for]
    ));
[/if]
[if (selection.limit <> 1)]
    if ($limit > 0) {
        $criteria->setFirstResult($offset);
        $criteria->setMaxResults($limit);
    }
	[if (selection.limit > 0)]
    else
        $criteria->setMaxResults([selection.limit/]);
	[/if]
[/if]

    return $[service.instanceName()/]->get[association.modelPropertyName().toUpperFirst()/]()->matching($criteria);
}
[/template]

[template private childFilterMethod(service : Service, association : Association, selection : Selection) post(trim())]
public function [association.childSelectionName(selection)/]($[service.instanceName()/][if (selection.limit <> 1)], [selection.criterialLimitFormals()/][/if])
{

    return $[service.instanceName()/]->get[association.modelPropertyName().toUpperFirst()/]()->filter(
        function ($[association.targetType().instanceName()/]) [comment use () /]{
            return true;
        });
}
[/template]

[template private pseudoAssociationMethods(entity : EntityOrView, model : WafModel) post(trim())]
[for (association : Association | entity.associations())]
	[if (association.oclIsKindOf(EntityAssociation) and association.isPseudo())]
	[let entityAssociation : EntityAssociation = association.oclAsType(EntityAssociation)]
[entityAssociation.pseudoAssociationMethod(entityAssociation.targetType().services(model)->first())/]

	[/let]
	[/if]
[/for]
[/template]

[template private pseudoAssociationMethod(association : EntityAssociation, targetService : Service)
	? (targetService.selections->isEmpty()) post(trim())]
public function [association.name/]($[association.sourceType().selectName()/])
{
    [association.pseudoBuilderCode(association.sourceType(), association.targetType())/]

    $query = $queryBuilder->getQuery();
    [association.sourceType().pseudoParameterCode()/]

    [association.pseudoQueryResult()/]
}
[/template]

[template private pseudoAssociationMethod(association : EntityAssociation, targetService : Service)
	? (targetService.selections->notEmpty()) post(trim())]
private function [association.builderMethodName()/]()
{
    [association.pseudoBuilderCode(association.sourceType(), association.targetType())/]
    return $queryBuilder;
}

[if (association.sourceType().uriPathKeys()->notEmpty())]
private function [association.parametersMethodName()/]($query, $[association.sourceType().selectName()/])
{
    [association.sourceType().pseudoParameterCode()/]
}

[/if]
public function [association.name/]($[association.sourceType().selectName()/])
{
    $query = $this->[association.builderMethodName()/]()->getQuery();
[if (association.sourceType().uriPathKeys()->notEmpty())]
    $this->[association.parametersMethodName()/]($query, $[association.sourceType().selectName()/]);
[/if]

    [association.pseudoQueryResult()/]
}
[for (selection : Selection | targetService.selections->select(s | not s.condition.oclIsUndefined() or s.ordering->notEmpty()))]

public function [association.findMethodName(selection)/]($[association.sourceType().selectName()/])
{
    $queryBuilder = $this->[association.builderMethodName()/]();
	[if (selection.joins->notEmpty())]
    [selection.joins()/]
	[/if]
	[if (not selection.condition.oclIsUndefined())]
    $queryBuilder->andWhere([selection.condition.queryExpression()/]);
	[/if]
	[if (selection.ordering->notEmpty())]
    [selection.orderBy()/]
	[/if]
    $query = $queryBuilder->getQuery();
	[if (association.sourceType().uriPathKeys()->notEmpty())]
    $this->[association.parametersMethodName()/]($query, $[association.sourceType().selectName()/]);
	[/if]

    [association.pseudoQueryResult()/]
}
[/for]
[/template]

[template private pseudoBuilderCode(association : EntityAssociation, sourceType : EntityOrView, targetType : EntityOrView) post(trim())]
$queryBuilder = $this->doctrine->getRepository('[targetType.appBundleName()/]:[targetType.modelName()/]')->createQueryBuilder('[targetType.selectName()/]');
$queryBuilder->join('[sourceType.appBundleName()/]:[sourceType.modelName()/]', '[sourceType.selectName()/]', Expr\Join::WITH,[if (association.keys()->size() = 1)]
[let key : AssociationKey = association.keys->first()]

$queryBuilder->expr()->eq('[key.targetFeature.partOf.selectName()/].[key.targetFeature.columnName/]', '[key.sourceFeature.partOf.selectName()/].[key.sourceFeature.columnName/]')
[/let]
[else]
 $queryBuilder->expr()->andX(
	[for (key : AssociationKey | association.keys)]
    $queryBuilder->expr()->eq('[key.targetFeature.partOf.selectName()/].[key.targetFeature.columnName/]', '[key.sourceFeature.partOf.selectName()/].[key.sourceFeature.columnName/]')[if (i < association.keys->size())],[/if]
	[/for]
)[/if]);
[if (sourceType.uriPathKeys()->size() = 1)]
[let key : Attribute = sourceType.uriPathKeys()->first()]
$queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(sourceType)/]'));
[/let]
[else]
$queryBuilder->where($queryBuilder->expr()->andX(
	[for (key : Attribute | sourceType.uriPathKeys())]
    $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(sourceType)/]')[if (i <sourceType.uriPathKeys()->size())],[/if]
	[/for]
));
[/if]
[/template]

[template private pseudoParameterCode(sourceType : EntityOrView) post(trim())]
[for (key : Attribute | sourceType.uriPathKeys())]
$query->setParameter('[key.routeParameterName(sourceType)/]', [key.keyAccessor(sourceType, '$'.concat(sourceType.selectName()))/]);
[/for]
[/template]

[template private pseudoQueryResult(association : EntityAssociation) post(trim())]
[if (association.isSingleton())]
	[if (association.isRequired())]
return $query->getSingleResult();
	[else]
return $query->getOneOrNullResult();
	[/if]
[else]
return $query->getResult();
[/if]
[/template]

[template private getRepositoryMethod(service : Service) post(trim())]
public function getRepository()
{
    return $this->doctrine->getRepository('[service.appBundleName()/]:[service.serves.modelName()/]');
}
[/template]

[template private createQueryBuilderMethod(service : Service) post(trim())]
public function createQueryBuilder()
{
    return $this->getRepository()->createQueryBuilder('[service.serves.selectName()/]');
}
[/template]

[template private businessOperation(operation : BusinessOperation) post(trim())]
public function [operation.methodName()/]([operation.formalParameters()/])
{
    // [protected ('operation.'.concat(operation.methodName()))]
    // [/protected]
}
[/template]

[template private formalParameters(operation : BusinessOperation) post(trim())]
[for (parameter : FormalParameter | operation.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]
