[comment encoding = UTF-8 /]
[module service(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::criteria::criteriaDoctrine/]

[template public service(service : Service)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Tools\Pagination\Paginator;

class [service.serviceClassName()/]
{
    private $doctrine;

    public function __construct($doctrine)
    {
        $this->doctrine = $doctrine;
    }

    [service.findMethod()/]

    [service.findAllMethod()/]

    [service.saveMethod()/]

[for (selection : Selection | service.selections)]
    [selection.selectionMethod(service)/]

[/for]

    [service.childSelectionMethods()/]

    [service.getRepositoryMethod()/]

    [service.createQueryBuilderMethod()/]
}
[/file]
[/template]

[template private findMethod(service : Service) post(trim())]
public function find([service.routeParameters()/])
{
	$queryBuilder = $this->createQueryBuilder();
	return $queryBuilder
[for (key : ServiceFeatureReference | service.keys)]
	[if (key.oclIsTypeOf(ServiceAttributeReference))]
        ->where($queryBuilder->expr()->eq('[service.selectName()/].[key.columnName()/]', ':[key.routeParameterName()/]'))
	[else]
	[let associationKey : ServiceAssociationReference = key.oclAsType(ServiceAssociationReference)]
	[let targetService : Service = associationKey.association.targetService()]
        ->join('[service.selectName()/].[key.modelPropertyName()/]', '[targetService.selectName()/]')
        ->where($queryBuilder->expr()->eq('[targetService.selectName()/].[associationKey.childFeature.columnName()/]', ':[key.routeParameterName()/]'))
	[/let]
	[/let]
	[/if]
[/for]
[for (key : ServiceFeatureReference | service.keys)]
        ->setParameter('[key.routeParameterName()/]', $[key.routeParameterName()/])
[/for]
        ->getQuery()->getSingleResult();
}
[/template]

[template private findAllMethod(service : Service) post(trim())]
public function findAll()
{
	return $this->getRepository()->findAll();
}
[/template]

[template private saveMethod(service : Service) post(trim())]
public function save($entity, $flush = false)
{
	$entityManager = $this->doctrine->getEntityManager();
    $entityManager->persist($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private selectionMethod(selection : Selection, service : Service) post(trim())]
public function [selection.name/]([for (parameter : SelectionParameter | selection.parameters) separator(', ')]
$[parameter.name/] = [if (parameter.defaultValue.oclIsUndefined())]NULL[else]'[parameter.defaultValue/]'[/if][/for][if (selection.parameters->notEmpty())], [/if]$page = NULL, $pageSize = 10)
{
    $queryBuilder = $this->createQueryBuilder();
[if (not selection.filter.oclIsUndefined())]
    $queryBuilder->where([selection.filter.doctrineExpression()/]);
[/if]
[if (selection.ordering->size() > 0)]
    $queryBuilder->orderBy([selection.ordering->first().path.doctrineExpression()/], [if (selection.ordering->first().oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if]);
	[if (selection.ordering->size() > 1)]
		[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
    $queryBuilder->addOrderBy([selection.ordering->first().path.doctrineExpression()/], [if (order.oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if]);
		[/for]
	[/if]
[/if]
    if ($page)
    {
        $queryBuilder->setFirstResult(($page - 1) * $pageSize);
        $queryBuilder->setMaxResults($pageSize);
    }
[if (selection.limit > 0)]
    else
        $queryBuilder->setMaxResults([selection.limit/]);
[/if]
    $query = $queryBuilder->getQuery();
[if (not selection.filter.oclIsUndefined())]
    [selection.filter.criteriaParameter()/]
[/if]

    if ($page)
        return new Paginator($query);
    else
        return $query->getResult();
}
[/template]

[template private childSelectionMethods(service : Service) post(trim())]
[for (association : ServiceAssociation | service.associations())]
	[if (not association.isSingleton())]
	    [for (selection : Selection | association.targetService().selections)]
[service.childSelectionMethod(association, selection)/]

		[/for]
	[/if]
[/for]
[/template]

[template private childSelectionMethod(service : Service, association : ServiceAssociation, selection : Selection) post(trim())]
public function [association.name/][selection.instanceName().toUpperFirst()/]($[service.instanceName()/])
{
    $criteria = Criteria::create();
    return $[service.instanceName()/]->get[association.modelPropertyName().toUpperFirst()/]()->matching($criteria);
}
[/template]

[template private getRepositoryMethod(service : Service) post(trim())]
public function getRepository()
{
    return $this->doctrine->getRepository('[service.appBundleName()/]:[service.modelName()/]');
}
[/template]

[template private createQueryBuilderMethod(service : Service) post(trim())]
public function createQueryBuilder()
{
    return $this->getRepository()->createQueryBuilder('[service.selectName()/]');
}
[/template]


[template public routeParameters(service : Service) post(trim())]
[for (key : ServiceFeatureReference | service.keys) separator (', ')]
$[key.routeParameterName()/]
[/for]
[/template]