[comment encoding = UTF-8 /]
[module service(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::criteriaDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::queryDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::accessor/]

[template public service(service : Service, model : WafModel)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Tools\Pagination\Paginator;
[if (service.operations->notEmpty())]
// [protected ('operations')]
// [/protected]
[/if]

class [service.className()/]
{
    private $doctrine;

[if (service.serves.hasPseudoAssociations())]
    private $entityManager;

[/if]
[if (model.isAuthenticated())]
	[if (service = model.userService())]
    private $securityTokenStorage;
	[else]
    private $[model.userService().instanceName()/];

	[/if]
[/if]
    public function __construct($doctrine[if (service.serves.hasPseudoAssociations())], $entityManager[/if][if (model.isAuthenticated())], [if (service = model.userService())]
$securityTokenStorage[else]$[model.userService().instanceName()/][/if][/if])
    {
        $this->doctrine = $doctrine;
[if (service.serves.hasPseudoAssociations())]
        $this->entityManager = $entityManager;
[/if]
[if (model.isAuthenticated())]
	[if (service = model.userService())]
        $this->securityTokenStorage = $securityTokenStorage;
	[else]
        $this->[model.userService().instanceName()/] = $[model.userService().instanceName()/];
	[/if]
[/if]
    }

[if (service.serves.hasRouteParameters())]
    [service.findMethod()/]

[/if]
[if (service.findAll.oclIsUndefined())]
    [service.findAllMethod()/]

[/if]
    [service.removeMethod()/]

    [service.saveMethod()/]

[if (model.isLocallyAuthenticated())]
[let authentication : LocalAuthenticationSystem = model.localAuthentication()]
	[if (model.userService() = service)]
    [authentication.getUserMethod()/]

	[/if]
[/let]
[elseif (model.isCasAuthenticated())]
[let authentication : CasAuthentication = model.casAuthentication()]
	[if (model.userService() = service)]
    [authentication.getUserMethod(model.userService())/]

	[/if]
[/let]
[/if]
[for (selection : Selection | service.selections)]
    [selection.selectionMethod(service, model.userService())/]

[/for]
[if (service.serves.associations()->select(a | not a.isSingleton(service.serves))
		->collect(a | a.targetType().services(model)->first().selections->select(s | s.joins->isEmpty()))->notEmpty())]
    [service.childSelectionMethods(model)/]

[/if]
[if (service.serves.associations()->select(a | a.oclIsKindOf(EntityAssociation) and a.isPseudo())->notEmpty())]
    [service.pseudoAssociationMethods()/]

[/if]
    [service.getRepositoryMethod()/]

    [service.createQueryBuilderMethod()/]

[for (operation : BusinessOperation | service.operations)]
    [operation.businessOperation()/]

[/for]
[if (service.operations->notEmpty())]
/*
 * [protected ('operations.support')]
 */
// [/protected]
[/if]
}
[/file]
[/template]

[template private findMethod(service : Service) post(trim())]
[let entity : EntityOrView = service.serves]
public function find([service.serves.routeParameters()/])
{
	$queryBuilder = $this->createQueryBuilder();
	return $queryBuilder
[if (entity.isContained() or entity.hasAssociationKeys())]
        [entity.containerJoin()/]
[/if]
[if (entity.uriPathKeys()->notEmpty())]
	[if (entity.uriPathKeys()->size() < 2)]
        ->where([entity.uriPathKeys()->first().findWhere(entity)/])
	[else]
        ->where(
            [entity.findWhere(entity) /]
        )
	[/if]
[/if]
[for (key : Attribute | entity.uriPathKeys())]
        ->setParameter('[key.routeParameterName(entity)/]', $[key.routeParameterName(entity)/])
[/for]
        ->getQuery()->getSingleResult();
}
[/let]
[/template]

[template private containerJoin(entity : EntityOrView) post(trim())]
[let container : EntityOrView = entity.container()]
->join('[entity.selectName()/].[entity.containingAssociation().modelPropertyName()/]', '[container.selectName()/]')
[if (container.isContained())]
[container.containerJoin()/]
[/if]
[/let]
[for (key : EntityAssociation | entity.associationKeys()->select(k | not k.container))]
->join('[entity.selectName()/].[key.modelPropertyName()/]', '[key.targetType().selectName()/]')
[/for]
[/template]

[template private findWhere(entityOrView : EntityOrView, base : EntityOrView) post(trim())]
[let keys : Sequence(Attribute) = entityOrView.uriPathKeys()]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))]
$queryBuilder->expr()->andX([key.findWhere(base)/],
[/for]
[keys->last().findWhere(base)/]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))])[/for]
[/let]
[/template]

[template private findWhere(key : Attribute, base : EntityOrView) post(trim())]
$queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(base)/]')
[/template]

[template private findAllMethod(service : Service) post(trim())]
public function findAll([service.limitFormals()/])
{
    if ($offset < 0)
	    return $this->getRepository()->findAll();
    else {
        $queryBuilder = $this->createQueryBuilder();
        $queryBuilder->setFirstResult($offset);
        $queryBuilder->setMaxResults($limit);
        $query = $queryBuilder->getQuery();
        return new Paginator($query[if (service.serves.primaryKeys()->size() > 1)], false[/if]);
    }
}
[/template]

[template private removeMethod(service : Service) post(trim())]
public function remove($entity, $flush = false)
{
	$entityManager = $this->doctrine->getManager();
    $entityManager->remove($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[query private joinProperty(authentication : LocalAuthenticationSystem) : String
	= if authentication.authenticationKey = AuthenticationKeyTypes::Email then
			'getEmail()'
		else if authentication.authenticationKey = AuthenticationKeyTypes::Username then
			'getUsername()'
		else
			'unhandled'
		endif endif
/]

[template private getUserMethod(authentication : CasAuthentication, service : Service) post(trim())]
public function getUser()
{
    return $this->securityTokenStorage->getToken()->getUser();
}
[/template]

[template private getUserMethod(authentication : LocalAuthenticationSystem) post(trim())]
public function getUser()
{
    $user = $this->securityTokenStorage->getToken()->getUser();
    if (empty($user))
        return null;

    return $this->find($user->[authentication.joinProperty()/]);
 }
[/template]

[template private saveMethod(service : Service) post(trim())]
public function save($entity, $flush = false)
{
	$entityManager = $this->doctrine->getManager();
    $entityManager->persist($entity);
    if ($flush)
        $entityManager->flush();
}
[/template]

[template private selectionMethod(selection : Selection, service : Service, userService : Service)
	? (selection.filters->isEmpty()) post(trim())]
public function [selection.methodName/]([selection.formals()/])
{
    [selection.builderCode()/]
    $query = $queryBuilder->getQuery();
[if (selection.hasParameters())]
    [selection.queryParametersCode(userService)/]
[/if]

    [selection.queryResult(service)/]
}
[/template]

[template private selectionMethod(selection : Selection, service : Service, userService : Service)
	? (selection.filters->notEmpty()) post(trim())]
private function [selection.builderMethodName()/]([selection.formals()/])
{
    [selection.builderCode()/]
    return $queryBuilder;
}

[if (selection.hasParameters())]
private function [selection.parametersMethodName()/]($query)
{
    [selection.queryParametersCode(userService)/]
}

[/if]
public function [selection.methodName/]([selection.formals()/])
{
    $query = $this->[selection.builderMethodName()/]([selection.actuals()/])->getQuery();
[if (selection.hasParameters())]
    $this->[selection.parametersMethodName()/]($query);
[/if]

    [selection.queryResult(service)/]
}
[for (filter : Filter | selection.filters)]

public function [filter.methodName/]([filter.formals()/])
{
    $queryBuilder = $this->[selection.builderMethodName()/]([selection.actuals()/]);
    $queryBuilder->[if (selection.condition.oclIsUndefined())]where[else]andWhere[/if]([filter.condition.queryExpression()/]);
    $query = $queryBuilder->getQuery();
	[if (selection.hasParameters())]
    $this->[selection.parametersMethodName()/]($query);
	[/if]
	[for (parameter : FormalParameter | filter.parameters)]
    $query->setParameter('[parameter.name/]', $[parameter.name/]);
	[/for]

    [selection.queryResult(service)/]
}
[/for]
[/template]

[template private formals(selection : Selection) post(trim())]
[if (selection.isSelected() or selection.parameters->notEmpty())]
[selection.selectionFormals()/][if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[selection.partOf.limitFormals()/][/if]
[/template]

[template private formals(filter : Filter) post(trim())]
[if (filter.selection.isSelected() or filter.selection.parameters->notEmpty())]
[selection.selectionFormals()/][if (filter.parameters->notEmpty() or filter.selection.limit <> 1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterFormals()/][if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[filter.selection.partOf.limitFormals()/][/if]
[/template]

[template private selectionFormals(selection : Selection) post(trim())]
[if (selection.isSelected())]
	[for (key : Attribute | selection.partOf.serves.parentEntity().uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.partOf.serves)/][/for]
[if (selection.parameters->notEmpty())]
, [/if]
[/if]
[if (selection.parameters->notEmpty())]
	[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/if]
[/template]

[template private limitFormals(service : Service) post(trim())]
$offset = 0, $limit = 10
[/template]

[template private filterFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private actuals(selection : Selection) post(trim())]
[if (selection.isSelected() or selection.parameters->notEmpty())]
[selection.selectionActuals()/][if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[selection.limitActuals()/][/if]
[/template]

[template private actuals(filter : Filter) post(trim())]
[if (filter.selection.isSelected() or filter.selection.parameters->notEmpty())]
[selection.selectionActuals()/][if (filter.parameters->notEmpty() or filter.selection.limit <> 1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterActuals()/][if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
, [/if]
[/if]
[if (filter.selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
[filter.selection.limitActuals()/][/if]
[/template]

[template private selectionActuals(selection : Selection) post(trim())]
[if (selection.isSelected())]
	[for (key : Attribute | selection.partOf.serves.parentEntity().uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.partOf.serves)/][/for]
[if (selection.parameters->notEmpty())]
, [/if]
[/if]
[if (selection.parameters->notEmpty())]
	[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][/for]
[/if]
[/template]

[template private limitActuals(selection : Selection) post(trim())]
$offset, $limit
[/template]

[template private filterActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private builderCode(selection : Selection) post(trim())]
$queryBuilder = $this->createQueryBuilder();
[if (selection.fields->notEmpty())]
[selection.fields()/]
[/if]
[if (selection.joins->notEmpty() or selection.isSelected())]
[selection.joins()/]
[/if]
[if (selection.isSelected() or not selection.condition.oclIsUndefined())]
[selection.condition()/]
[/if]
[if (selection.ordering->notEmpty())]
[selection.orderBy()/]
[/if]
[if (selection.limit <> 1 and (selection.joins->isEmpty() or selection.fields->isEmpty()))]
if ($offset >= 0) {
    $queryBuilder->setFirstResult($offset);
    $queryBuilder->setMaxResults($limit);
}
	[if (selection.limit > 0)]
		[if (selection.joins->notEmpty())]
else
		[/if]
    $queryBuilder->setMaxResults([selection.limit/]);
	[/if]
[/if]
[if (selection.distinct)]
$queryBuilder->distinct();
[/if]
[/template]

[template private fields(selection : Selection) post(trim())]
[let first : Feature = selection.fields->first()]
$queryBuilder->select([first.field(first.alias(selection))/]);
[/let]
[if (selection.fields->size() > 1)]
	[for (field : Feature | selection.fields->subOrderedSet(2, selection.fields->size()))]
$queryBuilder->addSelect([field.field(field.alias(selection))/]);
	[/for]
[/if]
[/template]

[template private field(field : Feature, alias : String) post(trim())]
'[field.partOf.selectName()/].[field.columnName()/][if (not alias.oclIsUndefined())]
 [alias/][/if]'
[/template]

[query private entities(selection : Selection) : Set(EntityOrView)
	= selection.entities(selection.joins->size())
/]

[query private entities(selection : Selection, length : Integer) : Set(EntityOrView)
	= if length = 1 then
			Set{selection.partOf.serves}
		else
			selection.joins
				->subOrderedSet(1, length - 1)
				->iterate(j;
					eavs : Set(EntityOrView) = Set{selection.partOf.serves}
					| eavs->union(if eavs->includes(j.partOf) then
							Set{j.targetType()}
						else
							Set{j.partOf}
						endif))

		endif
/]

[template private joins(selection : Selection) post(trim())]
[if (selection.isSelected())]
[let parentEntity : EntityOrView = selection.partOf.serves.parentEntity()]
[let association : Association = selection.partOf.serves.containingAssociation()]
	[if (selection.entities()->excludes(parentEntity))]
		[if (selection.entities()->includes(association.partOf))]
$queryBuilder->join('[association.partOf.selectName()/].[association.modelPropertyName()/]', '[association.targetType().selectName()/]');
		[else]
$queryBuilder->join('[association.targetType().selectName()/].[association.opposite().modelPropertyName()/]', '[association.partOf.selectName()/]');
		[/if]
	[/if]
[/let]
[/let]
[/if]
[for (join : Association | selection.joins)]
	[if (selection.entities(i)->includes(join.partOf))]
$queryBuilder->join('[join.partOf.selectName()/].[join.modelPropertyName()/]', '[join.targetType().selectName()/]');
	[else]
$queryBuilder->join('[join.targetType().selectName()/].[join.opposite().modelPropertyName()/]', '[join.partOf.selectName()/]');
	[/if]
[/for]
[/template]

[template private condition(selection : Selection) post(trim())]
[if (selection.isSelected())]
[let parentEntity : EntityOrView = selection.partOf.serves.parentEntity()]
	[if (parentEntity.uriPathKeys()->size() = 1)]
	[let key : Attribute = parentEntity.uriPathKeys()->first()]
$queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(parentEntity)/]'));
	[/let]
	[else]
$queryBuilder->where($queryBuilder->expr->andX(
		[for (key : Attribute | parentEntity.uriPathKeys())]
    $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(parentEntity)/]'),
		[/for]
));
	[/if]
[/let]
[/if]
$queryBuilder->[if (selection.isSelected())]andWhere[else]where[/if]([selection.condition.queryExpression()/]);
[/template]

[template private orderBy(selection : Selection) post(trim())]
$queryBuilder->orderBy([selection.ordering->first().path.queryExpression()/], [selection.ordering->first().order()/]);
[if (selection.ordering->size() > 1)]
	[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
$queryBuilder->addOrderBy([order.path.queryExpression()/], [order.order()/]);
	[/for]
[/if]
[/template]

[template private order(order : Order) post(trim())]
[if (order.oclIsTypeOf(Asc))]
'ASC'
[else]
'DESC'
[/if]
[/template]

[template private queryParametersCode(selection : Selection, userService : Service) post(trim())]
[if (selection.isSelected())]
[selection.querySelectedParameters()/]
[/if]
[if (not selection.condition.oclIsUndefined())]
	[if (selection.condition.hasParameter())]
[selection.condition.queryParameter(userService)/]
	[/if]
[/if]
[/template]

[template private querySelectedParameters(selection : Selection) post(trim())]
[let parentEntity : EntityOrView = selection.partOf.serves.parentEntity()]
	[for (key : Attribute | parentEntity.uriPathKeys())]
$query->setParameter('[key.routeParameterName(parentEntity)/]', $[key.routeParameterName(parentEntity)/]);
	[/for]
[/let]
[/template]

[template private queryResult(selection : Selection, service : Service) post(trim())]
[if (selection.limit = 1)]
return $query->getSingleResult();
[elseif (selection.joins->notEmpty() and selection.fields->notEmpty())]
return $query->getResult();
[else]
if ($offset >= 0)
    return new Paginator($query[if (service.serves.primaryKeys()->size() > 1)], false[/if]);
else
    return $query->getResult();
[/if]
[/template]

[template private childSelectionMethods(service : Service, model : WafModel) post(trim())]
[for (association : Association | service.serves.associations())]
	[if (not association.isSingleton(service.serves))]
	[let targetType : EntityOrView = association.targetType()]
		[if (not targetType.oclIsUndefined())]
		[let targetService : Service = targetType.services(model)->first()]
			[for (selection : Selection | targetService.selections->select(s | s.joins->isEmpty()))]
[service.childSelectionMethod(association, selection)/]

			[/for]
		[/let]
		[/if]
	[/let]
	[/if]
[/for]
[/template]

[template private childSelectionMethod(service : Service, association : Association, selection : Selection) post(trim())]
public function [association.childSelectionName(selection)/]($[service.instanceName()/][if (selection.parameters->notEmpty() or selection.limit <> 1)], [/if][selection.formals()/])
{
    $criteria = Criteria::create();
[if (not selection.condition.oclIsUndefined())]
    $criteria->where([selection.condition.criteriaExpression()/]);
[/if]
[if (selection.limit > 0)]
    $criteria->setMaxResults([selection.limit/]);
[/if]
[if (selection.ordering->size() > 0)]
    $criteria->orderBy(array(
	[for (order : Order | selection.ordering)]
        [order.path.criteriaExpression()/] => [if (selection.ordering->first().oclIsTypeOf(Asc))]Criteria::ASC[else]Criteria::DESC[/if],
	[/for]
    ));
[/if]
[if (selection.limit <> 1)]
    if ($offset >= 0) {
        $criteria->setFirstResult($offset);
        $criteria->setMaxResults($limit);
    }
	[if (selection.limit > 0)]
    else
        $criteria->setMaxResults([selection.limit/]);
	[/if]
[/if]

    return $[service.instanceName()/]->get[association.modelPropertyName().toUpperFirst()/]()->matching($criteria);
}
[/template]

[template private pseudoAssociationMethods(service : Service) post(trim())]
[for (association : Association | service.serves.associations())]
	[if (association.oclIsKindOf(EntityAssociation) and association.isPseudo())]
	[let entityAssociation : EntityAssociation = association.oclAsType(EntityAssociation)]
[entityAssociation.pseudoAssociationMethod(service)/]

	[/let]
	[/if]
[/for]
[/template]

[template private pseudoAssociationMethod(association : EntityAssociation, service : Service) post(trim())]
[let sourceType : EntityOrView = association.partOf]
[let targetType : EntityOrView = association.opposite.partOf]
public function [association.name/]($[sourceType.selectName()/][if (service.selections->notEmpty())], $selection = null[/if])
{
    $queryBuilder = $this->createQueryBuilder();
    $queryBuilder->join('[association.partOf.selectName()/].[association.modelPropertyName()/]', '[targetType.selectName()/]');
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.join'))]
    // [/protected]
[if (targetType.attributes()->notEmpty())]
    [targetType.pseudoFields()/]
[/if]
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.fields'))]
    // [/protected]
[if (sourceType.uriPathKeys()->size() = 1)]
[let key : Attribute = sourceType.uriPathKeys()->first()]
    $queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(sourceType)/]'));
[/let]
[else]
    $queryBuilder->where($queryBuilder->expr->andX(
	[for (key : Attribute | sourceType.uriPathKeys())]
        $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName()/]', ':[key.routeParameterName(sourceType)/]')[if (i <sourceType.uriPathKeys()->size())],[/if]
	[/for]
    ));
[/if]
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.where'))]
    // [/protected]
    $query = $queryBuilder->getQuery();
[for (key : Attribute | sourceType.uriPathKeys())]
    $query->setParameter('[key.routeParameterName(sourceType)/]', [key.keyAccessor(sourceType, '$'.concat(sourceType.selectName()))/]);
[/for]

[if (association.isSingleton())]
	[if (association.isRequired())]
    return $query->getSingleResult();
	[else]
    return $query->getOneOrNullResult();
	[/if]
[else]
    return $query->getResult();
[/if]
}
[/let]
[/let]
[/template]

[template private pseudoFields(entity : EntityOrView) post(trim())]
[let first : Feature = entity.attributes()->first()]
$queryBuilder->select([first.field(null)/]);
[/let]
[if (entity.attributes()->size() > 1)]
	[for (field : Attribute | entity.attributes()->subSequence(2, entity.attributes()->size()))]
$queryBuilder->addSelect([field.field(null)/]);
	[/for]
[/if]
[/template]

[template private pseudoAssociationMethodOld(association : EntityAssociation, service : Service) post(trim())]
[let sourceEntity : EntityOrView = association.partOf]
[let targetEntity : EntityOrView = association.opposite.partOf]
public function [association.name/]($[sourceEntity.selectName()/][if (service.selections->notEmpty())], $selection = null[/if])
{
    $builder = new ResultSetMappingBuilder($this->entityManager);
    $builder->addEntityResult('AppBundle:[targetEntity.modelClassName()/]', '[targetEntity.selectName()/]');
[if (not targetEntity.hasPrimaryKeys())]
    $builder->addFieldResult('[targetEntity.selectName()/]', '[targetEntity.autoKeyName/]', '[targetEntity.autoKeyName/]');
[else]
	[for (key : EntityFeature | targetEntity.primaryKeys())]
    $builder->addFieldResult('[targetEntity.selectName()/]', '[key.columnName/]', '[key.columnName/]');
	[/for]
[/if]
[for (attribute : Attribute | targetEntity.attributes())]
    $builder->addFieldResult('[targetEntity.selectName()/]', '[attribute.columnName()/]', '[attribute.columnName()/]');
[/for]
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.fields'))]
    // [/protected]
    $sql = 'SELECT DISTINCT ' . (String) $builder
        . ' FROM [sourceEntity.tableName/] [sourceEntity.selectName()/]'
[if (sourceEntity.isContained())]
        [sourceEntity.pseudoContainerJoin()/]
[/if]
        . ' INNER JOIN [targetEntity.tableName/] [targetEntity.selectName()/] ON'
[for (key : AssociationKey | association.keys())]
            . ' [if (i > 1)]AND [/if][key.sourceFeature.partOf.selectName()/].[key.sourceFeature.columnName/] = [key.targetFeature.partOf.selectName()/].[key.targetFeature.columnName/]'
[/for]
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.join'))]
    // [/protected]
        . ' WHERE'
[for (key : Attribute | sourceEntity.uriPathKeys())]
            . ' [if (i > 1)]AND [/if][key.partOf.selectName()/].[key.columnName()/] = :[key.routeParameterName(sourceEntity)/]'
[/for]
[comment TODO short term fix/]
    // [protected (association.name.concat('.customise.where'))]
    // [/protected]
    ;
    $query = $this->entityManager->createNativeQuery($sql, $builder);
[for (key : Attribute | sourceEntity.uriPathKeys())]
    $query->setParameter('[key.routeParameterName(sourceEntity)/]', [key.keyAccessor(sourceEntity, '$'.concat(sourceEntity.selectName()))/]);
[/for]

[if (association.isSingleton())]
	[if (association.isRequired())]
    return $query->getSingleResult();
	[else]
    return $query->getOneOrNullResult();
	[/if]
[else]
    return $query->getResult();
[/if]
}
[/let]
[/let]
[/template]

[template private pseudoContainerJoin(entity : EntityOrView) post(trim())]
[let association : EntityAssociation = entity.containingAssociation()]
[let container : EntityOrView = entity.container()]
. ' INNER JOIN [container.tableName/] [container.selectName()/] ON'
[if (association.keys->isEmpty())]
    . ' [entity.selectName()/].[association.columnName/] = [container.selectName()/].[association.opposite.partOf.oclAsType(Entity).autoKeyName/]'
[else]
	[for (key : AssociationKey | association.keys)]
    . '[if (i > 1)] AND[/if] [entity.selectName()/].[key.sourceFeature.columnName/] = [container.selectName()/].[key.targetFeature.columnName/]'
	[/for]
[/if]
[if (container.isContained())]
[container.pseudoContainerJoin()/]
[/if]
[/let]
[/let]
[/template]

[template private getRepositoryMethod(service : Service) post(trim())]
public function getRepository()
{
    return $this->doctrine->getRepository('[service.appBundleName()/]:[service.serves.modelName()/]');
}
[/template]

[template private createQueryBuilderMethod(service : Service) post(trim())]
public function createQueryBuilder()
{
    return $this->getRepository()->createQueryBuilder('[service.serves.selectName()/]');
}
[/template]

[template private businessOperation(operation : BusinessOperation) post(trim())]
public function [operation.methodName()/]($[operation.partOf.instanceName()/][if (operation.resultType = OperationResultTypes::File)], $fileExtension = null[/if])
{
    // [protected ('operation.'.concat(operation.methodName()))]
    // [/protected]
}
[/template]
