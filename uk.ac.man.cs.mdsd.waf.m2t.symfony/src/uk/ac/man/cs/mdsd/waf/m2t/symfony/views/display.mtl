[comment encoding = UTF-8 /]
[module display(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public generateUnitView(unit : ContentUnit)
	? (unit.oclIsKindOf(DataUnit)) post(trim())]
[let dataUnit : DataUnit = unit.oclAsType(DataUnit)]
[file(dataUnit.viewFilename(), false)]
<section class="[dataUnit.styleClass/]{% if not [dataUnit.instanceName()/] %} hidden{% endif %}{%if [dataUnit.instanceName()/]_error is defined %} [dataUnit.errorClass/]{% endif %}" id="[dataUnit.instanceName()/]">
 <h1 class="[dataUnit.captionClass/][if (dataUnit.omitCaption)] hidden[/if]">[dataUnit.generateUnitTitle(dataUnit.instanceName())/]</h1>
 <section class="[dataUnit.errorClass/]{% if not [dataUnit.instanceName()/]_error is defined %} hidden{% endif %}">
{% if [dataUnit.instanceName()/]_error is defined %}
  <p class="[dataUnit.errorClass/]">{{ [dataUnit.instanceName()/]_error }}</p>
{% endif %}
 </section>
[if (not dataUnit.oclIsKindOf(IndexUnit))]
 [dataUnit.generateViewContent(dataUnit.instanceName())/]
	[if (dataUnit.supportActions->notEmpty())]
  [dataUnit.generateSupportActions()/]
	[/if]
[else]
[let indexUnit : IndexUnit = dataUnit.oclAsType(IndexUnit)]
 <div class="unit_padding">
  [indexUnit.generateViewContent(dataUnit.instanceName())/]
	[if (not indexUnit.pagination.oclIsUndefined())]
  [indexUnit.pagination()/]
	[/if]
	[if (indexUnit.supportActions->notEmpty())]
  [indexUnit.generateSupportActions()/]
	[/if]
 </div>
[/let]
[/if]
</section>
[/file]
[/let]
[/template]

[template private generateUnitTitle(unit : DataUnit, instanceVariable : String) post(trim())]
[if (unit.oclIsTypeOf(IndexGridUnit) or unit.dynamicTitle.oclIsUndefined())]
[unit.displayLabel/]
[elseif (unit.dynamicTitle.oclIsTypeOf(ServiceAttribute))]
[let attribute : ServiceAttribute = unit.dynamicTitle.oclAsType(ServiceAttribute)]
{% if [instanceVariable/] %}[if (not attribute.isEnumerationTypeSingleton())]
{{ [instanceVariable/].[attribute.modelPropertyName()/] }}[else]
	[let enumerationType : EnumerationType
		= attribute.attribute.oclAsType(SingletonElement).dataType.oclAsType(EnumerationType)]
{{ [enumerationType.modelClassName()/].option(entry.[attribute.modelPropertyName()/]) }}[/let]
	[/if]{% endif %}
[/let]
[else]
{{ [instanceVariable/].[unit.dynamicTitle.oclAsType(ModelLabel).name/]() }}
[/if]
[/template]

[template private generateSupportActions(unit : DynamicUnit) post(trim())]
 <?php
	echo Form::open(
		Route::get('[unit.displayedOn.oclAsType(Page).controllerName()/]')->uri(array(
			'action' => 'support',
			'param' => 'submit'
			[if (unit.pageDisplayedOn().hasParameterisedUnits())]
		)) . URL::query($query_parameters, FALSE),
			[else]
		)),
			[/if]
		array(
			'id' => '[unit.instanceName()/]',
			'class' => '[unit.controlClass/]'
		)) . PHP_EOL;
?>
			[for (action : UnitSupportAction | unit.supportActions)]
  <?php
		echo Form::submit('[action.name/]', '[action.displayLabel/]') . PHP_EOL;
?>
			[/for]
  <?php
	echo Form::close() . PHP_EOL;
?>
[/template]

[template private pagination(unit : IndexUnit)]
<ul class="unit_control">
[if (unit.useFirstLastPageLinks)]
{% if currentPage == 1 %}
 <li>[unit.firstPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('1')/]">[unit.firstPageLabel/]</a></li>
{% endif %}
[/if]
{% if currentPage == 1 %}
 <li>[unit.previousPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('currentPage - 1')/]">[unit.previousPageLabel/]</a></li>
{% endif %}
{% for page in 1..pageCount %}
 {% if page == currentPage %}
 <li>{{ page }}</li>
 {% else %}
 <li><a href="[unit.pageHref('page')/]">{{ page }}</a></li>
 {% endif %}
{% endfor %}
{% if currentPage == pageCount %}
 <li>[unit.nextPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('currentPage + 1')/]">[unit.nextPageLabel/]</a></li>
{% endif %}
[if (unit.useFirstLastPageLinks)]
{% if currentPage == pageCount %}
 <li>[unit.lastPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('pageCount')/]">[unit.lastPageLabel/]</a></li>
{% endif %}
[/if]
</ul>
[/template]

[template private pageHref(unit : IndexUnit, x : String) post(trim())]
{{ path('[unit.routeName()/]', app.request.query.all|merge({'[unit.pagination.parameters->first().name/]': [x/]})) }}
[/template]

[template public generateViewContent(unit : ContentUnit, instanceVariable : String)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[detailsUnit.generateDetailsContent(instanceVariable)/]
[/let]
[/template]

[template public generateDetailsContent(unit : DataUnit, instanceVariable : String)
	post(trim())]
{% if [instanceVariable/] %}
[if (unit.hasOmitFieldLabels())]
<ul class="[unit.layoutClass/]">
[else]
<dl class="[unit.layoutClass/]">
[/if]
[for (displayField : UnitField | unit.displayFields)]
	[if (displayField.conditionalDisplay())]
{% if [instanceVariable/].[displayField.modelPropertyName()/] %}
	[/if]
	[if (unit.hasOmitFieldLabels())]
<li class="[displayField.displayClass()/]">[displayField.generateDisplayField(instanceVariable)/]</li>
	[else]
 <dt class="[displayField.displayClass()/]">[displayField.displayLabel()/]</dt>
 <dd class="[displayField.displayClass()/]">[displayField.generateDisplayField(instanceVariable)/]</dd>
	[/if]
	[if (displayField.conditionalDisplay())]
{% endif %}
	[/if]
[/for]
[if (unit.hasOmitFieldLabels())]
</ul>
[else]
</dl>
[/if]
{% endif %}
[/template]

[template protected generateViewContent(unit : DataUnit, instanceVariable : String)
	? (unit.oclIsTypeOf(IndexLineDirectionUnit)) post(trim())]
[let indexUnit : IndexLineDirectionUnit = unit.oclAsType(IndexLineDirectionUnit)]
<ul class="[indexUnit.layoutClass/]">
{% for entry in [instanceVariable/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h1 class="[indexUnit.captionClass/]">[indexUnit.generateUnitTitle('entry')/]</h1>
[/if]
[for (displayField : UnitField | indexUnit.displayFields) ]
	[if (displayField.conditionalDisplay())]
{% if [instanceVariable/].[displayField.modelPropertyName()/] %}
	[/if]
<span class="[displayField.modelPropertyName()/]">[displayField.generateDisplayField('entry')/]</span>
	[if (displayField.conditionalDisplay())]
{% endif %}
	[/if]
[/for]
[if (indexUnit.actions->notEmpty())]
<span class="actions">
	[for (action : InlineAction | indexUnit.actions)]
		[action.generateAction('entry')/]
	[/for]</span>
[else]

[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
{% endfor %}
</ul>
[/let]
[/template]

[template protected generateViewContent(unit : DataUnit, instanceVariable : String)
	? (unit.oclIsTypeOf(IndexPageDirectionUnit)) post(trim())]
[let indexUnit : IndexPageDirectionUnit = unit.oclAsType(IndexPageDirectionUnit)]
<ul class="[indexUnit.layoutClass/]">
{% for entry in [instanceVariable/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h1 class="[indexUnit.captionClass/]">[indexUnit.generateUnitTitle('entry')/]</h1>
[/if]
  [unit.generateDetailsContent('entry')/]
[if (indexUnit.actions->notEmpty())]
  <td class="actions">
	[for (action : InlineAction | indexUnit.actions)]
		[action.generateAction('entry')/]
	[/for]</td>
[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
{% endfor %}
</ul>
[/let]
[/template]

[template public generateViewContent(unit : DataUnit, instanceVariable : String)
	? (unit.oclIsTypeOf(IndexGridUnit)) post(trim())]
[let indexUnit : IndexGridUnit = unit.oclAsType(IndexGridUnit)]
<table class="[indexUnit.layoutClass/]">
[if (not indexUnit.omitColumnLabels)]
 <thead class="[indexUnit.headerClass/]">
  <tr>
 	[for (displayField : UnitField | indexUnit.displayFields)]
   <th>[displayField.displayLabel()/]</th>
 	[/for]
	[if (indexUnit.actions->notEmpty())]
   <th>Actions</th>
	[/if]
  </tr>
 </thead>
[/if]
 <tbody>
{% for entry in [instanceVariable/] %}
  <tr class="<?php echo Text::alternate([for (class : String | indexUnit.rowClasses()) separator (', ')]'[class/]'[/for]); ?>">
 [for (displayField : UnitField | indexUnit.displayFields)]
   <td class="[displayField.styleClass()/]">[displayField.generateDisplayField('entry')/]</td>
[/for]
[if (indexUnit.actions->notEmpty())]
   <td class="actions">
	[for (action : InlineAction | indexUnit.actions)]
    [action.generateAction('entry')/]
	[/for]
   </td>
 [/if]
  </tr>
{% endfor %}
 </tbody>
</table>
[/let]
[/template]


[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.isDataTypeSingleton()) post(trim())]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
[if (feature.actions->isEmpty())]
	[if (feature.isBooleanDataType())]
<input type="checkbox"{% if [instanceVariable/] %} checked="checked"{% endif %} disabled=""/>
	[else]
{{ [feature.generateDisplayFieldAssess(instanceVariable)/][if (feature.maximumDisplaySize > 0)] | truncate([feature.maximumDisplaySize/]) [/if] }}
[/if]
[else]
[let action : InlineAction = feature.actions->first()]
[let targetController : Page = action.controller()]
<a href="{{ path('[targetController.name/]') }}">{{ [feature.generateDisplayFieldAssess(instanceVariable)/][if (feature.maximumDisplaySize > 0)]
 | truncate([feature.maximumDisplaySize/]) [/if] }}</a>
[/let]
[/let]
[/if]
[/let]
[/template]

[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.isDateSingleton()) post(trim())]
[let dateFormat : String =
	if field.oclIsTypeOf(UnitElement) then
		field.oclAsType(UnitElement).dateFormat
	else if field.oclIsTypeOf(UnitAssociation) then
		field.oclAsType(UnitAssociation).dateFormat
	else if field.oclIsTypeOf(DateField) then
		field.oclAsType(DateField).dateFormat
	else
		''
	endif endif endif]
{{ [field.generateDisplayFieldAssess(instanceVariable)/] | date[if (dateFormat <> '')]('[dateFormat/]'[/if])}}
[/let]
[/template]

[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.isEnumerationTypeSingleton()) post(trim())]
[let enumerationType : EnumerationType
	= field.oclAsType(UnitElement).serviceFeature.attribute.oclAsType(SingletonElement).dataType.oclAsType(EnumerationType)]
<?php
	echo [enumerationType.modelClassName()/].option($[instanceVariable/]->[field.oclAsType(UnitElement).modelPropertyName()/]);
?>
[/let]
[/template]

[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.isResourceSingleton()) post(trim())]
[let feature : UnitElement = field.oclAsType(UnitElement)]
<?php
	if (!empty($[instanceVariable/].[feature.modelPropertyName()/]))
		echo HTML::anchor(
			$[instanceVariable/].[feature.modelPropertyName()/],
			'[feature.displayLabel()/]',
			NULL, NULL, FALSE);
?>
[/let]
[/template]

[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.isAssociationSingleton()) post(trim())]
[let feature : UnitAssociation = field.oclAsType(UnitAssociation)]
{% if [feature.generateDisplayFieldAssess(instanceVariable)/] %}[if (feature.units->isEmpty())]
	[if (feature.actions->isEmpty())]
{{ [feature.generateDisplayFieldAssess(instanceVariable)/].[feature.generateAssociationLabel()/][if (feature.maximumDisplaySize > 0)]
 | truncate([feature.maximumDisplaySize/]) [/if]}}
	[else]
	[let action : InlineAction = feature.actions->first()]
	[let targetController : Page = action.controller()]
<a href="{{ path('[targetController.name/]'[if (action.oclIsTypeOf(SelectAction))]
[let select : SelectAction = action.oclAsType(SelectAction)]
	[comment if (not select.target.selectionFeature.oclIsUndefined())/]
, { '[comment select.routeParameterName()/]': [instanceVariable/].[comment select.target.selectionFeature.modelPropertyName()/]}[comment /if/]
[/let]
[/if]) }}">{{ [feature.generateDisplayFieldAssess(instanceVariable)/].[feature.generateAssociationLabel()/][if (feature.maximumDisplaySize > 0)]
 | truncate([feature.maximumDisplaySize/]) [/if] }}</a>
	[/let]
	[/let]
	[/if]
[else]
[let embeddedUnit : ContentUnit = feature.units->first()]
[feature.units.generateViewContent(instanceVariable.concat('.').concat(feature.modelPropertyName()))/]
[/let]
[/if]
[/let]
{% endif %}
[/template]

[template public generateDisplayField(field : UnitField, instanceVariable : String)
	? (field.oclIsKindOf(UnitAssociation) and not field.isSingleton()) post(trim())]
[let feature : UnitAssociation = field.oclAsType(UnitAssociation)]
[if (feature.units->isEmpty())]
	[if (feature.displayOption = CollectionDisplayOptions::PageDirection)]
{% for value in [instanceVariable/].[feature.modelPropertyName()/] %}
	<p>{{ value.[if (feature.dynamicLabel.oclIsUndefined())]defaultLabel()[else][feature.dynamicLabel/]()[/if] }}</p>
{% endfor %}
	[else]
{% for value in [instanceVariable/].[feature.modelPropertyName()/] %}<span>[if (feature.actions->isEmpty())]
{{ value.[if (feature.dynamicLabel.oclIsUndefined())]defaultLabel()[else][feature.dynamicLabel/]()[/if] }}[else]
		[let action : InlineAction = feature.actions->first()]
		[let targetController : Page = action.controller()]
	<a href="{{ path('[targetController.name/]') }}"
title="[action.displayLabel/] {{ value.[if (feature.dynamicLabel.oclIsUndefined())]defaultLabel()[else][feature.dynamicLabel/]()[/if]
) }}">{{ value.[if (feature.dynamicLabel.oclIsUndefined())]defaultLabel()[else][feature.dynamicLabel/]()[/if] }}</a>[/let]
		[/let]
		[/if]
</span>{% endfor %}
	[/if]
[else]
[let embeddedUnit : ContentUnit = feature.units->first()]
{# <?php
	[if (not embeddedUnit.oclIsKindOf(IndexUnit))]
find_all()[else][let embeddedIndexUnit : IndexUnit = embeddedUnit.oclAsType(IndexUnit)]
[if (embeddedIndexUnit.defaultSelection.oclIsUndefined())]
find_all()[else]
[embeddedIndexUnit.defaultSelection.instanceName()/](FALSE)[/if][/let][/if];
?> #}
[feature.units.generateViewContent(instanceVariable.concat('.').concat(feature.modelPropertyName()))/]
[/let]
[/if]
[/let]
[/template]

[template public generateAssociationLabel(association : UnitAssociation) post(trim())]
[if (not association.dynamicLabel.oclIsUndefined())]
[association.dynamicLabel.name/][else]
default[/if]Label
[/template]


[template public generateDisplayFieldAssess(field : UnitField, instanceVariable : String)
	? (field.oclIsTypeOf(UnitElement)) post(trim())]
[if (field.isBooleanDataType())]
<input type="checkbox"{% if [instanceVariable/].[field.modelPropertyName()/] %} checked="checked"{% endif %} disabled=""/>
[else]
[instanceVariable/].[field.modelPropertyName()/]
[/if]
[/template]

[template public generateDisplayFieldAssess(field : UnitField, instanceVariable : String)
	? (field.oclIsTypeOf(UnitAssociation)) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[instanceVariable/].[field.modelPropertyName()/][if (not association.childFeature.oclIsUndefined())]
.[association.childFeature.generateDisplayChildAssess()/][/if]
[/let]
[/template]

[template public generateDisplayChildAssess(child : UnitChildFeature)
	? (child.oclIsTypeOf(UnitChildElement)) post(trim())]
[let element : UnitChildElement = child.oclAsType(UnitChildElement)]
[element.serviceFeature.modelPropertyName()/]
[/let]
[/template]

[template public generateDisplayChildAssess(child : UnitChildFeature)
	? (child.oclIsTypeOf(UnitChildAssociation)) post(trim())]
[let association : UnitChildAssociation = child.oclAsType(UnitChildAssociation)]
[association.serviceFeature.modelPropertyName()/][if (not association.childFeature.oclIsUndefined())]
.[association.childFeature.generateDisplayChildAssess()/][/if]
[/let]
[/template]


[template public generateAction(action : InlineAction, instanceVariable : String)
	? (action.oclIsTypeOf(SelectAction)) post(trim())]
[let select : SelectAction = action.oclAsType(SelectAction)]
<a href="{{ path('[select.target.oclAsType(DynamicUnit).routeName()/]'[if (select.target.selectionFeatures->notEmpty())]
, {[for (feature : ServiceAttribute | select.target.selectionFeatures) separator(', ')]
'[feature.name/]': [instanceVariable/].[feature.modelPropertyName()/][/for]}[/if]) }}" title="[action.displayLabel/] {{ [instanceVariable/].defaultLabel() }}">[action.displayLabel/]</a>
[/let]
[/template]
