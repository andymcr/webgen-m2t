[comment encoding = UTF-8 /]
[module display(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(DataUnit)) post(trim())]
[let dataUnit : DataUnit = unit.oclAsType(DataUnit)]
[let accessor : String = dataUnit.instanceName()]
[file(dataUnit.viewFilename(), false)]
<section class="[dataUnit.styleClass/]{%if [dataUnit.service.errorName()/] is defined %} [dataUnit.errorClass/]{% endif %}" id="[dataUnit.instanceName()/]">
 <h1 class="[dataUnit.captionClass/][if (dataUnit.omitCaption)] hidden[/if]">[dataUnit.unitTitle(dataUnit.instanceName())/]</h1>
 <section class="[dataUnit.errorClass/]{% if not [dataUnit.service.errorName()/] is defined %} hidden{% endif %}">
{% if [dataUnit.service.errorName()/] is defined %}
   <p class="[dataUnit.errorClass/]">{{ [dataUnit.service.errorName()/] }}</p>
{% endif %}
 </section>
[if (not dataUnit.oclIsKindOf(IndexUnit))]
 [dataUnit.viewContent(accessor)/]
	[if (dataUnit.supportActions->select(a | not a.disable)->notEmpty())]
  [dataUnit.unitSupportLinks(accessor)/]
	[/if]
[else]
[let indexUnit : IndexUnit = dataUnit.oclAsType(IndexUnit)]
 <div class="unit_padding">
  [dataUnit.viewContent(accessor)/]
	[if (not indexUnit.pagination.oclIsUndefined())]
[indexUnit.pagination()/]
	[/if]
	[if (dataUnit.supportActions->select(a | not a.disable)->notEmpty())]
  [dataUnit.unitSupportLinks(accessor)/]
	[/if]
 </div>
[/let]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]


[template private unitTitle(unit : DataUnit, unitAccessor : String)
	? (unit.oclIsTypeOf(IndexGridUnit) or unit.title.oclIsUndefined())  post(trim())]
[unit.displayLabel/]
[/template]

[template private unitTitle(unit : DataUnit, unitAccessor : String)
	? (not unit.title.oclIsUndefined())  post(trim())]
[let labelAccessor : String
	= if unit.title.oclIsKindOf(Attribute) then
			unitAccessor.concat('.').concat(unit.title.oclAsType(Attribute).modelPropertyName())
		else
			unitAccessor
		endif]
{{ [unit.title.label(labelAccessor)/] }}
[/let]
[/template]


[template private unitSupportLinks(unit : DynamicUnit, accessor : String) post(trim())]
<form action="" id="[unit.instanceName()/]" class="[unit.controlClass/]">
[for (action : UnitSupportAction | unit.supportActions->select(a | not a.disable))]
 [action.unitSupportLink()/]
[/for]
</form>
[/template]

[template public unitSupportLink(action : UnitSupportAction) post(trim())]
<input type="submit" name="[action.actionName()/]" value="[action.displayLabel/]"[if (not action.confirmMessage.oclIsUndefined())]
onclick="return confirm('[action.confirmMessage/]');"[/if]/>
[/template]

[template private pagination(unit : IndexUnit)]
<ul class="unit_control">
[if (unit.useFirstLastPageLinks)]
{% if currentPage == 1 %}
 <li>[unit.firstPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('1')/]">[unit.firstPageLabel/]</a></li>
{% endif %}
[/if]
{% if currentPage == 1 %}
 <li>[unit.previousPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('currentPage - 1')/]">[unit.previousPageLabel/]</a></li>
{% endif %}
{% for page in 1..pageCount %}
 {% if page == currentPage %}
 <li>{{ page }}</li>
 {% else %}
 <li><a href="[unit.pageHref('page')/]">{{ page }}</a></li>
 {% endif %}
{% endfor %}
{% if currentPage == pageCount %}
 <li>[unit.nextPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('currentPage + 1')/]">[unit.nextPageLabel/]</a></li>
{% endif %}
[if (unit.useFirstLastPageLinks)]
{% if currentPage == pageCount %}
 <li>[unit.lastPageLabel/]</li>
{% else %}
 <li><a href="[unit.pageHref('pageCount')/]">[unit.lastPageLabel/]</a></li>
{% endif %}
[/if]
</ul>
[/template]

[template private pageHref(unit : IndexUnit, x : String) post(trim())]
{{ path('[unit.routeName()/]', app.request.query.all|merge({'[unit.pagination.parameters->first().name/]': [x/]})) }}
[/template]


[template public viewContent(unit : ContentUnit, accessor : String)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[detailsUnit.detailsContent(accessor)/]
[/let]
[/template]

[template public detailsContent(unit : DataUnit, accessor : String) post(trim())]
[if (unit.hasOmitFieldLabels())]
<ul class="[unit.layoutClass/]">
[else]
<dl class="[unit.layoutClass/]">
[/if]
[for (field : UnitField | unit.displayFields)]
[let fieldAccessor : String = accessor.concat('.').concat(field.modelPropertyName())]
	[if (field.conditionalDisplay())]
{% if [field.getValue(accessor)/] %}
	[/if]
	[if (unit.hasOmitFieldLabels())]
 <li class="[field.displayClass()/]">[field.displayValue(fieldAccessor)/]</li>
	[else]
 <dt class="[field.displayClass()/]">[field.displayLabel()/]</dt>
 <dd class="[field.displayClass()/]">[field.displayValue(fieldAccessor)/]</dd>
	[/if]
	[if (field.conditionalDisplay())]
{% endif %}
	[/if]
[/let]
[/for]
[if (unit.hasOmitFieldLabels())]
</ul>
[else]
</dl>
[/if]
[/template]

[template protected viewContent(unit : DataUnit, accessor : String)
	? (unit.oclIsTypeOf(IndexLineDirectionUnit)) post(trim())]
[let indexUnit : IndexLineDirectionUnit = unit.oclAsType(IndexLineDirectionUnit)]
<ul class="[indexUnit.layoutClass/]">
{% for entry in [accessor/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h1 class="[indexUnit.captionClass/]">[indexUnit.unitTitle('entry')/]</h1>
[/if]
[for (field : UnitField | indexUnit.displayFields) ]
[let fieldAccessor : String = 'entry'.concat('.').concat(field.modelPropertyName())]
	[if (field.conditionalDisplay())]
{% if [field.getValue(fieldAccessor)/] %}
	[/if]
<span class="[field.modelPropertyName()/]">[field.displayValue(fieldAccessor)/]</span>
	[if (field.conditionalDisplay())]
{% endif %}
	[/if]
[/let]
[/for]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
<span class="actions">[indexUnit.actions('entry')/]</span>
[else]

[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
{% endfor %}
</ul>
[/let]
[/template]

[template protected viewContent(unit : DataUnit, accessor : String)
	? (unit.oclIsTypeOf(IndexPageDirectionUnit)) post(trim())]
[let indexUnit : IndexPageDirectionUnit = unit.oclAsType(IndexPageDirectionUnit)]
<ul class="[indexUnit.layoutClass/]">
{% for entry in [accessor/] %}
 <li>
[if (not indexUnit.omitCaption)]
  <section>
   <h1 class="[indexUnit.captionClass/]">[indexUnit.unitTitle('entry')/]</h1>
[/if]
  [unit.detailsContent('entry')/]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
  <td class="actions">[indexUnit.actions('entry')/]</td>
[/if]
[if (not indexUnit.omitCaption)]
  </section>
[/if]
 </li>
{% endfor %}
</ul>
[/let]
[/template]

[template public viewContent(unit : DataUnit, accessor : String)
	? (unit.oclIsTypeOf(IndexGridUnit)) post(trim())]
[let indexUnit : IndexGridUnit = unit.oclAsType(IndexGridUnit)]
<table class="[indexUnit.layoutClass/]">
[if (not indexUnit.omitColumnLabels)]
 <thead class="[indexUnit.headerClass/]">
  <tr>
 	[for (field : UnitField | indexUnit.displayFields)]
   <th>[field.displayLabel()/]</th>
 	[/for]
	[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
   <th>Actions</th>
	[/if]
  </tr>
 </thead>
[/if]
 <tbody>
{% for entry in [accessor/] %}
  <tr class="{{ cycle(['['/][for (class : String | indexUnit.rowClasses()) separator (', ')]'[class/]'[/for][']'/], loop.index0) }}">
 [for (field : UnitField | indexUnit.displayFields)]
[let fieldAccessor : String = 'entry'.concat('.').concat(field.modelPropertyName())]
   <td class="[field.styleClass()/]">[field.displayValue(fieldAccessor)/]</td>
[/let]
[/for]
[if (indexUnit.actions->select(a | not a.disable)->notEmpty())]
   <td class="actions">[indexUnit.actions('entry')/]</td>
 [/if]
  </tr>
{% endfor %}
 </tbody>
</table>
[/let]
[/template]

[template private actions(unit : IndexUnit, accessor : String) post(trim())]
[for (action : InlineAction | unit.actions->select(a | not a.disable))]
[action.actionLink(accessor, '\''.concat(action.displayLabel).concat('\''), unit.service)/]
[/for]
[/template]


[template public displayValue(field : UnitField, accessor : String)
	? (field.isDataTypeSingleton() and not field.isBooleanDataType()) post(trim())]
[let feature : UnitFeature = field.oclAsType(UnitFeature)]
[if (feature.actions->select(a | not a.disable)->isEmpty())]
{{ [feature.getValue(accessor)/][if (feature.maximumDisplaySize > 0)]
 | truncate([feature.maximumDisplaySize/]) [/if] }}
[else]
    [feature.actions->select(a | not a.disable)->first().actionLink(accessor.substring(1, accessor.lastIndex('.') - 1), feature.getValue(accessor), field.displayedOn.service)/]
[/if]
[/let]
[/template]

[template public displayValue(field : UnitField, accessor : String)
	? (field.isEnumerationTypeSingleton()) post(trim())]
{{ [field.getValue(accessor)/][if (field.maximumDisplaySize > 0)]
 | truncate([field.maximumDisplaySize/]) [/if] }}
[/template]

[template public displayValue(field : UnitField, accessor : String)
	? (field.isDateSingleton()) post(trim())]
{{ [field.getValue(accessor)/] | date[if (not field.dateFormat.oclIsUndefined())]
('[field.dateFormat/]')[/if][if (field.maximumDisplaySize > 0)]
 | truncate([field.maximumDisplaySize/]) [/if] }}
[/template]

[template public displayValue(field : UnitField, accessor : String) 
	? (field.isBooleanDataType()) post(trim())] 
<input type="checkbox"{% if [accessor/] %} checked="checked"{% endif %} disabled=""/>
[/template] 
 
[template public displayValue(field : UnitField, accessor : String)
	? (field.isResourceSingleton()) post(trim())]
[let attribute : UnitElement = field.oclAsType(UnitElement)]
<?php
[if (not attribute.conditionalDisplay())]
    if (!empty([attribute.getValue(accessor)/]))
[/if]
        echo HTML::anchor(
            [attribute.getValue(accessor)/],
            '[attribute.displayLabel()/]',
            NULL, NULL, FALSE);
?>
[/let]
[/template]

[template public displayValue(field : UnitField, accessor : String)
	? (field.isAssociationSingleton()) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[let parentAccessor : String = accessor.substring(1, accessor.lastIndex('.') - 1)]
[if (association.units->isEmpty())]
[association.displayAssociation(accessor, parentAccessor, association.service())/]
[else]
[association.units->first().viewContent(accessor)/]
[/if]
[/let]
[/let]
[/template]

[template public displayValue(field : UnitField, accessor : String)
	? (field.oclIsKindOf(UnitAssociation) and not field.isSingleton()) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[if (association.units->isEmpty())]
{% for value in [accessor/] %}[if (association.displayOption = CollectionDisplayOptions::PageDirection)]
<p>[association.displayAssociation('value', 'value', association.serviceFeature.targetService())/]</p>[else]
<span>[association.displayAssociation('value', 'value', association.serviceFeature.targetService())/]</span>[/if]{% endfor %}
[else]
[let embeddedUnit : ContentUnit = association.units->first()]
	[if (not embeddedUnit.oclIsKindOf(IndexUnit))]
[association.units.viewContent(accessor)/]
	[elseif (embeddedUnit.oclAsType(IndexUnit).defaultSelection.oclIsUndefined())]
[association.units.viewContent(accessor)/]
	[else]
[association.units.viewContent(accessor.concat('.').concat(embeddedUnit.oclAsType(IndexUnit).defaultSelection.instanceName()).concat('(FALSE)'))/]
	[/if]
[/let]
[/if]
[/let]
[/template]

[template private displayAssociation(association : UnitAssociation, accessor : String, parentAccessor : String, service : Service) post(trim())]
[if (association.actions->select(a | not a.disable)->notEmpty())]
[association.actions->select(a | not a.disable)->first().actionLink(parentAccessor, association.getValue(accessor), service)/]
[else]
{{ [association.getValue(accessor)/]| default('')[if (association.maximumDisplaySize > 0)]
 | truncate([association.maximumDisplaySize/] - 3) [/if] }}
[/if]
[/template]


[template public getValue(field : UnitField, accessor : String) post(trim())]
[if (field.oclIsTypeOf(UnitFeature))]
[field.oclAsType(UnitFeature).getValue(accessor)/]
[else]
NULL
[/if]
[/template]

[template public getValue(feature : UnitFeature, accessor : String) post(trim())]
[if (feature.oclIsTypeOf(UnitElement))]
[feature.oclAsType(UnitElement).getValue(accessor)/]
[else]
[feature.oclAsType(UnitAssociation).getValue(accessor)/]
[/if]
[/template]

[template public getValue(attribute : UnitElement, accessor : String) post(trim())]
[attribute.serviceFeature.attribute.getValue(attribute, accessor)/]
[/template]

[template public getValue(association : UnitAssociation, accessor : String) post(trim())]
[if (association.childFeature.oclIsUndefined())]
	[if (not association.label.oclIsUndefined())]
[association.label.label(accessor)/]
	[else]
[accessor/].defaultLabel()
	[/if]
[else]
[association.childFeature.getValue(accessor)/]
[/if]
[/template]

[template public getValue(childFeature : ServiceFeatureReference, accessor : String)
	? (childFeature.oclIsTypeOf(ServiceAttributeReference)) post(trim())]
[let childAttribute : ServiceAttributeReference = childFeature.oclAsType(ServiceAttributeReference)]
[let childAccessor : String = accessor.concat('.').concat(childAttribute.attribute.modelPropertyName())]
[let unitFeatures : Sequence(UnitFeature) = childFeature.ancestors(UnitFeature)]
[if (unitFeatures->notEmpty())]
[childAttribute.attribute.attribute.getValue(unitFeatures->first(), childAccessor)/]
[else]
[childAttribute.attribute.attribute.getValue(null, childAccessor)/]
[/if]
[/let]
[/let]
[/let]
[/template]

[template public getValue(childFeature : ServiceFeatureReference, accessor : String)
	? (childFeature.oclIsTypeOf(ServiceAssociationReference)) post(trim())]
[let childAssociation : ServiceAssociationReference = childFeature.oclAsType(ServiceAssociationReference)]
[let childAccessor : String = accessor.concat('.').concat(childAssociation.association.modelPropertyName())]
[if (childAssociation.childFeature.oclIsUndefined())]
[childAccessor/].defaultLabel()
[else]
[childAssociation.childFeature.getValue(childAccessor)/]
[/if]
[/let]
[/let]
[/template]


[template public getValue(feature : Feature, field : UnitField, accessor : String)
	? (feature.isDataTypeSingleton() or feature.isDateSingleton() or feature.isResource()) post(trim())]
[accessor/]
[/template]

[template public getValue(feature : Feature, field : UnitField, accessor : String)
	? (feature.isEnumerationTypeSingleton()) post(trim())]
[feature.enumerationType().modelClassName()/]::option([accessor/])
[/template]


[template public actionLink(action : InlineAction, accessor : String, label : String, service : Service)
	? (action.oclIsTypeOf(SelectAction))  post(trim())]
[let select : SelectAction = action.oclAsType(SelectAction)]
[let targetUnit : DynamicUnit = select.target.oclAsType(DynamicUnit)]
<a href="{{ path('[targetUnit.routeName()/]', { [service.routeParameters(accessor)/] }) }}" title="[action.displayLabel/] {{ [accessor/].defaultLabel() }}">{{ [label/] }}</a>
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, accessor : String, label : String, service : Service)
	? (action.oclIsTypeOf(DeleteAction))  post(trim())]
[let delete : DeleteAction = action.oclAsType(DeleteAction)]
<a href="{{ path('[delete.routeName()/]', { [service.routeParameters(accessor)/] }) }}" title="[action.displayLabel/] {{ [accessor/].defaultLabel() }}" onclick="return confirm('{{ [accessor/].defaultLabel() }} [delete.confirmMessage/]');">{{ [label/] }}</a>
[/let]
[/template]


[template private routeParameters(service : Service, accessor : String) post(trim())]
[if (not service.parentService().oclIsUndefined())]
[service.parentService().routeParameters(accessor.concat('.').concat(service.parentAssociation(service.parentService()).modelPropertyName()))/]
[/if]
[for (key : ServiceFeatureReference | service.keys)]
'[key.routeParameterName()/]': [key.getValue(accessor)/],
[/for]
[/template]

