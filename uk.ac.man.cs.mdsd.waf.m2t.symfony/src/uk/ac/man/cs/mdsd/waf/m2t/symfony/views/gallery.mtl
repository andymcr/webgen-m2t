[comment encoding = UTF-8 /]
[module gallery(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::accessor/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsTypeOf(GalleryUnit)) post(trim())]
[let galleryUnit : GalleryUnit = unit.oclAsType(GalleryUnit)]
[file(galleryUnit.viewFilename(), false)]
<section class="[galleryUnit.styleClass/]" id="[galleryUnit.instanceName()/]">
[if (not galleryUnit.omitCaption)]
 <h2 class="[galleryUnit.captionClass/]">[galleryUnit.displayLabel/]</h2>
[/if]
 [galleryUnit.uniteGallery()/]
</section>
[/file]
[/let]
[/template]


[template private uniteGallery(unit : GalleryUnit) post(trim())]
[let accessor : String = unit.instanceName()]
<div id="gallery" class="gallery_content" style="display:none;">
{% for image in [accessor/] %}
[unit.imagePathFeature.uniteGallery(unit, 'image', 'image')/]
{% endfor %}
</div>
<script type="text/javascript"> 
    jQuery(document).ready(function(){ 
        jQuery("#gallery").unitegallery({
            gallery_theme: "tilesgrid",

            grid_space_between_cols:1,
            grid_space_between_rows:1,
            grid_padding:0,
            tile_enable_border:false,
            tile_enable_shadow:false,
[let thumbFilter : ThumbnailFilter = unit.thumbFilter()]
[if (not thumbnailFilter.oclIsUndefined())]
            tile_height:[thumbFilter.height/],
            tile_width:[thumbFilter.width/],
[/if]
[/let]
            tile_enable_textpanel:true,
	        tile_textpanel_title_text_align: "center",
            lightbox_type: "compact",
	        lightbox_arrows_position: "inside",
        });
    }); 
</script>
[/let]
[/template]

[query private thumbFilter(unit : ImageUnit) : ThumbnailFilter
	= let filters : Sequence(ThumbnailFilter)
		= unit.thumbnailFilter.filters->select(f | f.oclIsTypeOf(ThumbnailFilter)).oclAsType(ThumbnailFilter)
		in if filters->isEmpty() then
				null
			else
				filters->first()
			endif
/]

[template private uniteGallery(feature : FeaturePath, unit : GalleryUnit, parentAccessor : String, baseAccessor : String)
	? (feature.oclIsTypeOf(FeaturePathAttribute)) post(trim())]
[let attribute : FeaturePathAttribute = feature.oclAsType(FeaturePathAttribute)]
[let accessor : String = parentAccessor.concat('.').concat(attribute.attribute.modelPropertyName())]
[if (attribute.attribute.isRequired())]
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
[else]
	[if (unit.missingImagePath.oclIsUndefined())]
{% if [accessor/] is not empty %}
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
{% endif %}
	[else]
{% if [accessor/] is empty %}
<img [unit.imageMissingSrc()/][unit.imageAlt(baseAccessor)/] [unit.imageMissingDataImage()/][unit.imageDataDescription(baseAccessor)/]/>
{% else %}
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
{% endif %}
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private uniteGallery(feature : FeaturePath, unit : GalleryUnit, parentAccessor : String, baseAccessor : String)
	? (feature.oclIsTypeOf(FeaturePathAssociation)) post(trim())]
[let association : FeaturePathAssociation = feature.oclAsType(FeaturePathAssociation)]
[let accessor : String = parentAccessor.concat('.').concat(association.association.modelPropertyName())]
[if (association.association.isSingleton())]
	[if (association.association.isRequired())]
		[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.uniteGallery(unit, accessor, baseAccessor)/]
		[/if]
	[else]
{% if [accessor/] is empty %}
		[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.uniteGallery(unit, accessor, baseAccessor)/]
		[/if]
{% endif %}
	[/if]
[else]
{% if [accessor/] | length > 0 %}
{% set child = [accessor/] | first %}
	[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.uniteGallery(unit, 'child', baseAccessor)/]
	[/if]
	[if (not unit.missingImagePath.oclIsUndefined())]
{% else %}
<img [unit.imageMissingSrc()/][unit.imageAlt(baseAccessor)/] [unit.imageMissingDataImage()/][unit.imageDataDescription(baseAccessor)/]/>
	[/if]
{% endif %}
[/if]
[/let]
[/let]
[/template]

[template private uniteGallery(feature : ChildFeature, unit : GalleryUnit, parentAccessor : String, baseAccessor : String)
	? (feature.oclIsTypeOf(ChildAttribute)) post(trim())]
[let attribute : ChildAttribute = feature.oclAsType(ChildAttribute)]
[let accessor : String = parentAccessor.concat('.').concat(attribute.attribute.modelPropertyName())]
[if (attribute.attribute.isRequired())]
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
[else]
	[if (unit.missingImagePath.oclIsUndefined())]
{% if [accessor/] is not empty %}
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
{% endif %}
	[else]
{% if [accessor/] is empty %}
<img [unit.imageMissingSrc()/][unit.imageAlt(baseAccessor)/] [unit.imageMissingDataImage()/][unit.imageDataDescription(baseAccessor)/]/>
{% else %}
<img [unit.imageSrc(accessor)/][unit.imageAlt(baseAccessor)/] [unit.imageDataImage(accessor)/][unit.imageDataDescription(baseAccessor)/]/>
{% endif %}
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private uniteGallery(feature : ChildFeature, unit : GalleryUnit, parentAccessor : String, baseAccessor : String)
	? (feature.oclIsTypeOf(ChildAssociation)) post(trim())]
[let association : ChildAssociation = feature.oclAsType(ChildAssociation)]
[let accessor : String = parentAccessor.concat('.').concat(association.association.modelPropertyName())]
[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.uniteGallery(unit, accessor, baseAccessor)/]
[/if]
[/let]
[/let]
[/template]


[template private blueimp(unit : GalleryUnit) post(trim())]
<div id="blueimp-gallery-carousel" class="blueimp-gallery blueimp-gallery-controls">
 <h3 class="title"></h3>
 <a class="prev">&lt;</a>
 <a class="next">&gt;</a>
 <a class="play-pause"></a>
 <ol class="indicator"></ol>
</div>
<div id="links">
{% for image in [unit.instanceName()/] %}
 <a href="http://sps.andycarpenter.me.uk/{{ image.filePath }}" title="{{ image.image.title }}">
  <!-- img src="images/thumbnails/banana.jpg" alt="Banana" -->
 </a>
{% endfor %}
</div>
<script src="{{ asset('js/blueimp-gallery.min.js') }}"></script>
<script type="text/javascript">
blueimp.Gallery(
    document.getElementById('links').getElementsByTagName('a'),
    {
        container: '#blueimp-gallery-carousel',
        carousel: true
    }
);
</script>
[/template]

[template private imageSrc(unit : ImageUnit, accessor : String) post(trim())]
src="{{ [accessor/] | imagine_filter('[unit.thumbnailFilter.name/]') }}"
[/template]

[template private imageMissingSrc(unit : ImageUnit) post(trim())]
src="{{ '[unit.missingImagePath/]' | imagine_filter('[unit.thumbnailFilter.name/]') }}"
[/template]

[template private imageAlt(unit : ImageUnit, accessor : String)]
[if (not unit.titleFeature.oclIsUndefined())]
 alt="{{ [unit.titleFeature.accessor(accessor)/] }}"[/if]
[/template]

[template private imageDataImage(unit : ImageUnit, accessor : String) post(trim())]
data-image="[if (unit.imageFilter.oclIsUndefined())]
http://sps.andycarpenter.me.uk/{{ [accessor/] }}[else]
{{ [accessor/] | imagine_filter('[unit.imageFilter.name/]') }}[/if]"
[/template]

[template private imageMissingDataImage(unit : ImageUnit) post(trim())]
data-image="http://sps.andycarpenter.me.uk/[unit.missingImagePath/]"
[/template]

[template private imageDataDescription(unit : ImageUnit, accessor : String)]
 data-description="?????"[/template]