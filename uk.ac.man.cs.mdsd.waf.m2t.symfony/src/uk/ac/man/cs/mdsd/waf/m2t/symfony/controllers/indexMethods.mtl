[comment encoding = UTF-8 /]
[module indexMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[indexUnit.actionMethod()/]

[if (unit.pageDisplayedOn().units->size() > 1)]
[indexUnit.selectMethod()/]

[/if]
[/let]
[/template]

[template private actionMethod(unit : IndexUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]([unit.filteredSelectableParameters(true)/])
{
[if (page.units->size() = 1)]
    [unit.selectCode()/]

[/if]
[if (page.units->size() > 1)]
    return $this->renderPage([page.renderActualParameters(unit.oclAsType(IndexUnit).selectType())/]);
[else]
    $parameters = array();
    [page.templateParameters()/]
    [unit.templateParameters()/]
    return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/if]
}
[/let]
[/template]

[template private selectMethod(unit : IndexUnit) post(trim())]
private function [unit.selectName()/]([unit.filteredSelectableParameters(true)/])
{
    [unit.selectCode()/]
}
[/template]

[template private selectCode(unit : IndexUnit) post(trim())]
[if (not unit.pagination.oclIsUndefined())]
$this->page = $request->query->getInt('[unit.pagination.parameters->first().name/]', 1);
[/if]
[if (not unit.selectionType.oclIsUndefined())]
$this->[unit.selectionType.instanceName()/] = [unit.getSelectionService()/]->find([unit.selectableParameters()/]);
[/if]
[if (not unit.selectionType.oclIsUndefined() and not unit.containingFeature.oclIsUndefined())]
[unit.childSelect()/]
[else]
[unit.contentSelect()/]
[/if]
[/template]

[template private childSelect(unit : IndexUnit) post(trim())]
[if (unit.hasFilters())]
[unit.childFilterSelect()/]
else
[/if]
[if (unit.selection.oclIsUndefined())]
$this->[unit.instanceName()/] = $this->[unit.selectionType.instanceName()/]->[unit.containingFeature.getMethodName()/]([unit.paginationActuals()/]);
[else]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.containingFeature.oclAsType(Association).childSelectionName(unit.selection)/]($this->[unit.selectionType.instanceName()/][unit.paginationActuals(true)/]);
[/if]
[/template]

[template private childFilterSelect(unit : IndexUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('else')]
if ([for (parameter : FilterParameter | f.parameters) separator(' && ')]
$request->query->has('[parameter.name/]')[/for])
    [unit.childFilterCall(f)/]
[/for]
[/template]

[template private childFilterCall(unit : IndexUnit, filter : Filter)]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.containingFeature.oclAsType(Association).childSelectionName(filter.selection)/](
    $this->[unit.selectionType.instanceName()/],
[for (parameter : SelectionParameter | filter.selection.parameters)]
[let actual : FilterParameter = filter.matchingActual(parameter)]
    $request->query->get('[actual.name/]'),
[/let]
[/for]
    [unit.paginationActuals()/]
);
[/template]

[template private contentSelect(unit : IndexUnit) post(trim())]
[if (unit.hasFilters())]
[unit.contentFilterSelect()/]
else
[/if]
[if (not unit.selection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.selection.instanceName()/]([unit.selectableParameters()/][unit.paginationActuals()/]);
[elseif (not unit.defaultSelection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.defaultSelection.instanceName()/]([unit.selectableParameters()/][unit.paginationActuals()/]);
[else]
$this->[unit.instanceName()/] = [unit.getContentService()/]->findAll([unit.paginationActuals()/]);
[/if]
[/template]

[template private contentFilterSelect(unit : IndexUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('else')]
if ([for (parameter : FilterParameter | f.parameters) separator(' && ')]
$request->query->has('[parameter.name/]')[/for])
    [unit.contentFilterCall(f)/]
[/for]
[/template]

[template private contentFilterCall(unit : IndexUnit, filter : Filter)]
$this->[unit.instanceName()/] = [unit.getContentService()/]->[filter.selection.instanceName()/](
[for (parameter : SelectionParameter | filter.selection.parameters)]
[let actual : FilterParameter = filter.matchingActual(parameter)]
    $request->query->get('[actual.name/]'),
[/let]
[/for]
    [unit.paginationActuals()/]
);
[/template]

[template private paginationActuals(unit : IndexUnit) post(trim())]
[unit.paginationActuals(false)/]
[/template]

[template private paginationActuals(unit : IndexUnit, continuation: Boolean) post(trim())]
[if (not unit.pagination.oclIsUndefined())]
[if (continuation)], [/if]$this->page, [unit.defaultPaginationSize/]
[/if]
[/template]


[template private templateParameters(unit : IndexUnit) post(trim())]
[if (unit.pageDisplayedOn().units->size() > 1)]
$this->[unit.selectName()/]([unit.filteredSelectableParameters()/]);
[/if]
[if (not unit.selectionType.oclIsUndefined())]
$parameters['['/]'[unit.selectionType.instanceName()/]'[']'/] = $this->[unit.selectionType.instanceName()/];
[/if]
$parameters['['/]'[unit.instanceName()/]'[']'/] = $this->[unit.instanceName()/];
[if (not unit.pagination.oclIsUndefined())]
$parameters['['/]'currentPage'[']'/] = $this->page;
$parameters['['/]'pageCount'[']'/] = ceil($this->[unit.instanceName()/]->count() / [unit.defaultPaginationSize/]);
[/if]
[/template]
