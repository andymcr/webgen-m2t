[comment encoding = UTF-8 /]
[module indexMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[indexUnit.actionMethod()/]

[if (unit.pageDisplayedOn().units->size() > 1)]
[indexUnit.selectMethod()/]

[/if]
[/let]
[/template]

[template private actionMethod(unit : IndexUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]([unit.filteredSelectableParameters(true)/])
{
[if (page.units->size() = 1)]
    [unit.selectCode()/]

[/if]
[if (page.units->size() > 1)]
    return $this->renderPage([page.renderActualParameters(unit.oclAsType(IndexUnit).selectType())/]);
[else]
    $parameters = array();
    [page.templateParameters()/]
    [unit.templateParameters()/]
    return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/if]
}
[/let]
[/template]

[template private selectMethod(unit : IndexUnit) post(trim())]
private function [unit.selectName()/]([unit.filteredSelectableParameters(true)/])
{
    [unit.selectCode()/]
}
[/template]

[template private selectCode(unit : IndexUnit) post(trim())]
[if (not unit.pagination.oclIsUndefined())]
$this->page = $request->query->getInt('[unit.pagination.parameters->first().name/]', 1);
[/if]
[if (unit.hasFilters())]
[unit.filterSelect()/]
else
[/if]
[if (not unit.selectionType.oclIsUndefined())]
	[if (unit.containingFeature.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.selection.methodName()/]([unit.selectableParameters()/]);
	[else]
$[unit.selectionType.instanceName()/] = [unit.getSelectionService()/]->find([unit.selectableParameters()/]);
		[if (not unit.selection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[unit.containingFeature.oclAsType(Association).childSelectionName(unit.selection)/]($[unit.selectionType.instanceName()/][if (not unit.pagination.oclIsUndefined())]
, [unit.paginationActuals()/][/if]);
		[else]
$this->[unit.instanceName()/] = $[unit.selectionType.instanceName()/]->[unit.containingFeature.getMethodName()/]();
		[/if]
	[/if]
[elseif (not unit.defaultSelection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.getContentService()/]->[unit.defaultSelection.instanceName()/]([if (not unit.pagination.oclIsUndefined())]
[unit.paginationActuals()/][/if]);
[else]
$this->[unit.instanceName()/] = [unit.getContentService()/]->findAll([if (not unit.pagination.oclIsUndefined())]
[unit.paginationActuals()/][/if]);
[/if]
[/template]

[template private filterSelect(unit : IndexUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('} else ')]
if ([for (parameter : FilterParameter | f.parameters) separator(' && ')]
$request->query->has('[parameter.name/]')[/for]) {
    [unit.filterCall(f)/]
[/for]
}
[/template]

[template private filterCall(unit : IndexUnit, f : Filter)]
$this->[unit.instanceName()/] = [unit.getContentService()/]->[f.selection.instanceName()/](
[for (parameter : SelectionParameter | f.selection.parameters) separator(', ')]
[let actual : FilterParameter = f.matchingActual(parameter)]
    $request->query->get('[actual.name/]')[/let][/for]
[if (not unit.pagination.oclIsUndefined())]
[if (f.selection.parameters->notEmpty())],
    [/if][unit.paginationActuals()/][/if]
);
[/template]

[template private paginationActuals(unit : IndexUnit)]
$this->page, [unit.defaultPaginationSize/]
[/template]


[template private templateParameters(unit : IndexUnit) post(trim())]
[if (unit.pageDisplayedOn().units->size() > 1)]
$this->[unit.selectName()/]([unit.filteredSelectableParameters()/]);
[/if]
$parameters['['/]'[unit.instanceName()/]'[']'/] = $this->[unit.instanceName()/];
[if (not unit.pagination.oclIsUndefined())]
$parameters['['/]'currentPage'[']'/] = $this->page;
$parameters['['/]'pageCount'[']'/] = ceil($this->[unit.instanceName()/]->count() / [unit.defaultPaginationSize/]);
[/if]
[/template]
