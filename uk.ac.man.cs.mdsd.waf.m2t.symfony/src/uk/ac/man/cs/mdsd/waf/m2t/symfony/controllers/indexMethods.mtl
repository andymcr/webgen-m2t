[comment encoding = UTF-8 /]
[module indexMethods(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[indexUnit.mainAction()/]

[for (action : InlineAction | unit.uriActions())]
[comment action.generateActionMethod('$this->'.concat(unit.instanceName()).concat('_error'))/]

[/for]
[/let]
[/template]

[template private mainAction(unit : IndexUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 * @Route("[unit.uriPath()/]", name="[unit.routeName()/]")
 */
public function [unit.actionName()/]([if (unit.hasFilterParameters())]
Request $request[/if])
{
[if (not unit.pagination.oclIsUndefined())]
    $page = $request->query->getInt('[unit.pagination.parameters->first().name/]', 1);
[/if]
[if (unit.hasFilters())]
    [unit.filterSelect()/]
    else
[/if]
[if (not unit.defaultSelection.oclIsUndefined())]
        [unit.selectionCall(unit.defaultSelection, null)/]
[else]
    $[unit.instanceName()/] = $this->getDoctrine()
        ->getRepository('[unit.appBundleName()/]:[unit.service.name/]')
        ->findAll();
[/if]

    return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', array(
        'title' => '[page.displayLabel/]',
        [unit.templateParameters()/]
    ));
}
[/let]
[/template]

[template private filterSelect(unit : IndexUnit) post(trim())]
[for (f : Filter | unit.filters()) separator('else ')]
if ([for (parameter : FilterParameter | f.parameters) separator(' || ')][parameter.queryPresentTest()/][/for])
[unit.filterCall(f)/][/for]
[/template]

[template private queryPresentTest(parameter : FilterParameter) post(trim())]
$request->query->has('[parameter.name/]')
[/template]

[template private filterCall(unit : IndexUnit, f : Filter)]
[if (f.selection.parameters->notEmpty())]
{
	[for (parameter : SelectionParameter | f.selection.parameters)]
	[let actual : FilterParameter = f.matchingActual(parameter)]
		[if (f.selection.parameters->size() = 1)]
    $[parameter.name/] = $request->query->get('[actual.name/]');
		[else]
    $[parameter.name/] = $request->query->has('[actual.name/]')
        ? $request->query->get('[actual.name/]')
        : NULL;
		[/if]
	[/let]
	[/for]
[/if]
    [unit.selectionCall(f.selection, f)/]
[if (f.selection.parameters->notEmpty())]
}
[/if]
[/template]

[template private selectionCall(unit : IndexUnit, selection : Selection, f : Filter)]
$[unit.instanceName()/] = $this->get('[unit.service.name/]')->[selection.instanceName()/]([unit.selectionActuals(f)/]);
[/template]

[template private selectionActuals(unit : IndexUnit, f : Filter) post(trim())]
[if (not f.oclIsUndefined())]
	[if(f.selection.parameters->notEmpty())]
		[for (parameter : SelectionParameter | f.selection.parameters) separator(', ')]
$[parameter.name/][/for], [/if]
[/if]
[if (unit.pagination.oclIsUndefined())]
NULL[else]$page[/if], [unit.defaultPaginationSize/]
[/template]

[template private templateParameters(unit : IndexUnit) post(trim())]
'[unit.instanceName()/]' => $[unit.instanceName()/],
[if (not unit.pagination.oclIsUndefined())]
'currentPage' => $page,
'pageCount' => ceil($[unit.instanceName()/]->count() / [unit.defaultPaginationSize/]),
[/if]
[/template]
