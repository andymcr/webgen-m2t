[comment encoding = UTF-8 /]
[module page(
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::imageMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::indexMethods/]


[template public controller(page : Page)]
[file(page.controllerFilename(), false)]
<?php
namespace [page.webControllersNamespace()/];

[page.useStatements()/]


class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{
[for (unit : ContentUnit | page.units)]
    [unit.unitMethods()/]

	[if (unit.oclIsKindOf(DynamicUnit))]
		[for (action : InlineAction | unit.oclAsType(DynamicUnit).uriActions())]
    [action.actionMethod(page)/]

		[/for]
	[/if]
[/for]
[if (page.hasUnitActions())]
    [page.actionMethods()/]

[/if]
[if (page.units->size() > 1)]
    [page.renderMethod()/]
[/if]
}
[/file]
[/template]

[template private useStatements(page : Page) post(trim())]
[for (entity : EntityOrView | page.editUnits()->collect(u | u.entities)->asSet()->asSequence()->sortedBy(e | e.name))]
use [entity.modelsNamespace()/]\[entity.modelName()/];
[/for]
[for (entity : EntityOrView | page.editUnits()->collect(u | u.entities)->asSet()->asSequence()->sortedBy(e | e.name))]
use [entity.formTypeNamespace()/]\[entity.typeClassName()/];
[/for]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
[if (page.hasInlineFileActions())]
use Symfony\Component\HttpFoundation\BinaryFileResponse;
[/if]
[if (page.hasFilterParameters() or page.hasUpdateUnits())]
use Symfony\Component\HttpFoundation\Request;
[/if]
[if (page.unitsWithSupportActions()->notEmpty())]
use Symfony\Component\HttpFoundation\Response;
// [protected ('support.use')]
// [/protected]
[/if]
[if (page.hasInlineFileActions())]
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
[/if]
[/template]

[template private renderMethod(page : Page) post(trim())]
private function renderPage([if (page.hasFilterParameters())]
Request $request[if (page.uriCommonPathKeys()->notEmpty())]
, [/if][/if][for (key : Attribute | page.uriCommonPathKeys()) separator(', ')]
$[key.routeParameterName(page.uriCommonPathKeys()->last().partOf)/][/for])
{
    $parameters = array();
    [page.templateParameters()/]
[for (unit : ContentUnit | page.units)]
    [unit.templateParameters()/]
[/for]

    return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
}
[/template]

[template private actionMethods(page : Page) post(trim())]
[for (unit : DynamicUnit | page.unitsWithSupportActions())]
/**
 * @Route("[unit.supportUriPath()/]", name="[unit.supportRouteName()/]")
 */
public function [unit.supportActionName()/](Request $request)
{
	[if (unit.oclIsTypeOf(DetailsUnit))]
    $[unit.instanceName()/] = [unit.loadInstance()/];
    [unit.actionHandlers()/]
	[else]
    [unit.actionHandlers()/]
	[/if]
}
[/for]

/* [protected (page.instanceName().concat('.support'))]
 */
/* [/protected]
 */
[/template]

[template private actionHandlers(unit : DynamicUnit) post(trim())]
[for (action : UnitSupportAction | unit.supportActions)]
if ($request->query->has('[action.actionName()/]')) {
    // [protected ('support.'.concat(action.actionName()))]
    // [/protected]
}

[/for]
return new Response("No action taken", 200);
[/template]

[template private actionMethod(action : InlineAction, page : Page)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.immediateUnit()]
/**
 * @Route("[deleteAction.uriPath()/]", name="[deleteAction.routeName()/]")
 */
public function [deleteAction.actionName()/]([unit.inlineActionMethodParameters(page)/])
{
    $[deleteAction.instanceName()/] = [unit.loadInstance()/];
    $this->get('[deleteAction.usedBy.oclAsType(IndexUnit).service().instanceName()/]')->remove($[deleteAction.instanceName()/], true);
[if (not deleteAction.destination.oclIsUndefined() and deleteAction.destination.units->notEmpty())]
    $this->redirectToRoute('[deleteAction.destination.units->first().routeName()/]');
[else]

    return $this->renderPage([unit.pageDisplayedOn().renderActualParameters(unit)/]);
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : InlineAction, page : Page)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let feature : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[let unit : DynamicUnit = action.immediateUnit().containingUnit()]
/**
 * @Route("[feature.uriPath()/]", name="[feature.routeName()/]")
 */
public function [action.actionName()/]([unit.inlineActionMethodParameters(page)/])
{
[if (feature.operation.resultType = OperationResultTypes::None)]
    $this->get('[feature.operation.partOf.instanceName()/]')
        ->[feature.operation.methodName()/]([unit.loadInstance()/]);
[elseif (feature.operation.resultType = OperationResultTypes::File)]
    $tempFilename = $this->get('[feature.operation.partOf.instanceName()/]')
        ->[feature.operation.methodName()/]([unit.loadInstance()/], '[feature.fileExtension/]');
    $response = new BinaryFileResponse($tempFilename);
    $filename = $[unit.uriPathKeys()->first().routeParameterName(unit.entities->first())/] . '[feature.fileExtension/]';
    $response->setContentDisposition(
        ResponseHeaderBag::DISPOSITION_ATTACHMENT,
        $filename
    );
    $response->headers->set('Content-type', mime_content_type($tempFilename));
    return $response;
[/if]
[if (feature.operation.resultType = OperationResultTypes::None)]

    return $this->renderPage([unit.pageDisplayedOn().renderActualParameters(unit)/]);
[/if]
}
[/let]
[/let]
[/template]

