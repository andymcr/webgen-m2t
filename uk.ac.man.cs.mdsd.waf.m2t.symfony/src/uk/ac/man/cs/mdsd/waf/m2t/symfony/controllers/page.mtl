[comment encoding = UTF-8 /]
[module page(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::model/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::collectionMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::staticMethods/]


[template public controller(page : Page, model : WafModel)]
[file(page.controllerFilename(model), false)]
<?php
[if (model.hasAPI())]
namespace [page.webControllersNamespace()/];
[else]
namespace [page.controllersNamespace()/];
[/if]

[page.useStatements()/]


class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{
[if (page.services()->notEmpty())]
	[for (service : Service | page.services())]
    private $[service.instanceServiceName()/];

	[/for]
    public function __construct([for (service : Service | page.services()) separator (', ')]
[service.className()/] $[service.instanceName()/][/for])
    {
	[for (service : Service | page.services())]
        $this->[service.instanceServiceName()/] = $[service.instanceName()/];
	[/for]
    }

[/if]
[if (page.hasSingleActionMethod())]
    [page.actionMethod()/]

	[for (unit : DynamicUnit | page.dynamicUnits())]
		[if (unit.hasActionSupportMethods())]
    [unit.actionSupportMethods()/]

		[/if]
	[/for]
	[for (action : InlineAction | page.inlineActionsRequiringHandlers())]
    [action.actionMethod(page)/]

	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits())]
    [unit.unitMethods()/]

		[for (action : InlineAction | unit.inlineActionsRequiringHandlers())]
    [action.actionMethod(page)/]

		[/for]
	[/for]
[/if]
[if (page.hasUnitSupportActions())]
    [page.unitSupportActionMethods()/]

[/if]
[if (not page.hasSingleActionMethod())]
    [page.renderMethod()/]
[/if]
}
[/file]
[/template]

[template private useStatements(page : Page) post(trim())]
[for (entity : EntityOrView | page.editUnits()
		->select(u | not u.oclIsTypeOf(UpdateUnit) or page.units->size() > 1)
		->collect(u | u.contentType)->asSet()->asSequence()->sortedBy(e | e.name))]
use [entity.modelsNamespace()/]\[entity.modelName()/];
[/for]
[for (form : DynamicUnit | page.formUnits()->sortedBy(u | u.name))]
use [form.formTypeNamespace()/]\[form.typeClassName(page.partOf)/];
[/for]
[if (page.editUnits()->collect(u | u.inputFields())->select(f | f.isContains())->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
[if (page.hasAuthorisationRole())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
[/if]
[if (page.hasAuthorisationRoles())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
[/if]
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
[if (page.hasInlineFileActions())]
use Symfony\Component\HttpFoundation\BinaryFileResponse;
[/if]
[if (page.hasFilters() or page.hasPagination() or page.hasEditUnits() or page.hasUnitSupportActions())]
use Symfony\Component\HttpFoundation\Request;
[/if]
[if (page.hasInlineFileActions() or page.dynamicUnits()->select(u | not u.oclIsKindOf(EditUnit) and u.hasUnitSupportActions())->notEmpty())]
use Symfony\Component\HttpFoundation\Response;
[/if]
[if (page.hasInlineFileActions())]
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
[/if]
[for (service : Service | page.services())]
use [service.servicesNamespace()/]\[service.className()/];
[/for]
[if (page.hasUnitSupportActions())]
// [protected ('support.use')]
// [/protected]
[/if]
[/template]

[template private actionMethod(page : Page) post(trim())]
/**
 [page.routeAnnotation()/]
[if (page.hasAuthorisation())]
 [page.securityAnnotation()/]
[/if]
 */
public function [page.actionName()/]([page.actionMethodParameters()/])
{
[for (unit : DynamicUnit | page.dynamicUnits())]
    [unit.actionCore()/]

[/for]
    [page.renderCore()/]
}
[/template]

[template private renderMethod(page : Page) post(trim())]
private function renderPage([if (page.hasFilters() or page.hasPagination())]
Request $request[if (page.uriCommonPathKeys()->notEmpty())]
, [/if][/if][for (key : Attribute | page.uriCommonPathKeys()) separator(', ')]
$[key.routeParameterName(page.uriCommonPathKeys()->last().partOf)/][/for])
{
    [page.renderCore()/]
}
[/template]

[template private renderCore(page : Page) post(trim())]
$parameters = array();
[page.templateParameters()/]
[for (unit : ContentUnit | page.units)]
[unit.templateParameters()/]
[/for]

return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/template]

[template private unitSupportActionMethods(page : Page) post(trim())]
[for (unit : DynamicUnit | page.dynamicUnits())]
	[if (unit.hasUnitSupportActions() and not unit.oclIsKindOf(EditUnit))]
/**
 * @Route("[unit.supportUriPath()/]", name="[unit.supportRouteName()/]")
[if (unit.hasAuthorisation())]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.supportActionName()/]([page.supportActionMethodParameters(unit, unit.routingType())/])
{
	[if (unit.oclIsTypeOf(DetailsUnit))]
    $[unit.contentType().instanceName()/] = [unit.loadInstance(unit.routingType(), true)/];
    [unit.actionHandlers()/]
	[else]
    [unit.actionHandlers()/]
	[/if]
}

	[/if]
[/for]
/* [protected (page.instanceName().concat('.support'))]
 */
/* [/protected]
 */
[/template]

[template private actionHandlers(unit : DynamicUnit) post(trim())]
[for (action : UnitSupportAction | unit.unitSupportActions())]
if ($request->query->has('[action.actionName()/]')) {
    // [protected ('support.'.concat(action.actionName()))]
    // [/protected]
}

[/for]
return new Response("No action taken", 200);
[/template]

[template private actionMethod(action : InlineAction, page : Page)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.immediateUnit()]
[let contentType : EntityOrView = unit.contentType()]
/**
 * @Route("[deleteAction.uriPath()/]", name="[deleteAction.routeName()/]")
[if (deleteAction.hasAuthorisation())]
 [deleteAction.securityAnnotation()/]
[/if]
 */
public function [deleteAction.actionName()/]([page.actionParameters(deleteAction, unit)/])
{
    $[deleteAction.instanceName()/] = [unit.loadElement()/];
    if (!$[deleteAction.instanceName()/]) {
        throw $this->createNotFoundException('The [contentType.name/] does not exist');
    }
    $this->[deleteAction.usedBy.oclAsType(IndexUnit).contentService().instanceName()/]->remove($[deleteAction.instanceName()/], true);

[if (not deleteAction.destination.oclIsUndefined() and deleteAction.destination.units->notEmpty())]
    return [deleteAction.destination.redirect()/];
[else]
    return [unit.redirect(unit.containingUnit().routingType(), unit.containingUnit().routeName(), contentType)/];
[/if]
}
[/let]
[/let]
[/let]
[/template]

[template private actionMethod(action : InlineAction, page : Page)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let featureAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[let unit : DynamicUnit = action.immediateUnit()]
[let contentType : EntityOrView = unit.contentType()]
/**
 * @Route("[featureAction.uriPath()/]", name="[featureAction.routeName()/]")
[if (featureAction.hasAuthorisation())]
 [featureAction.securityAnnotation()/]
[/if]
 */
public function [action.actionName()/]([page.actionParameters(featureAction, unit)/])
{
[if (unit.hasPagination())]
    [unit.oclAsType(CollectionUnit).notePage()/]
[/if]
[if (featureAction.operation.resultType = OperationResultTypes::None)]
    $[featureAction.instanceName()/] = [unit.loadElement()/];
    if (!$[featureAction.instanceName()/]) {
        throw $this->createNotFoundException('The [contentType.name/] does not exist');
    }
    $this->[featureAction.operation.partOf.instanceServiceName()/]->[featureAction.operation.methodName()/]($[featureAction.instanceName()/]);
[elseif (featureAction.operation.resultType = OperationResultTypes::File)]
    $tempFilename = $this->[featureAction.operation.partOf.instanceServiceName()/]
        ->[featureAction.operation.methodName()/]([unit.loadInstance(contentType, true)/], '[featureAction.fileExtension/]');
    $response = new BinaryFileResponse($tempFilename);
    $filename = $[contentType.uriPathKeys()->first().routeParameterName(contentType)/] . '[featureAction.fileExtension/]';
    $response->setContentDisposition(
        ResponseHeaderBag::DISPOSITION_ATTACHMENT,
        $filename
    );
    $response->headers->set('Content-type', mime_content_type($tempFilename));
    return $response;
[/if]
[if (featureAction.operation.resultType = OperationResultTypes::None)]

    return $this->renderPage([page.renderActualParameters(unit.contentType())/]);
[/if]
}
[/let]
[/let]
[/let]
[/template]

[template private actionParameters(page : Page, action : InlineAction, unit : DynamicUnit) post(trim())]
[if (not unit.oclIsKindOf(CollectionUnit))]
[page.actionMethodParameters(unit, unit.contentType(), true)/]
[else]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
	[if (collectionUnit.findElementSelection.oclIsUndefined())]
[page.actionMethodParameters(unit, unit.contentType(), true)/]
	[else]
[page.actionMethodParameters(collectionUnit, unit.contentType(), collectionUnit.findElementSelection)/]
	[/if]
[/let]
[/if]
[/template]

[template private loadElement(unit : DynamicUnit) post(trim())]
[let contentType : EntityOrView = unit.contentType()]
[if (not unit.oclIsKindOf(CollectionUnit))]
[unit.loadInstance(contentType, true)/]
[else]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
	[if (collectionUnit.findElementSelection.oclIsUndefined())]
[unit.loadInstance(contentType, true)/]
	[else]
[unit.getContentService()/]->[collectionUnit.findElementSelection.methodName/]([collectionUnit.routeParameters(contentType, collectionUnit.findElementSelection)/])
	[/if]
[/let]
[/if]
[/let]
[/template]