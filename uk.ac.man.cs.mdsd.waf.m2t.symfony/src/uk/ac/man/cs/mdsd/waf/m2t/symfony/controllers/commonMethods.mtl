[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::criteria::controller/]


[template public translate(message : String) post(trim())]
$this->get('translator')->trans('[message/]')
[/template]

[template public routeAnnotation(unit : ContentUnit) post(trim())]
[unit.routeAnnotation(false)/]
[/template]

[template public routeAnnotation(unit : ContentUnit, create : Boolean) post(trim())]
[if (unit.isHomeUnit() and unit.uriPath(true, create) <> '')]
* @Route("", name="Home")
[/if]
* @Route("[unit.uriPath(true, create)/]", name="[unit.routeName(create)/]"[if (unit.hasValidatedRouteParameters(create))]
, requirements={[for (key : Attribute | unit.uriPathValidatedKeys()) separator(', ')]"[key.routeParameterName(unit.oclAsType(DynamicUnit).entities->first())/]" = "[key.validationPattern/]"[/for]}[/if])
[/template]

[template public actionMethodParameters(unit : DynamicUnit) post(trim())]
[unit.actionMethodParameters(false)/]
[/template]

[template public actionMethodParameters(unit : DynamicUnit, parentPath : Boolean) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
[if (page.hasFilterParameters() or page.hasUpdateUnits())]Request $request[if (unit.hasFilteredRouteParameters(parentPath))]
, [/if][/if][unit.filteredRouteParameters(parentPath)/]
[/let]
[/template]

[template public inlineActionMethodParameters(unit : DynamicUnit, page : Page) post(trim())]
[if (page.hasFilterParameters() or page.hasUpdateUnits())]Request $request[if (unit.hasRouteParameters())]
, [/if][/if][unit.entities->first().routeParameters()/]
[/template]

[template public renderActualParameters(page : Page, unit : DynamicUnit) post(trim())]
[if (page.hasFilterParameters())]
$request[if (page.uriCommonPathKeys()->notEmpty())]
, [/if][/if][for (key : Attribute | page.uriCommonPathKeys()) separator(', ')]
$[key.routeParameterName(unit.entities->first())/][/for]
[/template]

[template public getService(unit : DynamicUnit) post(trim())]
$this->get('[unit.service().name/]')

[/template]

[template public findActualParameters(unit : DynamicUnit) post(trim())]
[for (key : Attribute | unit.uriPathKeys(false)) separator (', ')]
[let parameterName : String = key.routeParameterName(unit.entities->first())]
	[if (key.encodeUriKey)]
urldecode($[parameterName/])[else]
$[parameterName/][/if]
[/let]
[/for]
[/template]

[template public findFilteredActualParameters(unit : DynamicUnit) post(trim())]
[for (key : Attribute | unit.uriPathKeys(false)) separator (', ')]
[if (unit.nonRoutedPathKeys()->excludes(key))]
[let parameterName : String = key.routeParameterName(unit.entities->first())]
	[if (key.encodeUriKey)]
urldecode($[parameterName/])[else]
$[parameterName/][/if][/let][else]
[unit.keyActuals->any(a | a.key = key).actualExpression()/][/if][/for]
[/template]

[template private actualExpression(path : PathReferenceElement) post(trim())]
[path.actual.controllerExpression()/][if (not path.childReference.oclIsUndefined())]
[path.childReference.actualExpression()/]
[/if]
[/template]

[template public loadInstance(unit : DynamicUnit) post(trim())]
[unit.getService()/]->find([unit.findActualParameters()/])
[/template]

[template public loadFilteredInstance(unit : DynamicUnit) post(trim())]
[unit.getService()/]->find([unit.findFilteredActualParameters()/])
[/template]

[template public loadSelectedInstance(unit : DataUnit) post(trim())]
[if (unit.defaultSelection.oclIsUndefined())]
$this->[unit.instanceName()/] = [unit.loadFilteredInstance()/];
[else]
$this->[unit.instanceName()/] = [unit.getService()/]->[unit.defaultSelection.instanceName()/]();
[/if]
[/template]

[template public loadSelectedInstance(unit : EditUnit) post(trim())]
[if (unit.defaultSelection.oclIsUndefined())]
$[unit.instanceName()/] = [unit.loadFilteredInstance()/];
[else]
$[unit.instanceName()/] = [unit.getService()/]->[unit.defaultSelection.instanceName()/]();
[/if]
[/template]

[template public loadSelectedInstance(unit : ImageUnit) post(trim())]
[if (unit.defaultSelection.oclIsUndefined())]
$[unit.instanceName()/] = [unit.loadFilteredInstance()/];
[else]
$[unit.instanceName()/] = [unit.getService()/]->[unit.defaultSelection.instanceName()/]();
[/if]
[/template]

[template public createInstance(unit : DynamicUnit) post(trim())]
new [unit.modelName()/]()
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitAttribute))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(UnitAttribute).defaultValue.valueExpression()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancel(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->get('cancel')->isClicked())
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFeatures())]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
$this->[unit.instanceName()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]

[template public generateInterfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public generateClearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public generateRememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields())
	separator (', ')]'[field.formName()/]'[/for]));
[/template]


[template public generateRemoveParameter(eObject : EObject, parameterName : String) post(trim())]
unset($this->query_parameters['['/]'[parameterName/]'[']'/]);
[/template]


[template public templateParameters(page : Page) post(trim())]
$parameters['['/]'title'[']'/] = $this->get('translator')->trans('label.[page.id()/]', array(), '[page.translationDomain()/]');
[if (page.useInputJQuery())]
$parameters['['/]'styles'[']'/] = array(
    'https://code.jquery.com/ui/1.12.0/themes/cupertino/jquery-ui.css',
	[if (page.formUnits()->collect(u | u.displayFields)->select(f | f.isDate())->notEmpty())]
    'css/wickedpicker.css',
	[/if]
);
[/if]
[if (page.hasJavascript() or page.useInputJQuery())]
$parameters['['/]'scripts'[']'/] = array(
    array(
        'src'=>'https://code.jquery.com/jquery-1.12.4.min.js',
        'integrity' => 'sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=',
        'crossorigin' => 'anonymous',
    ),
	[if (page.useInputJQuery())]
    array(
        'src'=>'https://code.jquery.com/ui/1.12.0/jquery-ui.min.js',
        'integrity' => 'sha256-eGE6blurk5sHj+rmkfsGYeKyZx3M4bG+ZlFyA7Kns7E=',
        'crossorigin' => 'anonymous',
    ),
    '[page.partOf.autocompleteFilename()/]',
		[for (unit : DynamicUnit | page.formUnits()->select(u | u.entities->notEmpty()))]
    '[unit.entities->first().javascriptFilename()/]',
		[/for]
	[if (page.formUnits()->collect(u | u.displayFields)->select(f | f.isDate())->notEmpty())]
    'js/wickedpicker.js',
	[/if]
	[/if]
	[if (page.hasSliderUnits())]
    'js/jssor.slider.mini.js',
	[/if]
	[if (page.hasChangableCollections() or page.hasSliderUnits())]
    '[page.javascriptFilename()/]',
	[/if]
	[if (page.partOf.responsiveTopMenu)]
    'js/responsive-nav.min.js',
	[/if]
);
[/if]
[/template]