[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::expression::m2t::core::literals/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]


[template public translate(message : String) post(trim())]
$this->get('translator')->trans('[message/]')
[/template]


[template public notePage(unit : CollectionUnit) post(trim())]
[unit.pageVariable()/] = $request->query->getInt('[unit.paginationPageParameterName()/]', 1);
[/template]

[template public pageVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionalDisplay())]
$page
[else]
$this->page
[/if]
[/template]


[template public actionMethodParameters(page : Page) post(trim())]
[if (page.hasFilters() or page.hasPagination() or page.hasFormUnits())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if][page.routeParameters()/]
[/template]

[template public actionMethodParameters(page : Page, unit : DynamicUnit, entity : EntityOrView) post(trim())]
[page.actionMethodParameters(unit, entity, false)/]
[/template]

[template public actionMethodParameters(page : Page, unit : DynamicUnit, entity : EntityOrView, supportMethod : Boolean) post(trim())]
[if (entity.oclIsUndefined())]
	[if (page.hasFilters() or page.hasPagination() or unit.oclIsKindOf(EditUnit))]
Request $request
	[/if]
[else]
[if (page.hasFilters() or page.hasPagination() or unit.oclIsKindOf(EditUnit) or supportMethod and unit.hasUnitSupportActions())]
Request $request[if (entity.hasRouteParameters(unit))]
, [/if][/if][entity.routeParameters(unit)/]
[/if]
[/template]

[template public renderActualParameters(page : Page, entity : EntityOrView) post(trim())]
[if (entity.oclIsUndefined())]
	[if (page.hasFilters() or page.hasPagination())]
$request
	[/if]
[else]
[if (page.hasFilters() or page.hasPagination())]
$request[if (page.uriCommonPathKeys()->notEmpty())]
, [/if][/if][for (key : Attribute | page.uriCommonPathKeys()) separator(', ')]
$[key.routeParameterName(entity)/][/for]
[/if]
[/template]


[template public getContentService(unit : DynamicUnit) post(trim())]
$this->[unit.contentService().instanceServiceName()/]
[/template]

[template public getSelectionService(unit : CollectionUnit) post(trim())]
$this->[unit.selectionService().instanceServiceName()/]
[/template]

[template public loadInstance(entity : EntityOrView, unit : DynamicUnit) post(trim())]
[unit.getContentService()/]->find([entity.findActualParameters(unit)/])
[/template]

[template public findActualParameters(entity : EntityOrView, unit : DynamicUnit) post(trim())]
[for (key : Attribute | entity.uriPathKeys()) separator (', ')]
[let parameterName : String = key.routeParameterName(entity)]
	[if (unit.hasRouteActual(key))]
[unit.routeActual(key).value.controllerExpression('$'.concat(unit.instanceName()))/][elseif (key.encodeUriKey)]
urldecode($[parameterName/])[else]
$[parameterName/][/if]
[/let]
[/for]
[/template]

[template public loadSelectedInstance(unit : EditUnit) post(trim())]
$[unit.instanceName()/] = [unit.routingType().loadInstance(unit)/];
[/template]

[template public loadSelectedInstance(unit : ImageUnit) post(trim())]
$this->[unit.instanceName()/] = [unit.routingType().loadInstance(unit)/];
[/template]

[template public createInstance(unit : DynamicUnit) post(trim())]
new [unit.modelName()/]()
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitAttribute))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(UnitAttribute).defaultValue.valueExpression()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancelPost(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($request->request->has('cancel'))
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public handleCancelSubmit(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->get('cancel')->isClicked())
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFeatures())]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
$this->[unit.instanceName()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]

[template public generateInterfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public generateClearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public generateRememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields())
	separator (', ')]'[field.formName()/]'[/for]));
[/template]


[template public generateRemoveParameter(eObject : EObject, parameterName : String) post(trim())]
unset($this->query_parameters['['/]'[parameterName/]'[']'/]);
[/template]


[template public redirect(page : Page) post(trim())]
$this->redirectToRoute('[page.routeName()/]'[if (page.uriCommonPathKeys()->notEmpty())]
, array(
    [page.routeActualParameters(null)/]
)[/if])
[/template]

[template public redirect(unit : DynamicUnit, routingType : EntityOrView, routeName : String, valueBase : EntityOrView) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
$this->redirectToRoute('[routeName/]'[if (page.hasFilters() or page.hasPagination())]
, [if (routingType.oclIsUndefined())]
$request->query->all()[else]
array_merge(
    $request->query->all(),
    array(
        [routingType.routeActualParameters(valueBase, unit)/]
))[/if]
[else]
	[if (not routingType.oclIsUndefined())]
, array(
    [routingType.routeActualParameters(valueBase, unit)/]
)[/if]
[/if])
[/let]
[/template]

[template public routeActualParameters(base : EntityOrView, targetUnit : DynamicUnit) post(trim())]
[base.routeActualParameters(base, targetUnit)/]
[/template]

[template public routeActualParameters(routeBase : EntityOrView, valueBase : EntityOrView, targetUnit : DynamicUnit) post(trim())]
[for (key : Attribute | routeBase.uriPathKeys(targetUnit))]
'[key.routeParameterName(routeBase)/]' => $[key.routeParameterName(valueBase)/],
[/for]
[/template]

[template public routeActualParameters(page : Page, valueBase : EntityOrView) post(trim())]
[for (key : Attribute | page.uriCommonPathKeys())]
'[key.routeParameterName(page.dynamicUnits()->first().routingType())/]' => $[key.routeParameterName(valueBase)/],
[/for]
[/template]


[template public templateParameters(page : Page) post(trim())]
$parameters['['/]'title'[']'/] = $this->get('translator')->trans('label.[page.id()/]', array(), '[page.translationDomain()/]');
[if (page.hasGalleryUnits())]
[page.templateStyleParameters()/]
[/if]
[if (false and page.hasGalleryUnits())]
[page.templateScriptParameters()/]
[/if]
[/template]

[template private templateStyleParameters(page : Page) post(trim())]
$parameters['['/]'styles'[']'/] = array(
[if (page.hasGalleryUnits())]
    'css/blueimp-gallery.min.css',
[/if]
);
[/template]

[template public templateScriptParameters(page : Page) post(trim())]
$parameters['['/]'scripts'[']'/] = array(
[if (page.hasGalleryUnits())]
    'js/blueimp-gallery.min.js',
[/if]
);
[/template]