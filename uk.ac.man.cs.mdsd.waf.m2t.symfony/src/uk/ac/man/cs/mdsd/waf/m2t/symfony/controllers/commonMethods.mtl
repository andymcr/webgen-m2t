[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public routeAnnotation(unit : ContentUnit) post(trim())]
[unit.routeAnnotation(false)/]
[/template]

[template public routeAnnotation(unit : ContentUnit, create : Boolean) post(trim())]
@Route("[unit.uriPath(create)/]", name="[unit.routeName(create)/]")
[/template]

[template public routeParameters(unit : DynamicUnit) post(trim())]
[unit.routeParameters(false)/]
[/template]

[template public routeParameters(unit : DynamicUnit, formals : Boolean) post(trim())]
[for (key : ServiceFeatureReference | unit.service.keys) separator (', ')]
$[key.routeParameterName()/][if (formals and unit.oclIsTypeOf(CreateUpdateUnit))] = null[/if]
[/for]
[/template]

[template public getService(unit : DynamicUnit) post(trim())]
$this->get[unit.service.modelName()/]Service()

[/template]

[template public getServiceMethod(unit : DynamicUnit) post(trim())]
public function get[unit.service.modelName()/]Service()
{
    return $this->get('[unit.service.name/]');
}
[/template]

[template public loadInstance(unit : DynamicUnit) post(trim())]
$this->getService()->find([unit.routeParameters()/])
[/template]

[template public createInstance(unit : DynamicUnit) post(trim())]
new [unit.service.modelName()/]()
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitElement))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(IncludedAttribute).defaultValue.valueExpression()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancel(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->get('cancel')->isClicked())
	return $this->redirectToRoute('[cancelDestination.routeName()/]');
[/let]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFeatures())]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
$this->[unit.instanceName()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]

[template public catchSelectionException(unit : DynamicUnit)]
catch (QueryException $qe)
{
    $this->[unit.service.errorName()/] = $se->message();
[if (unit.hasEncryptedFeatures() or unit.hasInterfaceFields())]
[unit.exceptionCleanup()/]
[/if]
}
[/template]

[template public generateCatchCaptchaException(unit : DynamicUnit) post(trim())]
catch (Captcha_Exception $e)
{
	$this->[unit.instanceName()/]_field_errors = ['['/][']'/];
[for (field : UnitField | unit.captchaFields())]
	$this->[unit.instanceName()/]_field_errors['['/]'[field.modelPropertyName()/]'[']'/] = $e->message();
[/for]
[if (unit.hasEncryptedFeatures())]
	[unit.generateClearEncryptedFeatures()/]
[/if]
[if (unit.hasInterfaceFields())]
	[unit.generateRememberInterfaceFields()/]
[/if]
}
[/template]

[template public generateInterfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public generateClearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public generateRememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields())
	separator (', ')]'[field.formName()/]'[/for]));
[/template]


[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
public function action_[deleteAction.actionName()/]()
{
	$[deleteAction.instanceName()/] = ORM::factory('[deleteAction.modelName()/]', $this->request->param('param'));
	if ($[deleteAction.instanceName()/]->loaded())
	{
		$[deleteAction.instanceName()/]->delete();
[if (deleteAction.destination.oclIsUndefined())]
		[comment deleteAction.generateRemoveParameter(action.routeParameterName())/]
[else]
		$this->redirect(Route::get('[deleteAction.destination.controllerName()/]')->uri());
[/if]
	}
	else
		[errorVariable/] = 'Invalid [deleteAction.modelName()/] identifier';
}
[/let]
[/template]

[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let supportAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
public function action_[action.actionName()/]()
{
	$[supportAction.instanceName()/] = ORM::factory('[supportAction.modelName()/]', $this->request->param('param'));
	if (!$[supportAction.instanceName()/]->loaded())
		[errorVariable/] = 'Invalid [supportAction.modelName()/] identifier';
	else
	{
		/* [protected ('support.'.concat(supportAction.actionName()))]
		 */
		/* [/protected]
		 */
	}
}
[/let]
[/template]


[template public generateRemoveParameter(eObject : EObject, parameterName : String) post(trim())]
unset($this->query_parameters['['/]'[parameterName/]'[']'/]);
[/template]


[template public actionMethod(action : InlineAction)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.immediateUnit()]
/**
 * @Route("[deleteAction.uriPath()/]", name="[deleteAction.routeName()/]")
 */
public function action_[deleteAction.actionName()/]()
{
//    try
    {
        $[deleteAction.instanceName()/] = [unit.loadInstance()/];
		$[deleteAction.instanceName()/]->remove();
[if (not deleteAction.destination.oclIsUndefined())]
        $this->redirect(Route::get('[comment deleteAction.destination.routeName()/]')->uri());
[/if]
    }
    [comment actionUnit.containingUnit().catchSelectionException()/]
}
[/let]
[/let]
[/template]

[template public actionMethod(action : InlineAction)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let unit : DynamicUnit = action.immediateUnit().containingUnit()]
/**
 * @Route("[unit.supportUriPath()/]", name="[unit.routeName()/]")
 */
public function action_[action.actionName()/]()
{
//    try
    {
        $[action.instanceName()/] = [unit.loadInstance()/];
        // [protected ('support.'.concat(action.actionName()))]
        // [/protected]
    }
    [comment unit.catchSelectionException()/]
}
[/let]
[/template]

