[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::expression::m2t::core::literals/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]


[template public translate(message : String) post(trim())]
$this->get('translator')->trans('[message/]')
[/template]


[template public notePage(unit : CollectionUnit) post(trim())]
[unit.pageVariable()/] = $request->query->getInt('[unit.paginationPageParameterName()/]', 1);
[if (unit.maximumPaginationSize > 0)]
[unit.pageSizeVariable()/] = min([unit.maximumPaginationSize/], $request->query->getInt('[unit.paginationSizeParameterName()/]', [unit.defaultPaginationSize/]));
[/if]
[/template]

[template public pageVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionalDisplay())]
$page
[else]
$this->page
[/if]
[/template]

[template public pageSizeVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionalDisplay())]
$pageSize
[else]
$this->pageSize
[/if]
[/template]


[template public actionMethodParameters(page : Page) post(trim())]
[if (page.hasFilters() or page.hasPagination() or page.hasFormUnits())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if][page.routeParameters()/]
[/template]

[template public actionMethodParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasSelectCondition())]
[unit.actionMethodParameters(unit.contentType(), unit.selection)/]
[else]
[unit.oclAsType(ContentUnit).actionMethodParameters(unit.collectionType())/]
[/if]
[/template]

[template public actionMethodParameters(unit : CollectionUnit, routingType : EntityOrView, selection : Selection) post(trim())]
[let page : Page = unit.oclAsType(DynamicUnit).pageDisplayedOn()]
[if (page.hasFilters() or page.hasPagination() or unit.oclIsKindOf(EditUnit))]
Request $request[if (unit.hasRouteParameters(routingType, selection))]
, [/if][/if][unit.routeParameters(routingType, selection)/]
[/let]
[/template]

[template public actionMethodParameters(unit : ContentUnit) post(trim())]
[if (unit.oclIsKindOf(CollectionUnit))]
[unit.oclAsType(CollectionUnit).actionMethodParameters()/]
[else]
[unit.actionMethodParameters(unit.routingType())/]
[/if]
[/template]

[template public actionMethodParameters(unit : ContentUnit, routingType : EntityOrView) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
[if (page.hasFilters() or page.hasPagination() or unit.oclIsKindOf(EditUnit))]
Request $request[if (unit.hasRouteParameters(routingType))]
, [/if][/if][unit.routeParameters(routingType)/]
[/let]
[/template]

[template public actionMethodParameters(routingType : EntityOrView, page : Page) post(trim())]
[if (page.hasFilters() or page.hasPagination())]
Request $request[if (routingType.hasRouteParameters())]
, [/if][/if][routingType.routeParameters(routingType)/]
[/template]

[template public actionMethodParameters(action : InlineAction, unit : CollectionUnit, page : Page) post(trim())]
[if (unit.findElementSelection.oclIsUndefined())]
[unit.contentType().actionMethodParameters(page)/]
[else]
[unit.actionMethodParameters(unit.contentType(), unit.findElementSelection)/]
[/if]
[/template]


[template public renderActualParameters(page : Page, routingType : EntityOrView) post(trim())]
[page.renderActualParameters(routingType, routingType)/]
[/template]

[template public renderActualParameters(page : Page, routingType : EntityOrView, valueBase : EntityOrView) post(trim())]
[if (page.hasFilters() or page.hasPagination())]
$request[if (page.hasRouteParameters())]
, [/if][/if][for (key : Attribute | page.uriCommonPathKeys()) separator (', ')]
$[key.routeParameterName(valueBase)/][/for]

[/template]


[template public getContentService(unit : DynamicUnit) post(trim())]
$this->[unit.contentService().instanceServiceName()/]
[/template]

[template public loadInstance(unit : DynamicUnit) post(trim())]
[unit.getContentService()/]->find([unit.findActualParameters()/])
[/template]

[template public loadInstance(action : InlineAction, unit : CollectionUnit) post(trim())]
[if (unit.findElementSelection.oclIsUndefined())]
[unit.oclAsType(DynamicUnit).getContentService()/]->find([unit.contentType().findActualParameters(unit.oclAsType(ContentUnit))/])
[else]
$this->[unit.findElementSelection.partOf.instanceServiceName()/]->[unit.findElementSelection.methodName/]([unit.findActualParameters(unit.contentType(), unit.findElementSelection)/])
[/if]
[/template]

[template private findActualParameters(page : Page) post(trim())]
[for (key : Attribute | page.uriCommonPathKeys()) separator (', ')]
[comment key.findActualParameter(, routingType)/][/for]
[/template]

[template private findActualParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasSelectCondition())]
[unit.findActualParameters(unit.contentType(), unit.selection)/]
[else]
[unit.oclAsType(ContentUnit).findActualParameters(unit.collectionType())/]
[/if]
[/template]

[template private findActualParameters(unit : CollectionUnit, routingType : EntityOrView, selection : Selection) post(trim())]
[for (key : Attribute | unit.uriPathKeys(routingType, selection)) separator (', ')]
[key.findActualParameter(unit.oclAsType(ContentUnit), routingType)/][/for]
[/template]

[template private findActualParameters(unit : ContentUnit) post(trim())]
[if (unit.oclIsKindOf(CollectionUnit))]
[unit.oclAsType(CollectionUnit).findActualParameters()/]
[else]
[unit.findActualParameters(unit.routingType())/]
[/if]
[/template]

[template private findActualParameters(unit : ContentUnit, routingType : EntityOrView) post(trim())]
[for (key : Attribute | unit.uriPathKeys(routingType)) separator (', ')]
[key.findActualParameter(unit, routingType)/][/for]
[/template]

[template private findActualParameters(action : InlineAction, unit : CollectionUnit, page : Page) post(trim())]
[if (unit.findElementSelection.oclIsUndefined())]
[unit.contentType().findActualParameters(page)/]
[else]
[unit.findActualParameters(unit.contentType(), unit.findElementSelection)/]
[/if]
[/template]

[template private findActualParameters(routingType : EntityOrView, unit : ContentUnit) post(trim())]
[for (key : Attribute | routingType.uriPathKeys()) separator (', ')]
[key.findActualParameter(unit, routingType)/][/for]
[/template]

[template private findActualParameter(key : Attribute, unit : ContentUnit, routingType : EntityOrView) post(trim())]
[let parameterName : String = key.routeParameterName(routingType)]
	[if (unit.hasRouteActual(key))]
[unit.routeActual(key).value.controllerExpression('$'.concat(unit.instanceName()))/][elseif (key.encodeUriKey)]
urldecode($[parameterName/])[else]
$[parameterName/][/if]
[/let]
[/template]

[template public createInstance(unit : DynamicUnit) post(trim())]
new [unit.modelName()/]()
[/template]


[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitAttribute))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(UnitAttribute).defaultValue.valueExpression()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.valueExpression()/];
[/if]
[/for]
[/template]

[template public handleCancelPost(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($request->request->has('cancel'))
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public handleCancelSubmit(unit : DynamicUnit) post(trim())]
[let cancelDestination : Page = 
	if unit.oclIsKindOf(ControlUnit) then
		unit.oclAsType(ControlUnit).cancelDestination
	else
		unit.oclAsType(EditUnit).cancelDestination
	endif]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->get('cancel')->isClicked())
	return $this->redirectToRoute('[comment cancelDestination routeName()/]');
[/let]
[/template]

[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFeatures())]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
$this->[unit.instanceName()/]->[feature.formName()/] = [value.valueExpression()/];
[/let]
[/for]
[/template]

[template public generateInterfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public generateClearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public generateRememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields())
	separator (', ')]'[field.formName()/]'[/for]));
[/template]


[template public generateRemoveParameter(eObject : EObject, parameterName : String) post(trim())]
unset($this->query_parameters['['/]'[parameterName/]'[']'/]);
[/template]


[template public redirect(page : Page) post(trim())]
$this->redirectToRoute('[page.routeName()/]'[if (page.uriCommonPathKeys()->notEmpty())]
, array(
    [page.routeActualParameters(null)/]
)[/if])
[/template]

[template public redirect(unit : DynamicUnit, routingType : EntityOrView, routeName : String, valueBase : EntityOrView) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
$this->redirectToRoute('[routeName/]'[if (page.hasFilters() or page.hasPagination())]
, [if (routingType.oclIsUndefined())]
$request->query->all()[else]
array_merge(
    $request->query->all(),
    array(
        [unit.routeActualParameters(routingType, valueBase)/]
))[/if]
[else]
	[if (not routingType.oclIsUndefined())]
, array(
    [unit.routeActualParameters(routingType, valueBase)/]
)[/if]
[/if])
[/let]
[/template]

[template private routeActualParameters(page : Page, valueBase : EntityOrView) post(trim())]
[for (key : Attribute | page.uriCommonPathKeys())]
'[key.routeParameterName(page.dynamicUnits()->first().routingType())/]' => $[key.routeParameterName(valueBase)/],
[/for]
[/template]

[template private routeActualParameters(targetUnit : CollectionUnit, valueBase : EntityOrView) post(trim())]
[if (targetUnit.hasSelectCondition())]
[targetUnit.routeActualParameters(targetUnit.contentType(), targetUnit.selection, valueBase)/]
[else]
[targetUnit.oclAsType(ContentUnit).routeActualParameters(targetUnit.collectionType(), valueBase)/]
[/if]
[/template]

[template private routeActualParameters(targetUnit : CollectionUnit, routingType : EntityOrView, selection : Selection, valueBase : EntityOrView) post(trim())]
[for (key : Attribute | targetUnit.uriPathKeys(routingType, selection)) separator (', ')]
[key.findActualParameter(targetUnit.oclAsType(ContentUnit), routingType)/]
[/for]
[/template]

[template public routeActualParameters(targetUnit : ContentUnit, valueBase : EntityOrView) post(trim())]
[if (targetUnit.oclIsKindOf(CollectionUnit))]
[targetUnit.oclAsType(CollectionUnit).routeActualParameters(valueBase)/]
[else]
[targetUnit.routeActualParameters(targetUnit.routingType(), valueBase)/]
[/if]
[/template]

[template public routeActualParameters(targetUnit : ContentUnit, routingType : EntityOrView, valueBase : EntityOrView) post(trim())]
[for (key : Attribute | targetUnit.uriPathKeys(routingType))]
'[key.routeParameterName(routingType)/]' => $[key.routeParameterName(valueBase)/],
[/for]
[/template]


[template public templateParameters(page : Page) post(trim())]
$parameters['['/]'title'[']'/] = $this->get('translator')->trans('label.[page.id()/]', array(), '[page.translationDomain()/]');
[if (page.hasGalleryUnits())]
[page.templateStyleParameters()/]
[/if]
[if (false and page.hasGalleryUnits())]
[page.templateScriptParameters()/]
[/if]
[/template]

[template private templateStyleParameters(page : Page) post(trim())]
$parameters['['/]'styles'[']'/] = array(
[if (page.hasGalleryUnits())]
    'css/blueimp-gallery.min.css',
[/if]
);
[/template]

[template public templateScriptParameters(page : Page) post(trim())]
$parameters['['/]'scripts'[']'/] = array(
[if (page.hasGalleryUnits())]
    'js/blueimp-gallery.min.js',
[/if]
);
[/template]