[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::display/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionAddMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionEditMethod()/]

[/if]
[if (editUnit.hasInterfaceFields())]
[editUnit.generateUnitRules()/]
[/if]
[/let]
[/template]

[template private actionAddMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 * [unit.routeAnnotation(true)/]
 */
public function [unit.actionName()/]([unit.actionMethodParameters(page)/])
{
    $[unit.instanceName()/] = [unit.createInstance()/];
[if (unit.hasDefaultValueFields())]
    [unit.unitDefaultValues()/]
[/if]
    $this->[unit.instanceName()/] = [unit.createForm(true)/];
    $this->[unit.instanceName()/]->handleRequest($request);
[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]
[/if]
    if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid())
    {
[if (unit.hasForcedValueFeatures())]
	    [comment unit.forcedFeatureValues()/]
[/if]
        [unit.getService()/]->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
	    return $this->redirectToRoute('[unit.confirmDestination.controllerName()/]');
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
        $[unit.instanceName()/] = [unit.createInstance()/];
		[if (unit.hasDefaultValueFields())]
        [unit.unitDefaultValues()/]
		[/if]
		[if (unit.hasInterfaceFields())]
	    [comment unit.generateClearInterfaceFields()/]
		[/if]
        $this->[unit.instanceName()/]->setData($[unit.instanceName()/]);
	[else]
	[/if]
[/if]
    }

    return $this->renderPage([page.renderMethodParameters()/]);
}
[/let]
[/template]

[template private actionEditMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 * [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]X([unit.actionMethodParameters(page)/])
{
    try
    {
        $[unit.instanceName()/] = [unit.loadInstance()/];
[if (unit.hasDefaultValueFields())]
        [unit.unitDefaultValues()/]
[/if]
        $this->[unit.instanceName()/] = [unit.createForm(false)/];
        $this->[unit.instanceName()/]->handleRequest($request);
[if (not unit.cancelDestination.oclIsUndefined())]
        [unit.handleCancel()/]
[/if]
        if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid())
        {
[if (unit.hasForcedValueFeatures())]
	        [comment unit.forcedFeatureValues()/]
[/if]
            $this->getService()->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
	        return $this->redirectToRoute('[unit.confirmDestination.controllerName()/]');
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
            $[unit.instanceName()/] = [unit.createInstance()/];
		[if (unit.hasDefaultValueFields())]
            [unit.unitDefaultValues()/]
		[/if]
		[if (unit.hasInterfaceFields())]
	        [comment unit.generateClearInterfaceFields()/]
		[/if]
	[/if]
[/if]
        }

        return $this->renderPage([page.renderMethodParameters()/]);
    }
    [unit.catchSelectionException()/]

}
[/let]
[/template]

[template public generateUnitRules(unit : DynamicUnit) post(trim())]
	private function unit_rules
	{
[for (field : InterfaceField | unit.interfaceFields())]
$this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
		'label' => '[field.displayLabel()/]',
		'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
	);
[/for]
	}
[/template]

[template public generateClearInterfaceFields(unit : DynamicUnit) post(trim())]
[for (field : InterfaceField | unit.interfaceFields())]
unset($this->[unit.instanceName()/]->[field.modelPropertyName()/]);
[/for]
[/template]


[template public createForm(unit : EditUnit, create : Boolean) post(trim())]
$this->createForm([service.typeClassName()/]::class, $[unit.instanceName()/], array(
    'action' => $this->generateUrl('[unit.routeName(create)/]', array(
[if (create)]
	[if (not service.parentService().oclIsUndefined())]
        [unit.service.parentService().routeParameters('$'.concat(unit.instanceName()))/]
	[/if]
[else]
        [unit.service.routeParameters('$'.concat(unit.instanceName()))/]
[/if]
    )),
))
[/template]

[template private routeParameters(service : Service, accessor : String) post(trim())]
[if (not service.parentService().oclIsUndefined())]
[service.parentService().routeParameters(accessor)/]
[/if]
[for (key : ServiceFeatureReference | service.keys)]
'[key.routeParameterName()/]' => $[key.routeParameterName()/],
[/for]
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
if (!isset($this->[editUnit.instanceName()/]))
{
    $[editUnit.instanceName()/] = [editUnit.createInstance()/];
    $this->[editUnit.instanceName()/] = [editUnit.createForm(true)/];
}
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]

