[comment encoding = UTF-8 /]
[module editMethods(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::display/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionAddMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionEditMethod()/]

[/if]
[if (editUnit.hasUnitSupportActions())]
[editUnit.updateFormMethod(false)/]

[/if]
[/let]
[/template]

[template private actionAddMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
[let routingType : EntityOrView = unit.routingType()]
/**
[if (unit.oclIsTypeOf(CreateUpdateUnit))]
 [unit.routeAnnotation(unit.oclAsType(CreateUpdateUnit).createUriElement, true)/]
[else]
 [unit.routeAnnotation(unit.uriElement, true)/]
[/if]
[if (unit.requiresRole <> '')]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]X([page.actionMethodParameters(unit, routingType.keyEntity().container())/])
{
    [unit.actionAddCore()/]

    return $this->renderPage([page.renderActualParameters(routingType.container())/]);
}
[/let]
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(CreateUnit)) post(trim())]
[let createUnit : CreateUnit = unit.oclAsType(CreateUnit)]
[createUnit.actionAddCore()/]
[/let]
[/template]

[template private actionAddCore(unit : EditUnit) post(trim())]
$[unit.instanceName()/] = [unit.createInstance()/];
$this->[unit.instanceName()/] = [unit.createForm(unit.instanceName(), true, true, false)/];
[if (unit.hasUnitSupportActions())]

if ($request->isMethod('POST')) {
    $formValues = $request->request->get($this->[unit.instanceName()/]->getName());
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancelPost()/]

	[/if]
	[for (action : UnitSupportAction | unit.unitSupportActions())]
    [if (i > 1)]} else [/if]if ($request->request->has('[action.name.toLowerFirst()/]')) {
        // [protected ('Support action '.concat(action.name))]
        // [/protected]

	[/for]
    } else {
	[if (unit.hasCustomisedBody())]
        [unit.customValuesBody('add')/]
	[else]
        $this->[unit.instanceName()/]->handleRequest($request);
        if ($this->[unit.instanceName()/]->isValid()) {
            [unit.saveBody(unit.contentType.parentEntity())/]
        }
	[/if]
    }
}
[else]
	[if (unit.customiseValues or unit.hasForcedValueFeatures() or (unit.isContained() and not unit.displayedAssociations()->includes(unit.containingAssociation())))]
if ($request->isMethod('POST')) {
		[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancelPost()/]
		[/if]
    [unit.customValuesBody('add')/]
}
    [else]
$this->[unit.instanceName()/]->handleRequest($request);
		[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
		[/if]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
    [unit.saveBody(unit.contentType.parentEntity())/]
}
	[/if]
[/if]
[/template]

[query private updateSuffix(unit : EditUnit) : String
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			unit.oclAsType(CreateUpdateUnit).uriElement
		else
			''
		endif
/]

[template private actionEditMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 [unit.routeAnnotation()/]
[if (unit.requiresRole <> '')]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]([page.actionMethodParameters(unit, unit.routingType())/])
{
    [unit.actionEditCore()/]

    return $this->renderPage([page.renderActualParameters(unit.routingType())/]);
}
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(UpdateUnit)) post(trim())]
[let updateUnit : UpdateUnit = unit.oclAsType(UpdateUnit)]
[updateUnit.actionEditCore()/]
[/let]
[/template]

[template private actionEditCore(unit : EditUnit) post(trim())]
[unit.loadSelectedInstance()/]
if (!$[unit.instanceName()/]) {
    throw $this->createNotFoundException('The [unit.routingType().name/] does not exist');
}
[for (field : UnitField | unit.inputFields()->select(f | f.isContains()))]
[let association : Association = field.feature().oclAsType(Association)]
$original[field.instanceName().toUpperFirst()/] = new ArrayCollection();
foreach ($[unit.instanceName()/]->[field.feature().getMethodName()/]() as $[association.targetType().instanceName()/])
    $original[field.instanceName().toUpperFirst()/]->add($[association.targetType().instanceName()/]);
[/let]
[/for]
$this->[unit.instanceName()/] = [unit.createForm(unit.instanceName(), false, false, false)/];
[if (unit.customiseValues or unit.hasForcedValueFeatures() or unit.hasDisabledFeatures())]
if ($request->isMethod('POST')) {
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancelPost()/]
	[/if]
    [unit.customValuesBody('edit')/]
}
[else]
$this->[unit.instanceName()/]->handleRequest($request);
	[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
	[/if]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
	[for (field : UnitField | unit.inputFields()->select(f | f.isContains()))]
	[let association : Association = field.feature().oclAsType(Association)]
    foreach ($original[field.instanceName().toUpperFirst()/] as $[association.targetType().instanceName()/])
        if (false === $[unit.instanceName()/]->[field.feature().getMethodName()/]()->contains($[association.targetType().instanceName()/]))
            $this->[association.targetType().services(unit.pageDisplayedOn().partOf)->first().instanceServiceName()/]->remove($[association.targetType().instanceName()/]);
	[/let]
	[/for]
    [unit.saveBody(unit.contentType)/]
}
[/if]
[/template]

[template private customValuesBody(unit : EditUnit, customTag : String) post(trim())]
[if (unit.customiseValues)]
// [protected ('customise.values.'.concat(unit.instanceName()).concat('.').concat(customTag))]
// [/protected]
[/if]
[if (unit.hasForcedValueFeatures())]
// forced values [comment unit.forcedFeatureValues()/]
[/if]
[if (unit.isContained() and customTag = 'add')]
[unit.setContainer()/]
[/if]
$this->[unit.instanceName()/]->submit($request->request->get($this->[unit.instanceName()/]->getName()), false);
foreach ($this->get('validator')->validate($[unit.instanceName()/]) as $violation) {
    $path = $violation->getPropertyPath();
   	$this->[unit.instanceName()/]->get($path)->addError(new FormError($violation->getMessage()));
}
if ($this->[unit.instanceName()/]->isValid()) {
    [unit.saveBody(unit.contentType.parentEntity())/]
}
[/template]

[template public createForm(unit : EditUnit, entityInstance : String, createFunction : Boolean, parentPath : Boolean, placeholder : Boolean) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
[let entity : EntityOrView = unit.contentType]
[let pathKeys : Sequence(Attribute)
	= if parentPath then
			if entity.parentEntity().oclIsUndefined() then
				Sequence{}
			else
				entity.parentEntity().uriPathKeys()
			endif
		else
			entity.uriPathKeys()
		endif]
$this->createForm([unit.typeClassName(unit.pageDisplayedOn().partOf)/]::class, $[entityInstance/][if (not placeholder)], array(
    'action' => $this->generateUrl('[unit.routeName(createFunction)/]'[if (page.hasFilters() or page.hasPagination())], [if (pathKeys->isEmpty())]
$request->query->all()[else]
array_merge(
        $request->query->all(),
        array(
		[if (parentPath)]
			[if (not unit.contentType.parentEntity().oclIsUndefined())]
            [unit.contentType.parentEntity().routeActualParameters(unit)/]
			[/if]
		[else]
            [entity.routeActualParameters(unit)/]
		[/if]
    ))[/if]
[else]
	[if (pathKeys->notEmpty())]
, array(
		[if (parentPath)]
			[if (not unit.contentType.parentEntity().oclIsUndefined())]
        [unit.contentType.parentEntity().routeActualParameters(unit)/]
			[/if]
		[else]
        [entity.routeActualParameters(unit)/]
		[/if]
    )[/if]
[/if]),
)[/if])
[/let]
[/let]
[/let]
[/template]

[template public setContainer(unit : EditUnit) post(trim())]
[let entityOrView : EntityOrView = unit.contentType]
[let modelPropertyName : String = entityOrView.containingAssociation().modelPropertyName().toUpperFirst()]
[let parentService : Service = entityOrView.container().services(unit.pageDisplayedOn().partOf)->first()]
$[unit.instanceName()/]->set[modelPropertyName/]($this->[parentService.instanceServiceName()/]->find([entityOrView.container().routeParameters()/]));
[/let]
[/let]
[/let]
[/template]

[template private saveBody(unit : EditUnit, valueBase : EntityOrView) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
[unit.getContentService()/]->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
return [unit.confirmDestination.redirect()/];
[else]
	[if (not unit.onSaveContinueEditing)]
		[if (unit.contentType.parentEntity().oclIsUndefined())]
return [unit.redirect(null, unit.routeName(true), valueBase)/];
		[else]
return [unit.redirect(unit.contentType.parentEntity(), unit.routeName(true), valueBase)/];
		[/if]
	[/if]
[/if]
[/let]
[/template]

[template public actionSupportMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (editUnit.hasUnitSupportActions())]
[editUnit.updateFormMethod(false)/]

[/if]
[/let]
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (editUnit.pageDisplayedOn().units->size() > 1 or editUnit.oclIsTypeOf(CreateUpdateUnit))]
if (!isset($this->[editUnit.instanceName()/])) {
    $[editUnit.instanceName()/] = [editUnit.createInstance()/];
    $this->[editUnit.instanceName()/] = [editUnit.createForm(unit.instanceName(), true, not unit.oclIsTypeOf(UpdateUnit), unit.oclIsTypeOf(UpdateUnit))/];
}
[/if]
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]

[template private updateFormMethod(unit : EditUnit, createFunction : Boolean) post(trim())]
[let contentType : EntityOrView = unit.contentType]
private function updateForm($[contentType.instanceName()/], $values, $validate = true)
{
    $form = [unit.createForm(contentType.instanceName(), createFunction, true, false)/];
    $form->submit($values, false);
    if ($validate) {
        foreach ($this->get('validator')->validate($[contentType.instanceName()/]) as $violation) {
            $path = $violation->getPropertyPath();
            $form->get($path)->addError(new FormError($violation->getMessage()));
        }
    }

    return $form;
}
[/let]
[/template]
