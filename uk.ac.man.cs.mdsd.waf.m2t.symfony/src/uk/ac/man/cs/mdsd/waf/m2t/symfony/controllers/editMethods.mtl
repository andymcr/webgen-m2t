[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::display/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionAddMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionEditMethod()/]

[/if]
[/let]
[/template]

[template private actionAddMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 [unit.routeAnnotation(true)/]
 */
public function [unit.actionName()/]X([unit.actionMethodParameters(true)/])
{
    $[unit.instanceName()/] = [unit.createInstance()/];
    $this->[unit.instanceName()/] = [unit.createForm(true, false)/];
[if (unit.customiseValues or unit.hasForcedValueFeatures() or (unit.isContained() and not unit.displayedAssociations()->includes(unit.containingAssociation())))]
    if ($request->isMethod('POST')) {
        $this->[unit.instanceName()/]->submit($request->request->get($this->[unit.instanceName()/]->getName()), false);
	[if (not unit.cancelDestination.oclIsUndefined())]
        [unit.handleCancel()/]
	[/if]
	[if (unit.customiseValues)]
        // [protected ('customise.values.'.concat(unit.instanceName()).concat('.add'))]
        // [/protected]
	[/if]
	[if (unit.hasForcedValueFeatures())]
        // forced values [comment unit.forcedFeatureValues()/]
	[/if]
	[if (unit.isContained())]
        [unit.setContainer()/]
	[/if]
        $errors = $this->get('validator')->validate($[unit.instanceName()/]);
        if (count($errors) == 0) {
            [unit.saveBody(true)/]
        }
    }
[else]
    $this->[unit.instanceName()/]->handleRequest($request);
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]
	[/if]
    if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
        [unit.saveBody(true)/]
    }
[/if]

    return $this->renderPage([unit.pageDisplayedOn().renderActualParameters(unit, true)/]);
}
[/let]
[/template]

[template private actionEditMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]([unit.actionMethodParameters()/])
{
    [unit.loadSelectedInstance()/]
    $this->[unit.instanceName()/] = [unit.createForm(false, false)/];
[if (unit.customiseValues or unit.hasForcedValueFeatures())]
    if ($request->isMethod('POST')) {
        $this->[unit.instanceName()/]->submit($request->request->get($this->[unit.instanceName()/]->getName()), false);
	[if (not unit.cancelDestination.oclIsUndefined())]
        [unit.handleCancel()/]
	[/if]
	[if (unit.customiseValues)]
        // [protected ('customise.values.'.concat(unit.instanceName()).concat('.edit'))]
        // [/protected]
	[/if]
	[if (unit.hasForcedValueFeatures())]
         // forced values [comment unit.forcedFeatureValues()/]
	[/if]
        $errors = $this->get('validator')->validate($[unit.instanceName()/]);
        if (count($errors) == 0) {
            [unit.saveBody(false)/]
        }
    }
[else]
    $this->[unit.instanceName()/]->handleRequest($request);
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]
	[/if]
    if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
        [unit.saveBody(false)/]
    }
[/if]

[if (not unit.oclIsTypeOf(UpdateUnit) or page.units->size() > 1)]
    return $this->renderPage([page.renderActualParameters(unit)/]);
[else]
    $parameters = array();
    $parameters['['/]'title'[']'/] = '[page.displayLabel/]';
    [unit.templateParameters()/]
    return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/if]
}
[/let]
[/template]

[template public createForm(unit : EditUnit, create : Boolean, placeholder : Boolean) post(trim())]
[let entityOrView : EntityOrView = unit.entities->first()]
$this->createForm([entityOrView.typeClassName()/]::class, $[unit.instanceName()/][if (not placeholder)], array(
    'action' => $this->generateUrl('[unit.routeName(create)/]', array(
[if (create)]
	[if (entityOrView.keyEntity().isContained())]
        [entityOrView.keyEntity().container().routeActualParameters(unit, entityOrView.keyEntity().container())/]
	[/if]
[else]
        [entityOrView.routeActualParameters(unit, entityOrView)/]
[/if]
    )),
)[/if])
[/let]
[/template]

[template public setContainer(unit : EditUnit) post(trim())]
[let entityOrView : EntityOrView = unit.entities->first()]
[let modelPropertyName : String = entityOrView.containingAssociation().modelPropertyName().toUpperFirst()]
[let parentService : Service = entityOrView.container().services(unit.pageDisplayedOn().partOf)->first()]
            $[unit.instanceName()/]->set[modelPropertyName/]($this->get('[parentService.name/]')->find([entityOrView.routeParameters(true)/]));
[/let]
[/let]
[/let]
[/template]

[template private saveBody(unit : EditUnit, create : Boolean) post(trim())]
[unit.getService()/]->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
return $this->redirectToRoute('[unit.confirmDestination.routeName()/]');
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
	[let keyEntity : EntityOrView = unit.entities->first().keyEntity()]
return $this->redirectToRoute('[unit.routeName(true)/]'[if (keyEntity.isContained())]
[let container : EntityOrView = keyEntity.container()], array(
    [container.routeActualParameters(unit, keyEntity.container(), if create then container else unit.entities->first() endif)/]
)[/let][/if]);
	[/let]
	[/if]
[/if]
[/template]

[template private routeActualParameters(entityOrView : EntityOrView, unit : DynamicUnit, base : EntityOrView) post(trim())]
[entityOrView.routeActualParameters(unit, base, base)/]
[/template]

[template private routeActualParameters(entityOrView : EntityOrView, unit : DynamicUnit, routeBase : EntityOrView, valueBase : EntityOrView) post(trim())]
[for (key : Attribute | entityOrView.filteredUriPathKeys(unit))]
'[key.routeParameterName(routeBase)/]' => $[key.routeParameterName(valueBase)/],
[/for]
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.enableWhen.oclIsUndefined())]
[editUnit.enableWhen.controllerVariable()/]
$parameters['['/]'[editUnit.instanceName()/]_enabled'[']'/] = [editUnit.enableWhen.controllerExpression()/];
[/if]
if (!isset($this->[editUnit.instanceName()/]))
{
    $[editUnit.instanceName()/] = [editUnit.createInstance()/];
    $this->[editUnit.instanceName()/] = [editUnit.createForm(not unit.oclIsTypeOf(UpdateUnit), unit.oclIsTypeOf(UpdateUnit))/];
}
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]

