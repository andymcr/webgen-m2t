[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::views::display/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionAddMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionEditMethod()/]

[/if]
[/let]
[/template]

[template private actionAddMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 * [unit.routeAnnotation(true)/]
 */
public function [unit.actionName()/]([unit.actionMethodParameters(page)/])
{
    $[unit.instanceName()/] = [unit.createInstance()/];
    [unit.saveBody(true)/]
}
[/let]
[/template]

[template private actionEditMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.pageDisplayedOn()]
/**
 * [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]X([unit.actionMethodParameters(page)/])
{
    try
    {
        $[unit.instanceName()/] = [unit.loadInstance()/];
        [unit.saveBody(false)/]
    }
    [unit.catchSelectionException()/]
}
[/let]
[/template]

[template private saveBody(unit : EditUnit, create : Boolean) post(trim())]
$this->[unit.instanceName()/] = [unit.createForm(create)/];
$this->[unit.instanceName()/]->handleRequest($request);
[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancel()/]
[/if]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid())
{
[if (unit.hasForcedValueFeatures())]
 [comment unit.forcedFeatureValues()/]
[/if]
    [unit.getService()/]->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
    return $this->redirectToRoute('[unit.confirmDestination.controllerName()/]');
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
    $[unit.instanceName()/] = [unit.createInstance()/];
    $this->[unit.instanceName()/] = [unit.createForm(create)/];
	[else]
	[/if]
[/if]
}

return $this->renderPage([unit.pageDisplayedOn().renderMethodParameters()/]);
[/template]

[template public createForm(unit : EditUnit, create : Boolean) post(trim())]
[let entityOrView : EntityOrView = unit.entities->first()]
$this->createForm([entityOrView.typeClassName()/]::class, $[unit.instanceName()/], array(
    'action' => $this->generateUrl('[unit.routeName(create)/]', array(
[if (create)]
	[if (entityOrView.keyEntity().isContained())]
        [entityOrView.keyEntity().container().routeActualParameters(entityOrView, '$'.concat(unit.instanceName()))/]
	[/if]
[else]
        [entityOrView.routeActualParameters(entityOrView, '$'.concat(unit.instanceName()))/]
[/if]
    )),
))
[/let]
[/template]

[template private routeActualParameters(entityOrView : EntityOrView, base : EntityOrView, accessor : String) post(trim())]
[for (key : Attribute | entityOrView.uriPathKeys())]
[comment should pass base to routeParameterName, but causes problems with shared paths on a page/]
'[key.routeParameterName(entityOrView)/]' => $[key.routeParameterName(entityOrView)/],
[/for]
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
if (!isset($this->[editUnit.instanceName()/]))
{
    $[editUnit.instanceName()/] = [editUnit.createInstance()/];
    $this->[editUnit.instanceName()/] = [editUnit.createForm(true)/];
}
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]

