[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[comment uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[comment uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::controlMethods/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(CreateUnit)) post(trim())]
[let createUnit : CreateUnit = unit.oclAsType(CreateUnit)]
[createUnit.actionMethod()/]

[for (action : InlineAction | createUnit.uriActions())]
[action.actionMethod()/]

[/for]
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(CreateUpdateUnit) or unit.oclIsKindOf(UpdateUnit) or unit.oclIsKindOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.actionMethod()/]

[if (editUnit.hasInterfaceFields())]
[editUnit.generateUnitRules()/]
[/if]

[for (action : InlineAction | editUnit.uriActions())]
[action.actionMethod()/]

[/for]
[/let]
[/template]

[template private actionMethod(unit : EditUnit)
	? (not unit.oclIsTypeOf(MapUnit)) post(trim())]
/**
 * [unit.routeAnnotation(true)/]
 * [unit.routeAnnotation()/]
 */
public function [unit.actionName()/]Action(Request $request, [unit.service.routeParameters()/])
{
[if (not unit.cancelDestination.oclIsUndefined())]
    [comment unit.handleCancel()/]

[/if]
    try
    {
[if (unit.oclIsTypeOf(CreateUpdateUnit))]
[let createUpdateUnit : CreateUpdateUnit = unit.oclAsType(CreateUpdateUnit)]
	[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
		[if (unit.oclIsKindOf(Selectable))]
        if ($request->post('clear'))
            $[unit.instanceName()/] = [unit.createInstance()/]
        else
            $[unit.instanceName()/] = [unit.getService()/]->find([unit.service.routeParameters()/]);
		[else]
        $[unit.instanceName()/] = [unit.createInstance()/]
		[/if]
	[/if]
[/let]
[else]
	[if (unit.oclIsKindOf(Selectable))]
        $[unit.instanceName()/] = [unit.getService()/]->find([unit.service.routeParameters()/]);
	[else]
        $[unit.instanceName()/] = [unit.createInstance()/]
	[/if]
[/if]
[if (unit.hasDefaultValueFields())]
        [unit.unitDefaultValues()/]
[/if]
        $this->[unit.instanceName()/] = [unit.createForm()/];
        $this->[unit.instanceName()/]->handleRequest($request);
        if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid())
        {
[if (unit.hasForcedValueFeatures())]
	        [comment unit.forcedFeatureValues()/]
[/if]
[if (not unit.confirmDestination.oclIsUndefined())]
	        return $this->redirectToRoute('[unit.confirmDestination.controllerName()/]');
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
            $[unit.instanceName()/] = [unit.createInstance()/]
		[if (unit.hasDefaultValueFields())]
            [unit.unitDefaultValues()/]
		[/if]
		[if (unit.hasInterfaceFields())]
	        [comment unit.generateClearInterfaceFields()/]
		[/if]
	[/if]
[/if]
        }

        return $this->renderPage();
    }
    [unit.catchSelectionException()/]

}
[/template]

[template public generateUnitRules(unit : DynamicUnit) post(trim())]
	private function unit_rules
	{
[for (field : InterfaceField | unit.interfaceFields())]
$this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
		'label' => '[field.displayLabel()/]',
		'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
	);
[/for]
	}
[/template]



[template private generateSaveCode(unit : EditUnit) post(trim())]
try
{
	[comment unit.generateValuesFromFormToModel()/]
[if (unit.hasForcedValueFeatures())]
	[comment unit.generateForcedFeatureValues()/]
[/if]
[if (unit.hasCaptchaFields())]
	[comment unit.generateCaptchaCheck()/]
	else
	{
[/if]
[if (unit.hasInterfaceFields())]
		[comment unit.generateInterfaceFieldValidation()/]
[/if]
	$this->[unit.instanceName()/]->save([if (unit.hasInterfaceFields())]$extra_validation[/if]);
[if (not unit.oclAsType(EditUnit).confirmDestination.oclIsUndefined())]
	$this->redirect(Route::get('[unit.oclAsType(EditUnit).confirmDestination.controllerName()/]')->uri());
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
	$this->[unit.instanceName()/]->clear();
		[if (unit.hasInterfaceFields())]
	[unit.generateClearInterfaceFields()/]
		[/if]
	[comment unit.generateRemoveParameter(unit.parameterName())/]
	[/if]
[/if]
}
[if (unit.hasCaptchaFields())]
		}
[/if]
catch (ORM_Validation_Exception $e)
{
	$this->[unit.instanceName()/]_field_errors = $e->errors('');
[if (unit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
	$unreported_field_errors = array_diff_key($this->[unit.instanceName()/]_field_errors, array([for
	(field : UnitField | unit.inputFields())
		separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (unit.hasInterfaceFields())], '_external' => ''[/if]));
	if (!empty($unreported_field_errors))
		$this->[unit.instanceName()/]_error = print_r($unreported_field_errors, TRUE);
[/if]
[if (unit.hasEncryptedFeatures())]
	[comment unit.generateClearEncryptedFeatures()/]
[/if]
}
[/template]

[template public generateClearInterfaceFields(unit : DynamicUnit) post(trim())]
[for (field : InterfaceField | unit.interfaceFields())]
unset($this->[unit.instanceName()/]->[field.modelPropertyName()/]);
[/for]
[/template]


[template public createForm(unit : EditUnit) post(trim())]
$this->createForm([service.typeClassName()/]::class, $[unit.instanceName()/])
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
if (!isset($this->[editUnit.instanceName()/]))
{
    $[editUnit.instanceName()/] = [editUnit.createInstance()/]
    $this->[editUnit.instanceName()/] = [editUnit.createForm()/];
}
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]

