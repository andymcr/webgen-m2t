[comment encoding = UTF-8 /]
[module collectionMethods(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[collectionUnit.actionMethod()/]
[if (not collectionUnit.inlineSelectCode())]

[unit.actionSupportMethods()/]
[/if]
[/let]
[/template]

[template public actionMethod(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[let page : Page = dynamicUnit.pageDisplayedOn()]
/**
 [unit.routeAnnotation(unit.routingType(), dynamicUnit.uriElement, dynamicUnit.routeName())/]
[if (dynamicUnit.requiresRole <> '')]
 [dynamicUnit.securityAnnotation()/]
[/if]
 */
public function [dynamicUnit.actionName()/]([unit.actionMethodParameters()/])
{
[if (dynamicUnit.isConditionalDisplay())]
    [dynamicUnit.actionCore()/]

[/if]
    return $this->renderPage([page.renderActualParameters(unit.routingType())/]);
}
[/let]
[/let]
[/template]

[template public actionCore(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (collectionUnit.inlineSelectCode())]
[collectionUnit.selectCode()/]
[else]
$this->[collectionUnit.selectName()/]([collectionUnit.selectMethodParameters()/]);
[/if]
[/let]
[/template]

[template public actionSupportMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (not collectionUnit.inlineSelectCode())]
private function [unit.selectName()/]([collectionUnit.selectMethodParameters(true)/])
{
    [collectionUnit.selectCode()/]
}
[/if]
[/let]
[/template]

[template private selectMethodParameters(unit : CollectionUnit) post(trim())]
[unit.selectMethodParameters(false)/]
[/template]

[template private selectMethodParameters(unit : CollectionUnit, formal : Boolean) post(trim())]
[if (unit.hasFilters() or unit.hasPagination())][if (formal)]
Request [/if]$request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameters()/]
[/template]

[template private selectionParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasRouteParameters())]
[unit.routeParameters()/][if (unit.hasPagination())]
, [/if][/if][unit.paginationActuals()/]
[/template]

[template private paginationActuals(unit : CollectionUnit) post(trim())]
[if (unit.hasPagination())]
	[if (unit.maximumPaginationSize > 0)]
([unit.pageVariable()/] - 1) * [unit.pageSizeVariable()/], [unit.pageSizeVariable()/]
	[else]
([unit.pageVariable()/] - 1) * [unit.defaultPaginationSize/], [unit.defaultPaginationSize/]
	[/if]
[/if]
[/template]

[template private selectCode(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (not unit.omitContainerLoad and not unit.containerType().oclIsUndefined())]
[unit.loadContainer()/]
[/if]
[if (dynamicUnit.isConditionalDisplay() and not unit.routingType().oclIsUndefined())]
if (!([dynamicUnit.hideWhen.controllerExpression('$this->'.concat(unit.routingType().instanceName()))/])) {
    [unit.selectCode2()/]
}
[else]
[unit.selectCode2()/]
[/if]

[/let]
[/template]

[template private selectCode2(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (unit.hasPagination())]
[unit.notePage()/]
[/if]
[if (unit.hasFilters())]
[unit.filterSelect()/]
else
[/if]
[if (unit.hasFilters())]    [/if][if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
$this->[unit.instanceName()/] = $this->[unit.selection.partOf.instanceServiceName()/]->[unit.selection.methodName/]([unit.selectionParameters()/]);
	[else]
$this->[unit.instanceName()/] = $this->[unit.filter.selection.partOf.instanceServiceName()/]->[unit.filter.methodName/]([unit.selectionParameters()/]);
	[/if]
[else]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->findAll([unit.paginationActuals()/]);
[/if]
[/let]
[/template]

[template private filterSelect(unit : CollectionUnit) post(trim())]
[for (filter : Filter | unit.supportedFilters) separator('else')]
if ($request->query->has('[filter.name/]Filter'))
    [unit.filterCall(filter)/]
[/for]
[/template]

[template private filterCall(unit : CollectionUnit, filter : Filter)]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->[filter.methodName/](
[if (not unit.routingType().oclIsUndefined())]
    [unit.routeParameters()/][if(filter.parameters->notEmpty() or filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())]
, [/if]

[/if]
[for (parameter : FormalParameter | filter.parameters)]
    $request->query->get('[parameter.name/]')[if (i < filter.parameters->size() or unit.hasPagination())],[/if]
[/for]
[if (unit.hasPagination())]
    [unit.paginationActuals()/]
[/if]
);
[/template]

[template private loadContainer(unit : CollectionUnit) post(trim())]
[if (unit.findContainerSelection.oclIsUndefined())]
$this->[unit.instanceParentName()/] = $this->[unit.oclAsType(DynamicUnit).containerService().instanceServiceName()/]->find([unit.routeParameters()/]);
[else]
$this->[unit.instanceParentName()/] = $this->[unit.findContainerSelection.partOf.instanceServiceName()/]->[unit.findContainerSelection.methodName/]([unit.routeParameters(unit.containerType(), unit.findContainerSelection)/]);
[/if]
if (!$this->[unit.instanceParentName()/]) {
    throw $this->createNotFoundException('The [unit.containerType().name/] does not exist');
}
[/template]

[template private loadCollection(unit : CollectionUnit) post(trim())]
[if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
$this->[unit.instanceName()/] = $this->[unit.selection.partOf.instanceServiceName()/]->[unit.selection.methodName/]([unit.selectionParameters()/]);
	[else]
$this->[unit.instanceName()/] = $this->[unit.filter.selection.partOf.instanceServiceName()/]->[unit.filter.methodName/]([unit.selectionParameters()/]);
	[/if]
[else]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->findAll([unit.paginationActuals()/]);
[/if]
[/template]

[template public templateParameters(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (dynamicUnit.isConditionalDisplay())]
if (!empty($this->[unit.instanceName()/])) {
    [unit.templateParameters2()/]
}
[else]
	[if (not dynamicUnit.pageDisplayedOn().hasSingleActionMethod())]
[dynamicUnit.actionCore()/]
	[/if]
[unit.templateParameters2()/]
[/if]
[/let]
[/template]

[template private templateParameters2(unit : CollectionUnit) post(trim())]
[if (not unit.selection.oclIsUndefined())]
	[if (not unit.routingType().oclIsUndefined() and not unit.omitContainerLoad)]
$parameters['['/]'[unit.instanceParentName()/]'[']'/] = $this->[unit.instanceParentName()/];
	[/if]
[/if]
$parameters['['/]'[unit.instanceName()/]'[']'/] = $this->[unit.instanceName()/];
[if (unit.hasPagination())]
$parameters['['/]'currentPage'[']'/] = [unit.pageVariable()/];
	[if (unit.maximumPaginationSize > 0)]
$parameters['['/]'pageCount'[']'/] = ceil($this->[unit.instanceName()/]->count() / [unit.pageSizeVariable()/]);
$parameters['['/]'[unit.paginationSizeParameterName()/]'[']'/] = [unit.pageSizeVariable()/];
	[else]
$parameters['['/]'pageCount'[']'/] = ceil($this->[unit.instanceName()/]->count() / [unit.defaultPaginationSize/]);
	[/if]
[/if]
[/template]
