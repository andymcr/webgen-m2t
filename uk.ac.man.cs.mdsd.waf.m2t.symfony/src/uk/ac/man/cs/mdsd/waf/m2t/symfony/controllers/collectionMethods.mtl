[comment encoding = UTF-8 /]
[module collectionMethods(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]


[template public actionMethod(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[let page : Page = dynamicUnit.pageDisplayedOn()]
/**
 [dynamicUnit.routeAnnotation()/]
[if (dynamicUnit.requiresRole <> '')]
 [dynamicUnit.securityAnnotation()/]
[/if]
 */
public function [dynamicUnit.actionName()/]([page.actionMethodParameters(dynamicUnit, unit.routingType())/])
{
[if (not page.uriCommonPathKeys()->includesAll(dynamicUnit.uriPathKeys()) or dynamicUnit.isConditionalDisplay())]
    [dynamicUnit.actionCore()/]

[/if]
    return $this->renderPage([page.renderActualParameters(unit.routingType())/]);
}
[/let]
[/let]
[/template]

[template public actionCore(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit) or unit.oclIsKindOf(ImageUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (collectionUnit.inlineSelectCode())]
[collectionUnit.selectCode()/]
[else]
$this->[collectionUnit.selectName()/]([collectionUnit.selectMethodParameters()/]);
[/if]
[/let]
[/template]

[template public selectMethod(unit : CollectionUnit) post(trim())]
private function [unit.selectName()/]([unit.selectMethodParameters(true)/])
{
    [unit.selectCode()/]
}
[/template]

[query public inlineSelectCode(unit : CollectionUnit) : Boolean
	= not unit.hasFilters()
/]

[template private selectMethodParameters(unit : CollectionUnit) post(trim())]
[unit.selectMethodParameters(false)/]
[/template]

[template private selectMethodParameters(unit : CollectionUnit, formal : Boolean) post(trim())]
[if (unit.oclAsType(DynamicUnit).hasFilterParameters() or unit.oclAsType(DynamicUnit).hasPagination())][if (formal)]
Request [/if]$request[if (not unit.routingType().oclIsUndefined())]
[if (unit.routingType().uriPathKeys()->notEmpty())]
, [/if][/if][/if]
[unit.routingParameters()/]
[/template]

[template private selectionParameters(unit : CollectionUnit) post(trim())]
[if (not unit.selection.selectVia.oclIsUndefined())]
[unit.routingParameters()/][if (unit.hasPagination())]
, [/if][/if]
[unit.paginationActuals()/]
[/template]

[template private routingParameters(unit : CollectionUnit) post(trim())]
[if (not unit.routingType().oclIsUndefined())]
	[for (key : Attribute | unit.routingType().uriPathKeys()) separator(', ')]
$[key.routeParameterName(unit.routingType())/][/for]
[/if]
[/template]

[template private paginationActuals(unit : CollectionUnit) post(trim())]
[if (unit.hasPagination())]
([unit.pageVariable()/] - 1) * [unit.defaultPaginationSize/], [unit.defaultPaginationSize/]
[/if]
[/template]

[template private selectCode(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (unit.hasPagination())]
[unit.pageVariable()/] = $request->query->getInt('[unit.paginationPageParameterName()/]', 1);
[/if]
[if (not unit.routingType().oclIsUndefined())]
$this->[unit.routingType().instanceName()/] = [unit.getSelectionService()/]->find([unit.routingParameters()/]);
[/if]
[if (unit.hasFilters())]
[unit.filterSelect()/]
else
[/if]
[if (unit.hasFilters())]    [/if][if (not unit.selection.oclIsUndefined())]
	[if (unit.routedSelection())]
$this->[unit.instanceName()/] = [dynamicUnit.getContentService()/]->[unit.selection.methodName/]([unit.selectionParameters()/]);
	[else]
$this->[unit.instanceName()/] = [unit.getSelectionService()/]->[if (not unit.filter.oclIsUndefined())]
[unit.filter.methodName/][else][unit.selection.methodName/][/if]
([unit.selectionParameters()/]);
	[/if]
[elseif (unit.oclIsKindOf(DataUnit))]
[let dataUnit : DataUnit = unit.oclAsType(DataUnit)]
	[if (not dataUnit.defaultSelection.oclIsUndefined())]
$this->[dataUnit.instanceName()/] = [unit.getSelectionService()/]->[dataUnit.defaultSelection.methodName/]([unit.selectionParameters()/]);
	[else]
$this->[dataUnit.instanceName()/] = [dataUnit.getContentService()/]->findAll([unit.paginationActuals()/]);
	[/if]
[/let]
[else]
$this->[unit.instanceName()/] = [dynamicUnit.getContentService()/]->[unit.selection.methodName/]([unit.paginationActuals()/]);
[/if]
[/let]
[/template]

[template private filterSelect(unit : CollectionUnit) post(trim())]
[for (filter : Filter | unit.supportedFilters) separator('else')]
if ($request->query->has('[filter.name/]Filter'))
    [unit.filterCall(filter)/]
[/for]
[/template]

[template private filterCall(unit : CollectionUnit, filter : Filter)]
$this->[unit.instanceName()/] = [unit.oclAsType(DynamicUnit).getContentService()/]->[filter.methodName/](
[for (parameter : FormalParameter | filter.parameters)]
    $request->query->get('[parameter.name/]')[if (i < filter.parameters->size() or filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())],[/if]
[/for]
[if (filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())]
    [unit.paginationActuals()/]
[/if]
);
[/template]

[template public templateParameters(unit : CollectionUnit) post(trim())]
[let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
[if (dynamicUnit.isConditionalDisplay())]
if (!empty($this->[unit.instanceName()/])) {
    [unit.templateParameters2()/]
}
[else]
	[if (dynamicUnit.pageDisplayedOn().uriCommonPathKeys()->includesAll(dynamicUnit.uriPathKeys())) ]
[dynamicUnit.actionCore()/]
	[else]
if (!isset($this->[dynamicUnit.instanceName()/]))
    $this->[dynamicUnit.instanceName()/] = [dynamicUnit.createInstance()/];
	[/if]
[unit.templateParameters2()/]
[/if]
[/let]
[/template]

[template private templateParameters2(unit : CollectionUnit) post(trim())]
[if (not unit.selection.oclIsUndefined())]
	[if (not unit.routingType().oclIsUndefined())]
$parameters['['/]'[unit.routingType().instanceName()/]'[']'/] = $this->[unit.routingType().instanceName()/];
	[/if]
[/if]
$parameters['['/]'[unit.instanceName()/]'[']'/] = $this->[unit.instanceName()/];
[if (unit.hasPagination())]
$parameters['['/]'currentPage'[']'/] = [unit.pageVariable()/];
$parameters['['/]'pageCount'[']'/] = ceil($this->[unit.instanceName()/]->count() / [unit.defaultPaginationSize/]);
[/if]
[/template]

[template private pageVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionalDisplay())]
$page
[else]
$this->page
[/if]
[/template]