[comment encoding = UTF-8 /]
[module action(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::value/]


[template public unitSupportLinks(unit : DynamicUnit, accessor : String) post(trim())]
<form action="{{ path('[unit.supportRouteName()/]', { [if (not unit.routingType().oclIsUndefined())]
[unit.routeActualParameters(unit.routingType(), unit.routingType(), accessor, unit.selection(), unit.hasObjectAccess())/] [/if]
 }) }}" id="[unit.instanceName()/]" class="[unit.controlClass/]">
[for (action : UnitSupportAction | unit.unitSupportActions())]
 [action.unitSupportLink()/]
[/for]
</form>
[/template]

[template public unitSupportLink(action : UnitSupportAction) post(trim())]
<input type="submit" name="[action.actionName()/]" value="[action.displayLabel/]"[if (not action.confirmMessage.oclIsUndefined())]
onclick="return confirm('[action.confirmMessage/]');"[/if]/>
[/template]



[template public linkLabel(label : String, iconName : String) post(trim())]
[if (iconName = '')]
[label/]
[else]
<i class="material-icons">[iconName/]</i>
[/if]
[/template]


[template public actionLink(action : InlineAction, valueType : EntityOrView, valueAccessor : String, 
	linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(DeleteAction))  post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : CollectionUnit = deleteAction.immediateUnit().oclAsType(CollectionUnit)]
[let page : Page = deleteAction.immediateUnit().pageDisplayedOn()]
[action.anchor(deleteAction.routeName(), 
	deleteAction.routeActualParameters(unit, valueType, valueAccessor, unit.selection, objectAccess), 
	linkContent, title, deleteAction.confirmMessage, conditionAccessor, page.hasFilters() or page.hasPagination(), 
	objectAccess)/]
[/let]
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, valueType : EntityOrView, valueAccessor : String, 
	linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(FeatureSupportAction))  post(trim())]
[let featureAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[let unit : CollectionUnit = featureAction.immediateUnit().oclAsType(CollectionUnit)]
[action.anchor(featureAction.routeName(), 
	featureAction.routeActualParameters(unit, valueType, valueAccessor, unit.selection, objectAccess), 
	linkContent, title, featureAction.confirmMessage, conditionAccessor, true, objectAccess)/]
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, valueType : EntityOrView, valueAccessor : String, 
	linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(SelectAction))  post(trim())]
[let selectAction : SelectAction = action.oclAsType(SelectAction)]
[let unit : DynamicUnit = selectAction.immediateUnit()]
[let page : Page = unit.pageDisplayedOn()]
[let targetUnit : ContentUnit = selectAction.target.oclAsType(ContentUnit)]
[let routingParameters : String
	= if targetUnit.oclIsKindOf(CollectionUnit) then
			if targetUnit.oclAsType(CollectionUnit).hasSelectCondition() then
				targetUnit.oclAsType(CollectionUnit).routeActualParameters(targetUnit.routingType(), targetUnit.oclAsType(CollectionUnit).selection, valueType, valueAccessor, unit.selection(), objectAccess)
			else
				targetUnit.routingType().routeActualParameters(valueType, valueAccessor, unit.selection(), objectAccess)
			endif
		else
			targetUnit.routingType().routeActualParameters(valueType, valueAccessor, unit.selection(), objectAccess)
		endif]
[if (selectAction.valuePath.oclIsUndefined())]
[action.anchor(targetUnit.routeName(), routingParameters, linkContent, title, null, conditionAccessor, 
	page = targetUnit.pageDisplayedOn() and (page.hasFilters() or page.hasPagination()), objectAccess)/]
[else]
[action.anchor(targetUnit.routeName(), routingParameters, linkContent, title, null, conditionAccessor, 
	page = targetUnit.pageDisplayedOn() and (page.hasFilters() or page.hasPagination()), objectAccess)/]
[/if]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[query private selection(unit : ContentUnit) : Selection
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).selection
		else if unit.oclIsTypeOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).selection
		else
			null
		endif endif
/]

[query public pathType(path : FeaturePath, sourceType : EntityOrView) : EntityOrView
	= if path.oclIsTypeOf(FeaturePathAssociation) then
			path.oclAsType(FeaturePathAssociation).pathType(sourceType)
		else
			null
		endif
/]

[query private pathType(path : FeaturePathAssociation, sourceType : EntityOrView) : EntityOrView
	= let targetType : EntityOrView
		= if path.association.sourceType() = sourceType then
				path.association.targetType()
			else
				path.association.sourceType()
			endif
		in if path.childFeature.oclIsUndefined() then
				targetType
			else
				path.childFeature.pathType(targetType)
			endif
/]

[query private pathType(path : ChildPath, sourceType : EntityOrView) : EntityOrView
	= if path.oclIsTypeOf(ChildPathAssociation) then
			path.oclAsType(ChildPathAssociation).pathType(sourceType)
		else
			null
		endif
/]

[query private pathType(path : ChildPathAssociation, sourceType : EntityOrView) : EntityOrView
	= let targetType : EntityOrView
		= if path.association.sourceType() = sourceType then
				path.association.targetType()
			else
				path.association.sourceType()
			endif
		in if path.childFeature.oclIsUndefined() then
				targetType
			else
				path.childFeature.pathType(targetType)
			endif
/]

[template private anchor(action : InlineAction, routeName : String, routingParameters : String, 
	linkContent : String, title : String, confirmMessage : String, conditionAccessor : String, 
	targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (action.requiresRole() <> '' and action.requiresRole() <> action.immediateUnit().requiresRole)]
{% if is_granted('[action.requiresRole()/]') %}[/if]
[action.anchor2(routeName, routingParameters, linkContent, title, confirmMessage, conditionAccessor, targetSamePage, objectAccess)/][if (action.requiresRole() <> '' and action.requiresRole() <> action.immediateUnit().requiresRole)]
{% endif %}[/if]
[/template]

[template private anchor2(action : InlineAction, routeName : String, routingParameters : String, 
	linkContent : String, title : String, confirmMessage : String, 	conditionAccessor : String, 
	targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (action.displayWhen.oclIsUndefined())]
	[if (action.enableWhen().oclIsUndefined())]
[action.anchor3(routeName, routingParameters, linkContent, title, confirmMessage, targetSamePage, objectAccess)/]
	[else]
{% if [if (action.oclIsTypeOf(SelectAction))]not ([/if][action.enableWhen().twigExpression(conditionAccessor)/][if (action.oclIsTypeOf(SelectAction))])[/if] %}[action.anchor3(routeName, routingParameters, linkContent, title, confirmMessage, targetSamePage, objectAccess)/]{% else %}[linkContent/]{% endif %}
	[/if]
[else]
{% if [action.displayWhen.twigExpression(conditionAccessor)/] %}[action.anchor3(routeName, routingParameters, linkContent, title, confirmMessage, targetSamePage, objectAccess)/]{% endif %}
[/if]
[/template]

[template private anchor3(action : InlineAction, routeName : String, routingParameters : String, 
	linkContent : String, title : String, confirmMessage : String, targetSamePage : Boolean, 
	objectAccess : Boolean) post(trim())]
<a href="{{ path('[routeName/]', [if (targetSamePage)]app.request.query.all|merge([/if]{ [routingParameters/] }[if (targetSamePage)])[/if]) }}" title="[action.displayLabel/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]"[if (not confirmMessage.oclIsUndefined())]
 onclick="return confirm('[confirmMessage/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]');"[/if]>[linkContent/]</a>
[/template]


[template private routeActualParameters(action : InlineAction, unit : CollectionUnit, valueType : EntityOrView, 
	valueAccessor : String, valueSelection : Selection, objectAccess : Boolean) post(trim())]
[if (unit.findElementSelection.oclIsUndefined())]
[unit.contentType().routeActualParameters(valueType, valueAccessor, valueSelection, objectAccess)/]
[else]
[unit.routeActualParameters(unit.contentType(), unit.findElementSelection, valueType, valueAccessor, valueSelection, objectAccess)/]
[/if]
[/template]

[template public routeActualParameters(unit : CollectionUnit, routingType : EntityOrView, selection : Selection, 
	valueType : EntityOrView, valueAccessor : String, valueSelection : Selection, objectAccess : Boolean) post(trim())]
[for (key : Attribute | unit.uriPathKeys(routingType, selection))]
[key.routeActualParameter(routingType, valueType, valueAccessor, valueSelection, objectAccess)/],
[/for]
[/template]

[template private routeActualParameters(routingType : EntityOrView, valueType : EntityOrView, 
	valueAccessor : String, valueSelection : Selection, objectAccess : Boolean) post(trim())]
[for (key : Attribute | routingType.uriPathKeys())]
[key.routeActualParameter(routingType, valueType, valueAccessor, valueSelection, objectAccess)/],
[/for]
[/template]

[template private routeActualParameter(key : Attribute, routingType : EntityOrView, valueType : EntityOrView, 
	valueAccessor : String, valueSelection : Selection, objectAccess : Boolean) post(trim())]
'[key.routeParameterName(routingType)/]': [key.getValue(key.keyAccessor(valueType, valueAccessor, valueSelection, objectAccess))/][if (key.isDate())]
.format('Y-m-d H:i:s')[/if][if (key.encodeUriKey)] | url_encode[/if]
[/template]

[query private keyAccessor(key : Attribute, valueType : EntityOrView, parentAccessor : String, 
		valueSelection : Selection, objectAccess : Boolean) : String
	= if not objectAccess then
			if key.alias(valueSelection).oclIsUndefined() then
				parentAccessor.concat('.').concat(key.columnName())
			else
				parentAccessor.concat('.').concat(key.alias(valueSelection))
			endif
		else if valueType.attributeKeys()->includes(key) then
			parentAccessor.concat('.').concat(key.modelPropertyName())
		else if not valueType.container().oclIsUndefined() then
			key.keyAccessor(valueType.container(), parentAccessor.concat('.').concat(valueType.containingAssociation().modelPropertyName()), valueSelection, objectAccess)
		else
			''
		endif endif endif
/]
