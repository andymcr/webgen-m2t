[comment encoding = UTF-8 /]
[module action(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::value/]


[template public unitSupportLinks(unit : DynamicUnit, accessor : String) post(trim())]
<form action="{{ path('[unit.supportRouteName()/]', { [if (not unit.routingType().oclIsUndefined())]
[unit.routeActualParameters(false, unit.routingType(), unit.routingType(), accessor, unit.hasObjectAccess())/] [/if]
 }) }}" id="[unit.instanceName()/]" class="[unit.controlClass/]">
[for (action : UnitSupportAction | unit.unitSupportActions())]
 [action.unitSupportLink()/]
[/for]
</form>
[/template]

[template public unitSupportLink(action : UnitSupportAction) post(trim())]
<input type="submit" name="[action.actionName()/]" value="[action.displayLabel/]"[if (not action.confirmMessage.oclIsUndefined())]
onclick="return confirm('[action.confirmMessage/]');"[/if]/>
[/template]



[template public linkLabel(label : String, iconName : String) post(trim())]
[if (iconName = '')]
[label/]
[else]
<i class="material-icons">[iconName/]</i>
[/if]
[/template]


[template public actionLink(action : InlineAction, entity : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(DeleteAction))  post(trim())]
[let delete : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = delete.immediateUnit()]
[let page : Page = delete.immediateUnit().pageDisplayedOn()]
[action.anchor(delete.routeName(), unit, entity, routeParametersAccessor, linkContent, title, delete.confirmMessage, conditionAccessor, page.hasFilters() or page.hasPagination(), objectAccess)/]
[/let]
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, entity : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(FeatureSupportAction))  post(trim())]
[let feature : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
[let unit : DynamicUnit = feature.immediateUnit()]
[action.anchor(feature.routeName(), unit, entity, routeParametersAccessor, linkContent, title, feature.confirmMessage, conditionAccessor, true, objectAccess)/]
[/let]
[/let]
[/template]

[template public actionLink(action : InlineAction, dummy : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, conditionAccessor : String, objectAccess : Boolean)
	? (action.oclIsTypeOf(SelectAction))  post(trim())]
[let select : SelectAction = action.oclAsType(SelectAction)]
[let page : Page = select.immediateUnit().pageDisplayedOn()]
[let targetUnit : ContentUnit = select.target.oclAsType(ContentUnit)]
[let selectValueAccessor : String =
	if select.valuePath.oclIsUndefined() then
		routeParametersAccessor
	else
		select.valuePath.accessor(routeParametersAccessor)
	endif]
[action.anchor(targetUnit.routeName(), targetUnit, select.target.oclAsType(DynamicUnit).routingType(), selectValueAccessor, linkContent, title, null, conditionAccessor, page = targetUnit.pageDisplayedOn() and (page.hasFilters() or page.hasPagination()), objectAccess)/]
[/let]
[/let]
[/let]
[/let]
[/template]

[template private anchor(action : InlineAction, routeName : String, targetUnit : ContentUnit, entity : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, confirmMessage : String, conditionAccessor : String, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (action.requiresRole() <> '' and action.requiresRole() <> action.immediateUnit().requiresRole)]
{% if is_granted('[action.requiresRole()/]') %}[/if][action.anchor2(routeName, targetUnit, entity, routeParametersAccessor, linkContent, title, confirmMessage, conditionAccessor, targetSamePage, objectAccess)/][if (action.requiresRole() <> '' and action.requiresRole() <> action.immediateUnit().requiresRole)]
{% endif %}[/if]
[/template]

[template private anchor2(action : InlineAction, routeName : String, targetUnit : ContentUnit, entity : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, confirmMessage : String, conditionAccessor : String, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
[if (action.displayWhen.oclIsUndefined())]
	[if (action.enableWhen().oclIsUndefined())]
[action.anchor3(routeName, entity, routeParametersAccessor, linkContent, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]
	[else]
{% if [if (action.oclIsTypeOf(SelectAction))]not ([/if][action.enableWhen().twigExpression(conditionAccessor)/][if (action.oclIsTypeOf(SelectAction))])[/if] %}[action.anchor3(routeName, entity, routeParametersAccessor, linkContent, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]{% else %}[linkContent/]{% endif %}
	[/if]
[else]
{% if [action.displayWhen.twigExpression(conditionAccessor)/] %}[action.anchor3(routeName, entity, routeParametersAccessor, linkContent, title, confirmMessage, targetUnit, targetSamePage, objectAccess)/]{% endif %}
[/if]
[/template]

[template private anchor3(action : InlineAction, routeName : String, entity : EntityOrView, routeParametersAccessor : String, linkContent : String, title : String, confirmMessage : String, targetUnit : ContentUnit, targetSamePage : Boolean, objectAccess : Boolean) post(trim())]
<a href="{{ path('[routeName/]', [if (targetSamePage)]app.request.query.all|merge([/if]{ [targetUnit.routeActualParameters(not action.oclIsTypeOf(SelectAction), entity, entity, routeParametersAccessor, objectAccess)/] }[if (targetSamePage)])[/if]) }}" title="[action.displayLabel/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]"[if (not confirmMessage.oclIsUndefined())]
 onclick="return confirm('[confirmMessage/][if (not title.oclIsUndefined())] {{ [title/] }}[/if]');"[/if]>[linkContent/]</a>
[/template]

[template public routeActualParameters(targetUnit : ContentUnit, includeContentKeys : Boolean, routingType : EntityOrView, valueBase : EntityOrView, accessor : String, objectAccess : Boolean) post(trim())]
[if (includeContentKeys)]
[routingType.routeActualParameters(valueBase, accessor, objectAccess)/]
[else]
[targetUnit.routeActualParameters(routingType, valueBase, accessor, objectAccess)/]
[/if]
[/template]

[template public routeActualParameters(routingType : EntityOrView, valueBase : EntityOrView, accessor : String, objectAccess : Boolean) post(trim())]
[if (routingType.isContained())]
[routingType.container().routeActualParameters(valueBase, accessor.concat('.').concat(routingType.containingAssociation().modelPropertyName()), objectAccess)/]
[/if]
[for (key : Attribute | routingType.attributeKeys())]
[let keyAccessor : String
	= if objectAccess then
			accessor.concat('.').concat(key.modelPropertyName())
		else
			accessor.concat('.').concat(key.columnName())
		endif]
'[key.routeParameterName(valueBase)/]': [key.getValue(keyAccessor)/][if (key.isDate())].format('Y-m-d H:i:s')[/if][if (key.encodeUriKey)] | url_encode[/if],
[/let]
[/for]
[/template]

[template public routeActualParameters(targetUnit : ContentUnit, routingType : EntityOrView, valueBase : EntityOrView, accessor : String, objectAccess : Boolean) post(trim())]
[if (routingType.isContained())]
[targetUnit.routeActualParameters(routingType.container(), valueBase, accessor.concat('.').concat(routingType.containingAssociation().modelPropertyName()), objectAccess)/]
[/if]
[for (key : Attribute | routingType.uriEntityKeys(targetUnit, valueBase))]
[let keyAccessor : String
	= if objectAccess then
			accessor.concat('.').concat(key.modelPropertyName())
		else
			accessor.concat('.').concat(key.columnName())
		endif]
'[key.routeParameterName(valueBase)/]': [key.getValue(keyAccessor)/][if (key.isDate())].format('Y-m-d H:i:s')[/if][if (key.encodeUriKey)] | url_encode[/if],
[/let]
[/for]
[/template]

