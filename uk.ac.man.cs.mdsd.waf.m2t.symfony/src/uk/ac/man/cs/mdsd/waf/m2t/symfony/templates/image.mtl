[comment encoding = UTF-8 /]
[module image(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]


[query public thumbFilter(unit : ImageUnit) : ThumbnailFilter
	= let filters : Sequence(ThumbnailFilter)
		= unit.imageFilter.filters->select(f | f.oclIsTypeOf(ThumbnailFilter)).oclAsType(ThumbnailFilter)
		in if filters->isEmpty() then
				null
			else
				filters->first()
			endif
/]


[template public image(model : WafModel) post(trim())]
[let imagePath : String = '\''.concat(model.logoImage).concat('\'')]
<img [imagePath.imageSrc('src', model.logoFilters)/]/>
[/let]
[/template]

[template public image(unit : ImageUnit, baseAccessor : String) post(trim())]
[if (unit.imagePathFeature.oclIsUndefined())]
	[if (not unit.missingImagePath.oclIsUndefined())]
[unit.imageMissing(unit.imageFilter, baseAccessor)/]
	[/if]
[elseif (unit.imagePathFeature.imagePath(unit, baseAccessor).oclIsUndefined())]
	[if (not unit.missingImagePath.oclIsUndefined())]
[unit.imageMissing(unit.imageFilter, baseAccessor)/]
	[/if]
[else]
[let imageAccessor : String = unit.imagePathFeature.imagePath(unit, baseAccessor)]
{%- if [imageAccessor/] is not empty -%}
[unit.image(unit.imageFilter, imageAccessor, baseAccessor)/]
	[if (not unit.missingImagePath.oclIsUndefined())]
{%- else -%}
[unit.imageMissing(unit.imageFilter, baseAccessor)/]
	[/if]
{%- endif -%}
[/let]
[/if]
[/template]


[template public imageMissing(unit : ImageUnit, manipulation : ImageManipulation, baseAccessor : String) post(trim())]
<img [unit.imageMissingSrc('src', manipulation)/] [unit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/]/>
[/template]

[template public image(unit : ImageUnit, manipulation : ImageManipulation, accessor : String,  baseAccessor : String) post(trim())]
<img [accessor.imageSrc('src', manipulation)/] [unit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/]/>
[/template]

[template public imageMissingSrc(unit : ImageUnit, key : String, manipulation : ImageManipulation) post(trim())]
[key/]="{{ '[unit.missingImagePath/]'[if (not manipulation.oclIsUndefined())] | imagine_filter('[manipulation.name/]')[/if] }}"
[/template]

[template public imageSrc(accessor : String, key : String, manipulation : ImageManipulation) post(trim())]
[key/]="{{ [accessor/][if (not manipulation.oclIsUndefined())] | imagine_filter('[manipulation.name/]')[/if] }}"
[/template]

[template public imageAlt(unit : ImageUnit, baseAccessor : String) post(trim())]
[if (not unit.imageTitleFeature.oclIsUndefined())]
alt="{{ [unit.imageTitleFeature.accessor(baseAccessor)/][unit.imageTitleFeature.valueLabel()/] }}"
[/if]
[/template]

[template public imageTitle(unit : ImageUnit, baseAccessor : String) post(trim())]
[if (not unit.imageTitleFeature.oclIsUndefined())]
title="{{ [unit.imageTitleFeature.accessor(baseAccessor)/][unit.imageTitleFeature.valueLabel()/] }}"
[/if]
[/template]


[query public imagePath(path : FeaturePath, unit : ImageUnit, parentAccessor : String) : String
	= if path.oclIsTypeOf(FeaturePathAttribute) then
			path.oclAsType(FeaturePathAttribute).imagePath(parentAccessor, unit.hasObjectAccess())
		else if path.oclIsTypeOf(FeaturePathAssociation) then
			path.oclAsType(FeaturePathAssociation).imagePath(parentAccessor, unit.hasObjectAccess())
		else
			null
		endif endif
/]

[query private imagePath(attribute : FeaturePathAttribute, parentAccessor : String, objectAccess : Boolean) : String
	= let localAccessor : String
			= if objectAccess then
					attribute.attribute.modelPropertyName()
				else
					attribute.attribute.columnName()
				endif
		in parentAccessor.concat('.').concat(localAccessor)
/]

[query private imagePath(association : FeaturePathAssociation, parentAccessor : String, objectAccess : Boolean) : String
	= if association.childFeature.oclIsUndefined() then
			null
		else
			association.childFeature.imagePath(
				parentAccessor.concat('.').concat(association.association.modelPropertyName()),
				objectAccess)
		endif
/]

[query private imagePath(path : ChildPath, parentAccessor : String, objectAccess : Boolean) : String
	= if path.oclIsTypeOf(ChildPathAttribute) then
			path.oclAsType(ChildPathAttribute).imagePath(parentAccessor, objectAccess)
		else if path.oclIsTypeOf(ChildPathAssociation) then
			path.oclAsType(ChildPathAssociation).imagePath(parentAccessor, objectAccess)
		else
			null
		endif endif
/]

[query private imagePath(attribute : ChildPathAttribute, parentAccessor : String, objectAccess : Boolean) : String
	= let localAccessor : String
			= if objectAccess then
					attribute.attribute.modelPropertyName()
				else
					attribute.attribute.columnName()
				endif
		in parentAccessor.concat('.').concat(localAccessor)
/]

[query private imagePath(association : ChildPathAssociation, parentAccessor : String, objectAccess : Boolean) : String
	= if association.childFeature.oclIsUndefined() then
			null
		else
			association.childFeature.imagePath(
				parentAccessor.concat('.').concat(association.association.modelPropertyName()),
				objectAccess)
		endif
/]