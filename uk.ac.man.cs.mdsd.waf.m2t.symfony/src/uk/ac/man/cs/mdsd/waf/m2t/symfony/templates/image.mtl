[comment encoding = UTF-8 /]
[module image(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]


[query public thumbFilter(unit : ImageUnit) : ThumbnailFilter
	= let filters : Sequence(ThumbnailFilter)
		= unit.imageFilter.filters->select(f | f.oclIsTypeOf(ThumbnailFilter)).oclAsType(ThumbnailFilter)
		in if filters->isEmpty() then
				null
			else
				filters->first()
			endif
/]


[template public imagePath(feature : FeaturePath, unit : ImageUnit, parentAccessor : String, baseAccessor : String, useAnchor : Boolean)
	? (feature.oclIsTypeOf(FeaturePathAttribute)) post(trim())]
[let attribute : FeaturePathAttribute = feature.oclAsType(FeaturePathAttribute)]
[let accessor : String = parentAccessor.concat('.').concat(attribute.attribute.modelPropertyName())]
[if (attribute.attribute.isRequired())]
[unit.image(accessor, baseAccessor, useAnchor)/]
[else]
	[if (unit.missingImagePath.oclIsUndefined())]
{%- if [accessor/] is not empty -%}
[unit.image(accessor, baseAccessor, useAnchor)/]
{%- endif -%}
	[else]
{%- if [accessor/] is empty -%}
[unit.imageMissing(accessor, baseAccessor, useAnchor)/]
{%- else -%}
[unit.image(accessor, baseAccessor, useAnchor)/]
{%- endif -%}
	[/if]
[/if]
[/let]
[/let]
[/template]

[template public imagePath(feature : FeaturePath, unit : ImageUnit, parentAccessor : String, baseAccessor : String, useAnchor : Boolean)
	? (feature.oclIsTypeOf(FeaturePathAssociation)) post(trim())]
[let association : FeaturePathAssociation = feature.oclAsType(FeaturePathAssociation)]
[let accessor : String = parentAccessor.concat('.').concat(association.association.modelPropertyName())]
[if (association.childFeature.oclIsUndefined())]
[unit.imageMissing(accessor, baseAccessor, useAnchor)/]
[else]
	[if (association.association.isSingleton())]
		[if (association.association.isRequired())]
[association.childFeature.imagePath(unit, accessor, baseAccessor, useAnchor)/]
		[else]
{%- if [accessor/] is empty -%}
[unit.imageMissing(accessor, baseAccessor, useAnchor)/]
{%- else -%}
[association.childFeature.imagePath(unit, accessor, baseAccessor, useAnchor)/]
{%- endif -%}
		[/if]
	[else]
{%- if [accessor/] | length > 0 -%}
{%- set child = [accessor/] | first -%}
[association.childFeature.imagePath(unit, 'child', baseAccessor, useAnchor)/]
		[if (not unit.missingImagePath.oclIsUndefined())]
{%- else -%}
[unit.imageMissing(accessor, baseAccessor, useAnchor)/]
		[/if]
{%- endif -%}
	[/if]
[/if]
[/let]
[/let]
[/template]

[template public imagePath(feature : ChildPath, unit : ImageUnit, parentAccessor : String, baseAccessor : String, useAnchor : Boolean)
	? (feature.oclIsTypeOf(ChildPathAttribute)) post(trim())]
[let attribute : ChildPathAttribute = feature.oclAsType(ChildPathAttribute)]
[let accessor : String = parentAccessor.concat('.').concat(attribute.attribute.modelPropertyName())]
[if (attribute.attribute.isRequired())]
[unit.image(accessor, baseAccessor, useAnchor)/]
[else]
	[if (unit.missingImagePath.oclIsUndefined())]
{%- if [accessor/] is not empty -%}
[unit.image(accessor, baseAccessor, useAnchor)/]
{%- endif -%}
	[else]
{%- if [accessor/] is empty -%}
[unit.imageMissing(accessor, baseAccessor, useAnchor)/]
{%- else -%}
[unit.image(accessor, baseAccessor, useAnchor)/]
{%- endif -%}
	[/if]
[/if]
[/let]
[/let]
[/template]

[template public imagePath(feature : ChildPath, unit : ImageUnit, parentAccessor : String, baseAccessor : String)
	? (feature.oclIsTypeOf(ChildPathAssociation)) post(trim())]
[let association : ChildPathAssociation = feature.oclAsType(ChildPathAssociation)]
[let accessor : String = parentAccessor.concat('.').concat(association.association.modelPropertyName())]
[if (not association.childFeature.oclIsUndefined())]
[association.childFeature.imagePath(unit, accessor, baseAccessor)/]
[/if]
[/let]
[/let]
[/template]


[template public imageMissing(unit : ImageUnit, accessor : String, baseAccessor : String, useAnchor : Boolean)
	? (not unit.oclIsTypeOf(GalleryUnit)) post(trim())]
[if (useAnchor)]
<a [unit.imageMissingSrc(useAnchor)/] [unit.imageTitle(baseAccessor)/]/>
[else]
<img [unit.imageMissingSrc(useAnchor)/] [unit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/]/>
[/if]
[/template]

[template public imageMissing(unit : ImageUnit, accessor : String, baseAccessor : String, useAnchor : Boolean)
	? (unit.oclIsTypeOf(GalleryUnit)) post(trim())]
[let galleryUnit : GalleryUnit = unit.oclAsType(GalleryUnit)]
<a [galleryUnit.imageMissingSrc(useAnchor)/] [unit.imageTitle(baseAccessor)/]/>
[if (useAnchor)]
[else]
<img [galleryUnit.imageMissingSrc(useAnchor)/] [galleryUnit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/] [galleryUnit.imageMissingDataImage()/] [galleryUnit.imageDataDescription(baseAccessor)/]/>
[/if]
[/let]
[/template]

[template public image(model : WafModel, useAnchor : Boolean) post(trim())]
[let imagePath : String = '\''.concat(model.logoImage).concat('\'')]
[if (useAnchor)]
<a [imagePath.imageSrc(model.logoFilters, useAnchor)/] [comment unit.imageTitle(baseAccessor)/]/>
[else]
<img [imagePath.imageSrc(model.logoFilters, useAnchor)/] [comment unit.imageAlt(baseAccessor)/] [comment unit.imageTitle(baseAccessor)/]/>
[/if]
[/let]
[/template]

[template public image(unit : ImageUnit, accessor : String, baseAccessor : String, useAnchor : Boolean)
	? (not unit.oclIsTypeOf(GalleryUnit)) post(trim())]
[if (useAnchor)]
<a [accessor.imageSrc(unit.imageFilter, useAnchor)/] [unit.imageTitle(baseAccessor)/]/>
[else]
<img [accessor.imageSrc(unit.imageFilter, useAnchor)/] [unit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/]/>
[/if]
[/template]

[template public image(unit : ImageUnit, accessor : String, baseAccessor : String, useAnchor : Boolean)
	? (unit.oclIsTypeOf(GalleryUnit)) post(trim())]
[let galleryUnit : GalleryUnit = unit.oclAsType(GalleryUnit)]
[if (useAnchor)]
<a [accessor.imageSrc(galleryUnit.imageFilter, useAnchor)/] [unit.imageTitle(baseAccessor)/]/>
[else]
<img [accessor.imageSrc(galleryUnit.imageFilter, useAnchor)/] [galleryUnit.imageAlt(baseAccessor)/] [unit.imageTitle(baseAccessor)/] [galleryUnit.imageDataImage(accessor)/] [galleryUnit.imageDataDescription(baseAccessor)/]/>
[/if]
[/let]
[/template]

[template private imageSrc(accessor : String, manipulation : ImageManipulation, useAnchor : Boolean) post(trim())]
[if (useAnchor)]href[else]
src[/if]="{{ [accessor/][if (not manipulation.oclIsUndefined())] | imagine_filter('[manipulation.name/]')[/if] }}"
[/template]

[template private imageMissingSrc(unit : ImageUnit, useAnchor : Boolean) post(trim())]
[if (useAnchor)]href[else]
src[/if]="{{ '[unit.missingImagePath/]' | imagine_filter('[unit.imageFilter.name/]') }}"
[/template]

[template private imageAlt(unit : ImageUnit, accessor : String) post(trim())]
[if (not unit.titleFeature.oclIsUndefined())]
alt="{{ [unit.titleFeature.accessor(accessor)/] }}"
[/if]
[/template]

[template private imageTitle(unit : ImageUnit, accessor : String) post(trim())]
[if (not unit.titleFeature.oclIsUndefined())]
title="{{ [unit.titleFeature.accessor(accessor)/] }}"
[/if]
[/template]

[template private imageDataImage(unit : GalleryUnit, accessor : String) post(trim())]
data-image="[if (unit.fullSizeFilter.oclIsUndefined())]
http://sps.andycarpenter.me.uk/{{ [accessor/] }}[else]
{{ [accessor/] | imagine_filter('[unit.imageFilter.name/]') }}[/if]"
[/template]

[template private imageMissingDataImage(unit : GalleryUnit) post(trim())]
data-image="http://sps.andycarpenter.me.uk/[unit.missingImagePath/]"
[/template]

[template private imageDataDescription(unit : ImageUnit, accessor : String) post(trim())]
data-description="?????"
[/template]