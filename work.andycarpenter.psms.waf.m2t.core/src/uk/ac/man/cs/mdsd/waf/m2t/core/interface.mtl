[comment encoding = UTF-8 /]
[module interface(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features]
[import uk::ac::man::cs::mdsd::orm::m2t::core::interface]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units]


[query public formId(unit : DynamicUnit) : String
	= let typeName : String
		= unit.contentType().name.asId()
		in if false then
				typeName
			else
				typeName
			endif
/]


[query public homePage(model : WafModel) : Page
	= let homes : Sequence(ActionMenuEntry)
		= model.menus
			->collect(m | m.entries)
			->select(e | e.oclIsKindOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
			->select(e | e.name.equalsIgnoreCase('Home'))
		in if homes->notEmpty() then
				homes->first().action.displayedOn
			else
				model.pages->first()
			endif
/]


[query public id(entity : Entity) : String
	= entity.name.asId()
/]


[query public id(feature : Feature) : String
	= feature.name.asId()
/]

[query public id(menu : Menu) : String
	= menu.name.asId()
/]

[query public id(menuEntry : MenuEntry) : String
	= if menuEntry.oclIsTypeOf(SubmenuEntry) then
			menuEntry.oclAsType(SubmenuEntry).name.asId()
		else if menuEntry.oclIsTypeOf(ActionMenuEntry) then
			menuEntry.oclAsType(ActionMenuEntry).name.asId()
		else if menuEntry.oclIsTypeOf(EditStaticTextMenuEntry) then
			menuEntry.oclAsType(EditStaticTextMenuEntry).name.asId()
		else
			'Unhandled'
		endif endif endif
/]


[query public pageId(page : Page) : String
	= page.name.asId()
/]


[query public styleClass(menu : Menu) : String
	= menu.styleClass
/]


[query public cancelLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).cancelLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).cancelLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public containedId(unit : ContentUnit) : String
	= unit.displayedOn.pageId().concat('.').concat(unit.name.asId())
/]

[query public hasClearLabel(unit : EditUnit) : Boolean
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			not unit.oclAsType(CreateUpdateUnit).clearLabel.oclIsUndefined()
		else
			false
		endif
/]

[query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormHead
				or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
				or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if uUnit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormFoot
			or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= true
/]

[comment query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::OnFeature
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasOmittedFieldLabels(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).omitFieldLabels
		else if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).omitFieldLabels
		else
			false
		endif endif
/]

[query public id(unit : ContentUnit) : String
	= unit.displayedOn.pageId().concat('.labels.').concat(unit.name.asId())
/]

[query public isConditionalDisplay(unit : DynamicUnit) : Boolean
	= not unit.hideWhen.oclIsUndefined()
/]

[query public rowClasses(unit : IndexUnit) : Sequence(String)
	= unit.rowClasses.tokenize(' ')
/]

[query public submitLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).confirmLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).submitLabel
		else
			'unexpectedUnit'
		endif endif
/]


[query public fieldLabelClass(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).fieldLabelClass
		else
			null
		endif
/]

[query public fieldValueClass(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).fieldValueClass
		else
			null
		endif
/]

[query public hasCustomisedPlaceholder(field : UnitField) : Boolean
	= if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).hasCustomisedPlaceholder
		else if field.oclIsTypeOf(InterfaceField) then
			field.oclAsType(InterfaceField).hasCustomisedPlaceholder
		else
			false
		endif endif
/]

[query public hasFieldLabelClass(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			let feature : UnitFeature = field.oclAsType(UnitFeature)
				in not feature.fieldLabelClass.oclIsUndefined()
		else
			false
		endif
/]

[query public hasFieldValueClass(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			let feature : UnitFeature = field.oclAsType(UnitFeature)
				in not feature.fieldValueClass.oclIsUndefined()
		else
			false
		endif
/]

[query public hasInputGroupClass(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			let feature : UnitFeature = field.oclAsType(UnitFeature)
				in not feature.inputGroupClass.oclIsUndefined()
		else
			false
		endif
/]

[query public hasPlaceholder(field : UnitField) : Boolean
	= field.oclIsTypeOf(UnitAttribute) or field.oclIsTypeOf(InterfaceField)
/]

[query public id(association : UnitAssociation) : String
	= if association.childFeature.oclIsUndefined() then
			association.name.asId()
		else
			association.name.asId().concat('.').concat(association.childFeature.id())
		endif
/]

[query public id(child : FeatureChildPath) : String
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.id()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					association.name.asId()
				else
					association.name.asId().concat('.').concat(association.childFeature.id())
				endif
		endif
/]

[query public inputGroupClass(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).inputGroupClass
		else
			null
		endif
/]

[query public isConditionalDisplay(field : UnitField) : Boolean
	= not field.hideWhen.oclIsUndefined()
/]

[query public placeholder(field : UnitField) : String
	= if field.oclIsKindOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).placeholder
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).placeholder
		else
			null
		endif endif
/]

[query public styleClass(field : UnitField) : String
	= field.modelPropertyName().asId()
/]
