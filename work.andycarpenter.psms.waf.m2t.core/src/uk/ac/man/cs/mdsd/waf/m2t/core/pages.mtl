[comment encoding = UTF-8 /]
[module pages(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes]


[query public collectionUnits(page : Page) : Sequence(CollectionUnit)
	= page.dynamicUnits()->select(u | u.oclIsKindOf(CollectionUnit)).oclAsType(CollectionUnit)
/]

[query public controlUnits(page : Page) : Sequence(DynamicUnit)
	= page.dynamicUnits()
		->select(u | u.oclIsKindOf(ControlUnit)).oclAsType(DynamicUnit)
/]

[query public editUnits(page : Page) : Sequence(EditUnit)
	= page.dynamicUnits()
		->select(u | u.oclIsKindOf(EditUnit)).oclAsType(EditUnit)
/]

[query public formUnits(page : Page) : Sequence(SingletonUnit)
	= page.dynamicUnits()
		->select(u | u.oclIsKindOf(ControlUnit) or u.oclIsKindOf(EditUnit)).oclAsType(SingletonUnit)
/]

[query public galleryUnits(page : Page) : Sequence(GalleryUnit)
	= page.collectionUnits()->select(u | u.oclIsKindOf(GalleryUnit)).oclAsType(GalleryUnit)
/]

[query public hasCaptchaFields(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasCaptchaFields())->notEmpty()
/]

[query public hasChangableCollections(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasChangableCollections())->notEmpty()
/]

[query public hasDateFields(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasDateFields())->notEmpty()
/]

[query public hasEditUnits(page : Page) : Boolean
	= page.editUnits()->notEmpty()
/]

[query public hasFilters(page : Page) : Boolean
	= page.collectionUnits()->select(u | u.hasFilters())->notEmpty()
/]

[query public hasFormUnits(page : Page) : Boolean
	= page.formUnits()->notEmpty()
/]

[query public hasGalleryUnits(page : Page) : Boolean
	= page.galleryUnits()->notEmpty()
/]

[query public hasImageCardsUnits(page : Page) : Boolean
	= page.imageCardsUnits()->notEmpty()
/]

[query public hasImageUnits(page : Page) : Boolean
	= page.imageUnits()->notEmpty()
/]

[query public hasIndexUnits(page : Page) : Boolean
	= page.indexUnits()->notEmpty()
/]

[query public hasNoDynamicUnits(page : Page) : Boolean
	= page.dynamicUnits()->isEmpty()
/]

[query public hasPagination(page : Page) : Boolean
	= page.collectionUnits()->select(u | u.hasPagination())->notEmpty()
/]

[query public hasSliderUnits(page : Page) : Boolean
	= page.sliderUnits()->notEmpty()
/]

[query public hasTimeFields(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasTimeFields())->notEmpty()
/]

[query public imageCardsUnits(page : Page) : Sequence(ImageCardsUnit)
	= page.collectionUnits()->select(u | u.oclIsTypeOf(ImageCardsUnit)).oclAsType(ImageCardsUnit)
/]

[query public imageUnits(page : Page) : Sequence(ImageUnit)
	= page.collectionUnits()->select(u | u.oclIsKindOf(ImageUnit)).oclAsType(ImageUnit)
/]

[query public indexUnits(page : Page) : Sequence(IndexUnit)
	= page.collectionUnits()->select(u | u.oclIsKindOf(IndexUnit)).oclAsType(IndexUnit)
/]

[query public mapUnits(page : Page) : Sequence(MapUnit)
	= page.units->select(u | u.oclIsKindOf(MapUnit)).oclAsType(MapUnit)
/]

[query public nonDynamicUnits(page : Page) : Set(ContentUnit)
	= page.units->select(u | not u.oclIsKindOf(DynamicUnit))
/]

[query public repositories(page : Page) : Sequence(Repository)
	= page.dynamicUnits()->collect(u | u.repositoriesUsed)
		->asSet()
		->asSequence()
		->sortedBy(s | s.name)
/]
[query public services(page : Page) : Sequence(Service)
	= page.dynamicUnits()->collect(u | u.servicesUsed)
		->asSet()
		->asSequence()
		->sortedBy(s | s.name)
/]

[query public sliderUnits(page : Page) : Sequence(SliderUnit)
	= page.collectionUnits()->select(u | u.oclIsKindOf(SliderUnit)).oclAsType(SliderUnit)
/]


[query public model(field : UnitField) : WafModel
	= field.displayedOn.displayedOn.partOf
/]

[query public model(child : ChildPathAssociation) : WafModel
	= if child.eContainer().oclIsTypeOf(UnitAssociation) then
			child.eContainer().oclAsType(UnitAssociation).model()
		else
			child.eContainer().oclAsType(ChildPathAssociation).model()
		endif
/]