[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::uriRoutes/]


[query public routingType(unit : DynamicUnit) : Entity
	= unit.routingType(false)
/]

[query public routingType(unit : DynamicUnit, forCommonKeys : Boolean) : Entity
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).routingType()
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).routingType()
		else if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).routingType(forCommonKeys)
		else
			null
		endif endif endif
/]

[query public routingType(unit : CollectionUnit) : Entity
	=  if unit.selection.oclIsUndefined() then
			unit.contentType.parentEntity()
		else if unit.selection.selectPath->notEmpty() then
			unit.selection.selectionType.keyEntity()
		else
			unit.contentType.parentEntity()
		endif endif
/]

[query public routingType(unit : DetailsUnit) : Entity
	=  if unit.selection.oclIsUndefined() then
			unit.contentType.keyEntity()
		else if unit.selection.selectPath->notEmpty() then
			unit.selection.selectionType.keyEntity()
		else
			unit.contentType.keyEntity()
		endif endif
/]

[query public routingType(unit : SingletonUnit) : Entity
	= unit.routingType(false)
/]

[query public routingType(unit : SingletonUnit, forCommonKeys : Boolean) : Entity
	= if unit.oclIsTypeOf(CreateUnit) or unit.oclIsTypeOf(CreateUpdateUnit) and forCommonKeys then
			unit.contentType.parentEntity()
		else
			unit.contentType.keyEntity()
		endif
/]


[query public hasRouteParameters(page : Page) : Boolean
	= page.routeParameters()->notEmpty()
/]

[query public hasRouteParameters(unit : DynamicUnit) : Boolean
	= unit.routeParameters()->notEmpty()
/]

[query public hasRouteParameters(unit : DynamicUnit, selection : Selection) : Boolean
	= unit.routeParameters(selection)->notEmpty()
/]

[query public hasContainerRouteParameters(unit : DynamicUnit) : Boolean
	= unit.routeContainerParameters()->notEmpty()
/]

[query public hasCreateRouteParameters(unit : EditUnit) : Boolean
	= unit.routeCreateParameters()->notEmpty()
/]

[query public hasRouteParameters(action : Action) : Boolean
	= action.routeParameters()->notEmpty()
/]

[query public hasContainerRouteParameters(action : Action) : Boolean
	= action.routeContainerParameters()->notEmpty()
/]

[query public routeParameters(page : Page) : Sequence(Attribute)
	= if page.dynamicUnits->isEmpty() then
			Sequence{}
		else if page.dynamicUnits->size() = 1 then
			page.dynamicUnits->first().routeParameters()
		else
			page.dynamicUnits->subOrderedSet(2, page.dynamicUnits->size())->iterate(u;
				common : Sequence(Attribute) = page.dynamicUnits->first().routeParameters()
				| common->select(k | u.routeParameters()->includes(k)))
		endif endif
/]

[query public routeParameters(unit : DynamicUnit) : Sequence(Attribute)
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.routeParameters(unit.oclAsType(CollectionUnit).selection)
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.routeParameters(unit.oclAsType(DetailsUnit).selection)
		else
			unit.routeParameters(unit.contentType)
		endif endif
/]

[query public routeParameters(unit : DynamicUnit, selection : Selection) : Sequence(Attribute)
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.routeParameters(unit.contentType.parentEntity(), selection)
		else
			unit.routeParameters(unit.contentType, selection)
		endif
/]

[query private routeParameters(unit : DynamicUnit, routingType : Entity) : Sequence(Attribute)
	= unit.routeParameters(routingType, null)
/]

[query public routeParameters(unit : DynamicUnit, routingType : Entity, selection : Selection) : Sequence(Attribute)
	= if selection.oclIsUndefined() then
			if routingType.oclIsUndefined() then
				Sequence{}
			else
				unit.routeParameters(routingType.uriPathKeys(),
					routingType.uriPathKeys()->asSet())
			endif
		else
			unit.routeParameters(selection.selectionType.uriPathKeys(),
				selection.selectionKeys())
		endif
/]

[query public routeParameters(action : Action) : Sequence(Attribute)
	= if action.parentUnit.oclIsKindOf(CollectionUnit) then
			action.parentUnit.routeParameters(
				action.parentUnit.contentType,
				action.parentUnit.oclAsType(CollectionUnit).findElementSelection)
		else
			action.parentUnit.routeParameters(action.parentUnit.contentType, null)
		endif
/]

[query public routeCreateParameters(unit : EditUnit) : Sequence(Attribute)
	= if (unit.contentType.parentEntity().oclIsUndefined()) then
			Sequence{}
		else
			unit.routeParameters(
				unit.contentType.parentEntity().uriPathKeys(),
				unit.contentType.parentEntity().uriPathKeys()->asSet())
		endif
/]

[query public routeContainerParameters(unit : DynamicUnit) : Sequence(Attribute)
	= if unit.oclIsKindOf(CollectionUnit) then
			let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)
				in if collectionUnit.findContainerSelection.oclIsUndefined() then
						unit.routeContainerParameters(collectionUnit.selection)
					else
						unit.routeContainerParameters(collectionUnit.findContainerSelection)
					endif
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.routeContainerParameters(unit.oclAsType(DetailsUnit).selection)
		else
			unit.routeContainerParameters(unit.contentType.parentEntity(), Set{})
		endif endif
/]

[query private routeContainerParameters(unit : DynamicUnit, selection : Selection) : Sequence(Attribute)
	= if selection.oclIsUndefined() then
			unit.routeContainerParameters(unit.contentType.parentEntity(), Set{})
		else if selection.selectPath->notEmpty() then
			unit.routeContainerParameters(selection.selectionType, selection.selectionKeys())
		else
			unit.routeContainerParameters(unit.contentType.parentEntity(), selection.selectionKeys())
		endif endif
/]

[query private routeContainerParameters(unit : DynamicUnit, containerType : Entity, selectionKeys : Set(Attribute)) : Sequence(Attribute)
	= if containerType.oclIsUndefined() then
			Sequence{}
		else
			unit.routeParameters(containerType.uriPathKeys(), selectionKeys)
		endif
/]

[query public routeContainerParameters(action : Action) : Sequence(Attribute)
	= if action.parentUnit.oclIsKindOf(CollectionUnit) then
			action.parentUnit.routeParameters(
				action.parentUnit.contentType.parentEntity(),
				action.parentUnit.oclAsType(CollectionUnit).findContainerSelection)
		else
			action.parentUnit.routeParameters(action.parentUnit.contentType.parentEntity(), null)
		endif
/]

[query private routeParameters(unit : DynamicUnit, uriPathKeys : Sequence(Attribute), selectionKeys : Set(Attribute)) : Sequence(Attribute)
	= let keysWithActuals : Sequence(Attribute)
		= unit.routeActuals->collect(a | a.routeParameter)
		in uriPathKeys->select(k | not keysWithActuals->includes(k) and selectionKeys->includes(k))
/]

[query public routeParameters(resource : Resource) : Sequence(Attribute)
	= Sequence{}
/]


[query public hasRouteActual(unit : DynamicUnit, key : Attribute) : Boolean
	= not unit.routeActual(key).oclIsUndefined()
/]

[query public routeActual(unit : DynamicUnit, key : Attribute) : RouteActual
	= unit.routeActuals->any(a | a.routeParameter = key)
/]


[query public isDislayedOnlyOnExplicitRoute(unit : CollectionUnit) : Boolean
	= unit.oclAsType(DynamicUnit).isDislayedOnlyOnExplicitRoute()
/]

[query public isDislayedOnlyOnExplicitRoute(unit : DynamicUnit) : Boolean
	= not unit.oclIsKindOf(CreateUpdateUnit)
		and not unit.displayedOn.routeParameters()->includesAll(unit.routeParameters())
/]
