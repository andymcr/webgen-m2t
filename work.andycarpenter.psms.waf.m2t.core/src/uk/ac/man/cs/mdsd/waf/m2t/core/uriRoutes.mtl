[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::selection/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions]
[import uk::ac::man::cs::mdsd::waf::m2t::core::select]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units]


[query public routingType(unit : ContentUnit) : Entity
	= unit.routingType(false)
/]

[query public routingType(unit : ContentUnit, forCommonKeys : Boolean) : Entity
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).routingType()
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).routingType()
		else if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).routingType(forCommonKeys)
		else
			null
		endif endif endif
/]

[query public routingType(unit : CollectionUnit) : Entity
	=  if unit.selection.oclIsUndefined() then
			unit.contentType->first().parentEntity()
		else if unit.hasSelectPath() then
			unit.selection.selectionType().keyEntity()
		else if selection.parameters->notEmpty() then
			unit.selection.definedBy.serves.keyEntity()
		else
			unit.contentType->first().parentEntity()
		endif endif endif
/]

[query public routingType(unit : DetailsUnit) : Entity
	=  if unit.selection.oclIsUndefined() then
			unit.contentType.keyEntity()
		else if unit.hasSelectPath() then
			unit.selection.selectionType().keyEntity()
		else if selection.parameters->notEmpty() then
			unit.selection.definedBy.serves.keyEntity()
		else
			unit.contentType.keyEntity()
		endif endif endif
/]

[query public routingType(unit : SingletonUnit) : Entity
	= unit.routingType(false)
/]

[query public routingType(unit : SingletonUnit, forCommonKeys : Boolean) : Entity
	= if unit.oclIsTypeOf(CreateUnit) or unit.oclIsTypeOf(CreateUpdateUnit) and forCommonKeys then
			unit.contentType.parentEntity()
		else
			unit.contentType.keyEntity()
		endif
/]


[query public hasRouteParameters(page : Page) : Boolean
	= page.routeParameters()->notEmpty()
/]

[query public hasRouteParameters(unit : ContentUnit) : Boolean
	= unit.routeParameters()->notEmpty()
/]

[query public hasRouteParameters(unit : ContentUnit, selection : Selection) : Boolean
	= unit.routeParameters(selection)->notEmpty()
/]

[query public hasCreateRouteParameters(unit : EditUnit) : Boolean
	= unit.routeCreateParameters()->notEmpty()
/]

[query public hasRouteParameters(unit : ContentUnit, routingType : Entity) : Boolean
	= unit.routeParameters(routingType)->notEmpty()
/]

[query public hasRouteParameters(action : Action) : Boolean
	= action.routeParameters()->notEmpty()
/]

[query public routeParameters(page : Page) : Sequence(Attribute)
	= if page.units->isEmpty() then
			Sequence{}
		else if page.units->size() = 1 then
			page.units->first().routeParameters()
		else
			page.units->subOrderedSet(2, page.units->size())->iterate(u;
				common : Sequence(Attribute) = page.units->first().routeParameters()
				| common->select(k | u.routeParameters()->includes(k)))
		endif endif
/]

[query public routeParameters(unit : ContentUnit) : Sequence(Attribute)
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.routeParameters(unit.oclAsType(CollectionUnit).selection)
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.routeParameters(unit.oclAsType(DetailsUnit).selection)
		else
			unit.routeParameters(unit.routingType())
		endif endif
/]

[query public routeParameters(unit : ContentUnit, selection : Selection) : Sequence(Attribute)
	= if selection.oclIsUndefined() then
			unit.routeParameters(unit.routingType())
		else if selection.selectPath->notEmpty() then
			unit.routeParameters(selection.selectionType())
		else if selection.condition.oclIsUndefined() then
			unit.routeParameters(unit.routingType())
		else
			unit.routeParameters(unit.routingType().uriPathKeys(), selection.selectionKeys())
		endif endif endif
/]

[query public routeCreateParameters(unit : EditUnit) : Sequence(Attribute)
	= unit.routeParameters(unit.contentType.parentEntity())
/]

[query public routeParameters(unit : ContentUnit, routingType : Entity) : Sequence(Attribute)
	= if routingType.oclIsUndefined() then
			Sequence{}
		else
			unit.routeParameters(routingType.uriPathKeys())
		endif
/]

[query public routeParameters(unit : ContentUnit, routingType : Entity, selection : Selection) : Sequence(Attribute)
	= if routingType.oclIsUndefined() then
			Sequence{}
		else if selection.oclIsUndefined() then
			unit.routeParameters(routingType.uriPathKeys())
		else if selection.selectPath->notEmpty() then
			unit.routeParameters(selection.selectionType().uriPathKeys())
		else if selection.condition.oclIsUndefined() then
			unit.routeParameters(routingType.uriPathKeys())
		else
			unit.routeParameters(routingType.uriPathKeys(), selection.selectionKeys())					
		endif endif endif endif
/]

[query public routeParameters(action : Action) : Sequence(Attribute)
	= if action.unit().oclIsKindOf(CollectionUnit) then
			let collectionUnit : CollectionUnit = action.unit().oclAsType(CollectionUnit)
				in if not collectionUnit.findElementSelection.oclIsUndefined() then
						collectionUnit.routeParameters(collectionUnit.contentType(), collectionUnit.findElementSelection)
					else
						collectionUnit.routeParameters(collectionUnit.contentType().uriPathKeys())
					endif
		else if action.unit().oclIsKindOf(DetailsUnit) then
			action.unit().routeParameters(action.unit().routingType().uriPathKeys())
		else
			action.unit().routeParameters()
		endif endif
/]

[query private routeParameters(unit : ContentUnit, uriPathKeys : Sequence(Attribute)) : Sequence(Attribute)
	= unit.routeParameters(uriPathKeys, uriPathKeys->asSet())
/]

[query private routeParameters(unit : ContentUnit, uriPathKeys : Sequence(Attribute), selectionKeys : Set(Attribute)) : Sequence(Attribute)
	= let keysWithActuals : Sequence(Attribute)
		= unit.routeActuals->collect(a | a.routeParameter)
		in uriPathKeys->select(k | not keysWithActuals->includes(k) and selectionKeys->includes(k))
/]

[query public routeParameters(resource : Resource) : Sequence(Attribute)
	= Sequence{}
/]


[query public hasRouteActual(unit : ContentUnit, key : Attribute) : Boolean
	= not unit.routeActual(key).oclIsUndefined()
/]

[query public routeActual(unit : ContentUnit, key : Attribute) : RouteActual
	= unit.routeActuals->any(a | a.routeParameter = key)
/]
