[comment encoding = UTF-8 /]
[module actions(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units]


[query public actions(page : Page) : Sequence(Action)
	= page.dynamicUnits()->collect(u | u.actions())
/]

[query public actionsRequiringHandlers(page : Page) : Sequence(Action)
	= page.dynamicUnits()->collect(u | u.actionsRequiringHandlers())
/]

[query public fileActions(page : Page) : Sequence(OperationAction)
	= page.dynamicUnits()->collect(u | u.fileActions())
/]

[query public hasActions(page : Page) : Boolean
	= page.actions()->notEmpty()
/]

[query public hasActionsRequiringHandlers(page : Page) : Boolean
	= page.actionsRequiringHandlers()->notEmpty()
/]

[query public hasFileActions(page : Page) : Boolean
	= page.fileActions()->notEmpty()
/]


[query public actions(unit : DynamicUnit) : Sequence(Action)
	= unit.oclAsType(ActionContainer).actions()->asSequence()
/]

[query public actionsRequiringHandlers(unit : DynamicUnit) : Sequence(Action)
	= unit.oclAsType(ActionContainer).actionsRequiringHandlers()
/]

[query public fileActions(unit : DynamicUnit) : Sequence(OperationAction)
	= unit.oclAsType(ActionContainer).fileActions()
/]

[query public hasActionsRequiringHandlers(unit : DynamicUnit) : Boolean
	= unit.actionsRequiringHandlers()->notEmpty()
/]

[query public hasActions(unit : DynamicUnit) : Boolean
	= unit.actions()->notEmpty()
/]

[query public hasFileActions(unit : DynamicUnit) : Boolean
	= unit.fileActions()->notEmpty()
/]


[query public actions(feature : UnitFeature) : Sequence(Action)
	= feature.oclAsType(ActionContainer).actions()->asSequence()
/]

[query public actionsRequiringHandlers(feature : UnitFeature) : Sequence(Action)
	= feature.oclAsType(ActionContainer).actionsRequiringHandlers()
/]

[query public hasActions(feature : UnitFeature) : Boolean
	= feature.actions()->notEmpty()
/]


[query public actions(container : ActionContainer) : Sequence(Action)
	= container.actions->select(a | not a.disable)->asSequence()
/]

[query public actionsRequiringHandlers(container : ActionContainer) : Sequence(Action)
	= container.actions()
		->select(a | not a.oclIsTypeOf(SelectAction))
		->select(a | if a.oclIsKindOf(OperationAction) then
						not a.oclAsType(OperationAction).operation.oclIsUndefined()
					else
						true
					endif)
/]

[query public fileActions(container : ActionContainer) : Sequence(OperationAction)
	= container.operationActions()
		->select(a | a.operation.resultType = OperationResultTypes::File)
/]

[query private operationActions(container : ActionContainer) : Sequence(OperationAction)
	= container.actions()
		->select(a | a.oclIsKindOf(OperationAction)).oclAsType(OperationAction)
		->select(a | not a.operation.oclIsUndefined())
/]


[query public controller(action : Action) : Page
	= if action.oclIsTypeOf(SelectAction) then
			action.oclAsType(SelectAction).target.oclAsType(DynamicUnit).displayedOn
		else
			if action.usedBy.oclIsKindOf(DynamicUnit) then
				action.usedBy.oclAsType(DynamicUnit).displayedOn
			else
				null
			endif
		endif
/]

[query public requiresRole(action : Action) : String
	= if action.oclIsTypeOf(SelectAction) then
			action.oclAsType(SelectAction).target.oclAsType(DynamicUnit).requiresRole
		else if action.oclIsTypeOf(DeleteAction) then
			action.oclAsType(DeleteAction).requiresRole
		else if action.oclIsKindOf(OperationAction) then
			action.oclAsType(OperationAction).requiresRole
		else 
			''
		endif endif endif
/]

[query public unit(action : Action) : DynamicUnit
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit)
		else
			action.usedBy.oclAsType(UnitFeature).displayedOn
		endif
/]