[comment encoding = UTF-8 /]
[module featureProperties(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/Base',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units]


[query public entry(entries : Sequence(String), index : Integer) : String
	= if entries->size() < index then
			''
		else
			entries->drop(index - 1)->first()
		endif
/]


[query private usersOf(entity : Entity, model : WafModel) : Sequence(EditUnit)
	= model.pages->collect(
		p | p.units
			->select(u | u.oclIsKindOf(EditUnit)).oclAsType(EditUnit)
			->select(u | u.contentType = entity))
/]

[query private usersOf(entity : Entity, unit : EditUnit) : Sequence(EditUnit)
	= if unit.contentType = entity then
			Sequence{unit}
		else
			Sequence{}
		endif
/]


[query public parameterisedUnits(page : Page) : OrderedSet(DynamicUnit)
	= page.units->select(u | u.isParameterised())
/]

[query public filterParameters(unit : CollectionUnit) : Sequence(FormalParameter)
	= unit.supportedFilters->collect(q | q.parameters)
/]

[query public isParameterised(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(SelectableUnit) then
			let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
			in if dynamicUnit.contentType().oclIsUndefined() then
					dynamicUnit.contentType().keys->notEmpty()
				else
					false
				endif
		else
			false
		endif
/]