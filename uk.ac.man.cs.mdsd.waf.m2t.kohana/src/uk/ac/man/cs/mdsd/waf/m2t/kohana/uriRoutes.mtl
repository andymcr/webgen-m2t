[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]


[query public uriPath(service : Service) : String
	= service.keys->collect(k | k.routeParameterName())->sep('/<', '>/<', '>')->toString()
/]


[query public routeParameterName(feature : ServiceFeatureReference) : String
	= if feature.oclIsTypeOf(ServiceAttributeReference) then
			let reference : ServiceAttributeReference = feature.oclAsType(ServiceAttributeReference)
			in reference.attribute.partOf.modelName().toLowerFirst()
				.concat(reference.attribute.name.toUpperFirst())
		else
			let reference : ServiceAssociationReference = feature.oclAsType(ServiceAssociationReference)
			in if reference.childFeature.oclIsUndefined() then
					reference.association.partOf.modelName().toLowerFirst()
						.concat(reference.association.name)
				else
					reference.childFeature.routeParameterName()
				endif
		endif
/]


[query public uriPath(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			page.uriElement
		else if page.parentPage = page.partOf.homePage() then
			page.uriElement
		else
			let uriElement : String
				= if page.uriElement.oclIsUndefined() then
						''
					else if page.uriElement = '' then
						''
					else if page.uriElement.startsWith('/') then
						page.uriElement
					else
						'/'.concat(page.uriElement)
					endif endif endif
			in page.parentPage.uriPath().concat(uriElement)
		endif endif
/]


[query public hasRouteParameters(unit : ContentUnit) : Boolean
	= unit.uriPathKeys()->notEmpty()
/]

[query public hasUnitMethods(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(EditUnit) then
			true
		else if unit.oclIsKindOf(DataUnit) then
			unit.oclAsType(DataUnit).hasUriActions() or unit.oclIsTypeOf(DetailsUnit)
		else if unit.oclIsKindOf(AuthenticationUnit) then
			true
		else
			false
		endif endif endif
/]

[query public logoutUriPath(unit : LoginUnit) : String
	= unit.logoutActionName()
/]

[query public supportUriPath(unit : ContentUnit) : String
	= unit.uriPath().concat('/support')
/]

[query public uriPath(unit : ContentUnit) : String
	= unit.uriPath(false)
/]

[query public uriPath(unit : ContentUnit, create : Boolean) : String
	= let uriElement : String 
		= if not unit.oclIsKindOf(Selectable) or create then
					''
				else
					unit.oclAsType(DynamicUnit).service.uriPath()
				endif
			.concat(if unit.uriElement.oclIsUndefined() then
					''
				else if unit.uriElement = '' then
					''
				else
					'/'.concat(unit.uriElement)
				endif endif)
		in if not unit.oclIsKindOf(DynamicUnit) then
				Sequence{}
			else let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
				in if dynamicUnit.uriParent.oclIsUndefined() then
					dynamicUnit.pageDisplayedOn().uriPath().concat(uriElement)
				else
					dynamicUnit.uriParent.uriPath(false).concat(uriElement)
				endif
			endif
/]

[query public uriPathKeys(unit : ContentUnit) : Sequence(ServiceFeature)
	= if not unit.oclIsKindOf(DynamicUnit) then
			Sequence{}
		else let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
			in if unit.oclIsKindOf(Selectable) then
					dynamicUnit.service.keys->asSequence()
				else
					Sequence{}
				endif->union(if dynamicUnit.uriParent.oclIsUndefined() then
						Sequence{}
					else
						dynamicUnit.uriParent.uriPathKeys()
					endif)
		endif
/]

[query public uriPath(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(IndexUnit) then
		let indexUnit : IndexUnit
			= action.usedBy.oclAsType(IndexUnit)
			in indexUnit.containingUnit().uriPath()
				.concat(indexUnit.service.uriPath()).concat('/delete')
		else
			''
		endif
/]

