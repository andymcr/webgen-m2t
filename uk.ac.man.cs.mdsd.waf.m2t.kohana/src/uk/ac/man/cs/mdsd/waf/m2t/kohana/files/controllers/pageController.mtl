[comment encoding = UTF-8 /]
[module pageController(
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::authenticationMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::actionMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::controlMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::indexMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::searchMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::staticMethods/]


[template public generateController(page : Page)]
[file(page.controllerFilename(), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{

    [page.beforeMethod()/]

    [page.afterMethod()/]

	public function action_index()
	{
	}

[for (unit : ContentUnit | page.units)]
	[if (unit.hasUnitMethods())]
	[unit.unitMethods()/]

	[/if]
[/for]
[if (page.hasSupportActions())]
    [page.supportActionMethods()/]
[/if]
}
[/file]
[/template]


[template private beforeMethod(page : Page) post(trim())]
public function before()
{
[if (page.isAuthenticated())]
    [page.generateLoggedInCheck()/]

[/if]
    parent::before();

[if (page.hasParameterisedUnits())]
    $this->query_parameters = $this->request->query();

[/if]
    $this->template->title = '[page.displayLabel/]';
    $this->template->id = '[page.instanceName()/]';
[if (not page.styleClass.oclIsUndefined())]
    $this->template->style_class = '[page.styleClass/]';
[/if]
[if (page.hasMapUnits())]
    $this->template->scripts['['/][']'/] = 'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places';
[/if]
[if (page.hasCaptchaFields())]
    $this->template->scripts['['/][']'/] = 'https://www.google.com/recaptcha/api.js';
[/if]

[if (page.partOf.staticUnitsEditable.oclAsType(Boolean))]
	[for (unit : ContentUnit | page.units)]
    [unit.unitBefore()/]
	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits()->select(u | not u.oclIsKindOf(IndexUnit)))]
    [unit.unitBefore()/]
	[/for]
[/if]
}
[/template]

[template private afterMethod(page : Page) post(trim())]
public function after()
{
    if ($this->auto_render === TRUE)
    {
[if (not page.sideMenu.oclIsUndefined())]
        $this->template->sidebar = View::factory('menu/[page.sideMenu.instanceName()/]');
	[if (page.sideMenu.oclIsTypeOf(DynamicMenu))]
	[let dynamicMenu : DynamicMenu = page.sideMenu.oclAsType(DynamicMenu)]
        $this->template->sidebar->[page.sideMenu.instanceName()/] = ORM::factory('[dynamicMenu.service.modelName()/]')->[dynamicMenu.selection.instanceName()/]();
	[/let]
	[/if]
[/if]
[for (unit : ContentUnit | page.units)]

	    [unit.unitAfter()/]
[/for]
    }

    parent::after();
}
[/template]

[template private supportActionMethods(page : Page)]
[if (page.hasDataSupportActions())]
public function action_support()
{
	[for (action : UnitSupportAction | page.dataSupportActions())]
    if ($this->request->post('[action.name/]'))
    {
        /* [protected ('support.'.concat(action.name))]
         */
        /* [/protected]
         */
    }
	[/for]
}

[/if]
/* [protected (page.instanceName().concat('.support.'))]
 */
/* [/protected]
 */
[/template]