[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::controllers::controlMethods/]


[template public beforeMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[/let]
[/template]

[template public afterMethod(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.createAndBindTemplate()/]
[editUnit.bindVariable(true)/]
[editUnit.bindErrorMessage()/]
[editUnit.bindFieldErrors()/]
[if (unit.oclIsKindOf(Selectable))]
[editUnit.createAndBindRouteParameters()/]
[/if]
[for (association : UnitAssociation | editUnit.inputAssociations())]
$[association.optionsName()/] = $this->[association.optionsName()/]();
$[editUnit.templateInstanceName()/]->bind('[association.optionsName()/]', $[association.optionsName()/]);
[/for]
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsKindOf(AuthenticationUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.actionMethod()/]
[if (editUnit.hasInterfaceFields())]

[editUnit.unitRules()/]
[/if]
[for (association : UnitAssociation | editUnit.inputAssociations())]

[association.associationOptions()/]
[/for]
[/let]
[/template]

[template private actionMethod(unit : EditUnit) post(trim())]
[let firstService : Service = unit.services->first()]
public function action_[unit.actionName()/]()
{
[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]

[/if]
[if (unit.oclIsTypeOf(CreateUpdateUnit))]
[let createUpdateUnit : CreateUpdateUnit = unit.oclAsType(CreateUpdateUnit)]
	[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
    if ($this->request->post('clear'))
    {
        $this->redirect(Route::get('[unit.routeName(true)/]')->uri());
        return;
    }

	[/if]
[/let]
[/if]
    try
    {
[if (unit.oclIsKindOf(Selectable))]
        if ([for (key : ServiceFeatureReference | firstService.keys) separator(' || ')]
!empty($this->request->param('[key.routeParameterName()/]'))[/for])
            $this->[firstService.loadMethodName()/](TRUE);
        else
	[if (unit.hasDefaultValueFields())]
        {
            [unit.createVariable()/]
        }
	[else]
            [unit.createVariable()/]
	[/if]
[else]
        [unit.createVariable()/]
[/if]

        if ($this->request->method() == HTTP_Request::POST)
        {
[if (unit.hasCaptchaFields())]
            [unit.captchaCheck()/]
[/if]
[if (unit.hasInterfaceFields())]
            [unit.interfaceFieldValidation()/]
[/if]
            [unit.saveModel(firstService, true)/]
[if (unit.services->size() > 1)]
	[for (service : Service | unit.services->subOrderedSet(2, unit.services->size()))]
            if (isset($this->[service.instanceName()/]))
            {
                [unit.saveModel(service, false)/]
            }
	[/for]
[/if]
[if (not unit.oclAsType(EditUnit).confirmDestination.oclIsUndefined())]
            $this->redirect(Route::get('[unit.oclAsType(EditUnit).confirmDestination.routeName()/]')->uri());
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
		    [unit.clearModels()/]
		[if (unit.hasInterfaceFields())]
			[for (field : InterfaceField | unit.interfaceFields())]
            unset($this->[firstService.instanceName()/]->[field.modelPropertyName()/]);
			[/for]
		[/if]
	[/if]
[/if]
        }
    }
[if (unit.hasCaptchaFields())]
    [unit.catchCaptchaException()/]
[/if]
    [unit.catchSelectionException()/]
    [unit.catchValidationException()/]
}
[/let]
[/template]

[template private saveModel(unit : EditUnit, service : Service, firstModel : Boolean) post(trim())]
[unit.valuesFromFormToModel(service)/]
[if (unit.hasForcedValueFeatures())]
[unit.forcedFeatureValues()/]
[/if]
[if (unit.customiseValues)]
// [protected ('customise.values.'.concat(unit.instanceName()))]
// [/protected]
[/if]
[if (not service.parentService().oclIsUndefined())]
[let parentService : Service = service.parentService()]
[let columnName : String = service.parentAssociation(parentService).columnName()]
if (empty($this->[service.instanceName()/]->[columnName/]))
[if (firstModel)]
{
    $this->[parentService.loadMethodName()/]();
[/if]
    $this->[service.instanceName()/]->[columnName/] = $this->[parentService.instanceName()/]->id;
[if (firstModel)]
}
[/if]
[/let]
[/let]
[/if]
$this->[service.instanceName()/]->save([if (unit.hasInterfaceFields() and firstModel)]$extra_validation[/if]);
[/template]

[template private clearModels(unit : DynamicUnit) post(trim())]
$this->[unit.services->first().instanceName()/]->clear();
[if (unit.services->size() > 1)]
	[for (service : Service | unit.services->subOrderedSet(2, unit.services->size()))]
if (isset($this->[service.instanceName()/]))
{
    $this->[service.instanceName()/]->clear();
		[if (unit.hasDefaultValueFields(service))]
    [unit.unitDefaultValues(service)/]
		[/if]
}
	[/for]
[/if]
[/template]

[template private unitRules(unit : DynamicUnit) post(trim())]
private function unit_rules
{
[for (field : InterfaceField | unit.interfaceFields())]
    $this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
        'label' => '[field.displayLabel()/]',
        'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
    );
[/for]
}
[/template]


[template private associationOptions(association : UnitAssociation)]
public function [association.optionsName()/]()
{
    $options = array();
[if (association.isSingleton())]
    $options['['/][']'/] = "Please select";
[/if]
    foreach (ORM::factory('[association.serviceFeature.modelName()/]')->[if (association.selection.oclIsUndefined())]
find_all()[else]
[association.selection.instanceName()/](FALSE)[/if] AS $option)
        $options['['/]$option->id[']'/] = [if (association.label.oclIsUndefined())]
$option->defaultLabel()[else]
[association.label.label('$option')/][/if];
    return $options;
}
[/template]
