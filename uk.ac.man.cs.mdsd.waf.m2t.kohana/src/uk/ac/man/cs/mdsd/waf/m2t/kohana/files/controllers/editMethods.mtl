[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::files::controllers::controlMethods/]


[template public unitBefore(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
$this->[unit.instanceName()/] = ORM::factory('[unit.modelName()/]');
[editUnit.unitDefaultValues()/]
[/let]
[/template]

[template public unitAfter(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.createAndBindTemplate()/]
$[editUnit.templateInstanceName()/]->bind('[editUnit.instanceName()/]', $this->[editUnit.instanceName()/]);
[if (editUnit.oclIsKindOf(Selectable))]
[editUnit.oclAsType(Selectable).bindErrorMessage()/]
[/if]
[for (association : UnitAssociation | editUnit.inputAssociations())]
$[association.optionsName()/] = $this->[association.optionsName()/]();
$[editUnit.templateInstanceName()/]->bind('[association.optionsName()/]', $[association.optionsName()/]);
[/for]
[/let]
[/template]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsKindOf(AuthenticationUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[editUnit.actionMethod()/]
[if (editUnit.hasInterfaceFields())]

[editUnit.unitRules()/]
[/if]
[for (association : UnitAssociation | editUnit.inputAssociations())]

[association.associationOptions()/]
[/for]
[for (action : InlineAction | editUnit.uriActions())]
[action.generateActionMethod('$this->'.concat(editUnit.instanceName()).concat('_error'))/]

[/for]
[/let]
[/template]

[template private actionMethod(unit : EditUnit)]
public function action_[unit.actionName()/]()
{
[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancel()/]

[/if]
[if (unit.oclIsTypeOf(CreateUpdateUnit))]
[let createUpdateUnit : CreateUpdateUnit = unit.oclAsType(CreateUpdateUnit)]
	[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
    if ($this->request->post('clear'))
        return;

	[/if]
[/let]
[/if]
    try
    {
[if (unit.oclIsKindOf(Selectable))]
        [unit.oclAsType(Selectable).loadSelection(true)/]
[/if]
[if (unit.hasDefaultValueFields())]
        [unit.unitDefaultValues()/]
[/if]
[if (unit.oclIsKindOf(Selectable) or unit.hasDefaultValueFields())]

[/if]
        if ($this->request->method() == HTTP_Request::POST)
        {
            [unit.valuesFromFormToModel()/]
[if (unit.hasForcedValueFeatures())]
            [unit.forcedFeatureValues()/]
[/if]
[if (unit.hasCaptchaFields())]
            [unit.captchaCheck()/]
[/if]
[if (unit.hasInterfaceFields())]
            [unit.interfaceFieldValidation()/]
[/if]
            $this->[unit.instanceName()/]->save([if (unit.hasInterfaceFields())]$extra_validation[/if]);
[if (not unit.oclAsType(EditUnit).confirmDestination.oclIsUndefined())]
            $this->redirect(Route::get('[unit.oclAsType(EditUnit).confirmDestination.routeName()/]')->uri());
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
            $this->[unit.instanceName()/]->clear();
		[if (unit.hasInterfaceFields())]
			[for (field : InterfaceField | unit.interfaceFields())]
            unset($this->[unit.instanceName()/]->[field.modelPropertyName()/]);
			[/for]
		[/if]
	[/if]
[/if]
        }
    }
    [unit.catchValidationException()/]
[if (unit.hasCaptchaFields())]
    [unit.catchCaptchaException()/]
[/if]
}
[/template]

[template private catchValidationException(unit : EditUnit)]
catch (ORM_Validation_Exception $e)
{
    $this->[unit.instanceName()/]_field_errors = $e->errors('');
[if (unit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
    $unreported_field_errors = array_diff_key($this->[unit.instanceName()/]_field_errors, array([for
    (field : UnitField | unit.inputFields())
        separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (unit.hasInterfaceFields())], '_external' => ''[/if]));
    if (!empty($unreported_field_errors))
        $this->[unit.errorName()/] = print_r($unreported_field_errors, TRUE);
[/if]
[if (unit.hasEncryptedFeatures())]
    [unit.clearEncryptedFeatures()/]
[/if]
}
[/template]

[template public unitRules(unit : DynamicUnit) post(trim())]
private function unit_rules
{
[for (field : InterfaceField | unit.interfaceFields())]
    $this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
        'label' => '[field.displayLabel()/]',
        'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
    );
[/for]
}
[/template]


[template private associationOptions(association : UnitAssociation)]
public function [association.optionsName()/]()
{
    $options = array();
    $options['['/][']'/] = "Please select";
    foreach (ORM::factory('[association.serviceFeature.modelName()/]')->[if (association.selection.oclIsUndefined())]
find_all()[else]
[association.selection.instanceName()/](FALSE)[/if] AS $option)
        $options['['/]$option->id[']'/] = $option->[if (association.label.oclIsUndefined())]
defaultLabel()[else]
[association.label.label('$option')/]()[/if];
    return $options;
}
[/template]
