[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::templates::display/]


[template public generateLoggedInCheck(page : Page)
	? (not page.partOf.authentication.oclIsUndefined())
	post(trim())]
// Log::instance()->add(Log::DEBUG, '[page.name/] setting use of ssl ');
// use_ssl();
[if (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[let localAuthentication : LocalAuthenticationSystem = page.partOf.authentication.oclAsType(LocalAuthenticationSystem)]
if (!Auth::instance()->logged_in())
{
	Session::instance()->set('login_referrer', $this->request->uri());
	$this->redirect(Route::get('[if (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
TBC[elseif (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[page.partOf.authentication.oclAsType(LocalAuthenticationSystem).loginUnit.routeName()/][else]
TBC[/if]')->uri());
}
[/let]
[elseif (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
[let casAuthentication : CasAuthentication = page.partOf.authentication.oclAsType(CasAuthentication)]
[/let]
[/if]
[/template]


[template public detectInvalidSelectionX(unit : DynamicUnit) post(trim())]
if (!$this->[instanceName()/]->loaded())
    $this->[unit.service.errorName()/] = 'Invalid [unit.modelName()/] selection';
[/template]

[template public createAndBindTemplate(unit : ContentUnit) post(trim())]
$[unit.templateInstanceName()/] = View::factory('[unit.pageDisplayedOn().controllerName()/]/[unit.viewName()/]');
$this->template->unitViews['['/][']'/] = $[unit.templateInstanceName()/];
[if (unit.pageDisplayedOn().hasParameterisedUnits())]
$[unit.templateInstanceName()/]->bind('query_parameters', $this->query_parameters);
[/if]
[/template]

[template public createVariable(unit : DynamicUnit) post(trim())]
$this->[unit.service.instanceName()/] = ORM::factory('[unit.modelName()/]');
[if (unit.hasDefaultValueFields())]
[unit.unitDefaultValues()/]
[/if]
[/template]

[template public createVariableIfAbsent(unit : DynamicUnit) post(trim())]
if (!isset($this->[unit.service.instanceName()/]))
[if (unit.hasDefaultValueFields())]
{
    [unit.createVariable()/]
}
[else]
    [unit.createVariable()/]
[/if]
[/template]

[template public bindVariable(unit : DynamicUnit, createIfAbsent : Boolean) post(trim())]
[if (createIfAbsent)]
[unit.createVariableIfAbsent()/]
[/if]
$[unit.templateInstanceName()/]->bind('[unit.instanceName()/]', $this->[unit.service.instanceName()/]);
[/template]

[template public bindErrorMessage(unit : DynamicUnit) post(trim())]
if (!empty($this->[unit.service.errorName()/]))
    $[unit.templateInstanceName()/]->bind('[unit.service.errorName()/]', $this->[unit.service.errorName()/]);
[/template]

[template public bindFieldErrors(unit : DynamicUnit) post(trim())]
if (!empty($this->[unit.fieldErrorsName()/]))
    $[unit.templateInstanceName()/]->bind('[unit.fieldErrorsName()/]', $this->[unit.fieldErrorsName()/]);
[/template]

[template public createAndBindRouteParameters(unit : DynamicUnit) post(trim())]
[let parametersVariable : String = '$'.concat(unit.instanceName()).concat('_route_parameters')]
$[unit.instanceName()/]_route_parameters = array();
if ($this->[unit.service.instanceName()/]->loaded())
{
    [unit.service.routeParameters(parametersVariable)/]
}
[if (not unit.service.parentService().oclIsUndefined())]
else
{
    [unit.service.parentService().routeParameters(parametersVariable)/]
}
[/if]
$[unit.templateInstanceName()/]->bind('route_parameters', $[unit.instanceName()/]_route_parameters);
[/let]
[/template]

[template private routeParameters(service : Service, variable : String) post(trim())]
[if (not service.parentService().oclIsUndefined())]
[service.parentService().routeParameters(variable)/]
[/if]
[for (key : ServiceFeatureReference | service.keys)]
[variable/]['['/]'[key.routeParameterName()/]'[']'/] = [key.getValue('$this->'.concat(service.instanceName()))/];
[/for]
[/template]

[template public valuesFromFormToModel(unit : DynamicUnit) post(trim())]
$this->[unit.service.instanceName()/]->values($this->request->post(), array([for
	(field : UnitField | unit.nonResourceInputFeatures()->select(f | not f.isEncrypted()))
	separator (', ')][if (field.isLocation())]'[field.formName()/]_latitude', '[field.formName()/]_longitude'[else]'[field.formName()/]'[/if][/for]));
[/template]

[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
if (empty($this->[unit.service.instanceName()/]->[field.modelPropertyName()/]))
[if (field.oclIsTypeOf(UnitElement))]
    $this->[unit.service.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(IncludedAttribute).defaultValue.generateCriteria()/];
[else]
    $this->[unit.service.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.generateCriteria()/];
[/if]
[/for]
[/template]


[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : IncludedFeature | unit.forcedValueFeatures())]
	[if (feature.oclIsTypeOf(IncludedAttribute))]
$this->[unit.service.instanceName()/]->[feature.oclAsType(IncludedAttribute).attribute.columnName()/] = [feature.forcedValue.generateCriteria()/];
	[else]
$this->[unit.service.instanceName()/]->[feature.oclAsType(IncludedAssociation).association.columnName()/] = [feature.forcedValue.generateCriteria()/];
	[/if]
[/for]
[/template]

[template public captchaCheck(unit : DynamicUnit) post(trim())]
$captcha = $this->isCaptchaValid(
    $this->request->post('g-recaptcha-response'),
    Request::$client_ip); 
if (!$captcha['['/]'success'[']'/])
	throw new Captcha_Exception($captcha['['/]'error-codes'[']'/]);
[/template]

[template public catchSelectionException(unit : DynamicUnit)]
catch (Controller_SelectionException $se)
{
    $this->[unit.service.errorName()/] = $se->message();
[if (unit.hasEncryptedFeatures() or unit.hasInterfaceFields())]
[unit.exceptionCleanup()/]
[/if]
}
[/template]

[template public catchValidationException(unit : DynamicUnit)]
catch (ORM_Validation_Exception $e)
{
    $this->[unit.fieldErrorsName()/] = $e->errors('');
[if (unit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
    $unreported_field_errors = array_diff_key($this->[unit.fieldErrorsName()/], array([for
    (field : UnitField | unit.inputFields())
        separator (', ')][let fieldName : String = if field.oclIsKindOf(UnitElement) then
		field.oclAsType(UnitElement).serviceFeature.columnName()
	else
		field.modelPropertyName()
	endif]'[fieldName/]' => ''[/let][/for][if (unit.hasInterfaceFields())], '_external' => ''[/if]));
    if (!empty($unreported_field_errors))
        $this->[unit.service.errorName()/] = print_r($unreported_field_errors, TRUE);
[/if]
[if (unit.hasEncryptedFeatures() or unit.hasInterfaceFields())]
[unit.exceptionCleanup()/]
[/if]
}
[/template]

[template public catchCaptchaException(unit : DynamicUnit) post(trim())]
catch (Captcha_Exception $e)
{
    $this->[unit.fieldErrorsName()/] = ['['/][']'/];
[for (field : UnitField | unit.captchaFields())]
    $this->[unit.fieldErrorsName()/]['['/]'[field.modelPropertyName()/]'[']'/] = count($e->message()) == 1
        ? $e->message()['['/]0[']'/]
        : print_r($e->message(), TRUE);
[/for]
[if (unit.hasEncryptedFeatures() or unit.hasInterfaceFields())]
[unit.exceptionCleanup()/]
[/if]
}
[/template]

[template private exceptionCleanup(unit : DynamicUnit) post(trim())]
[if (unit.hasEncryptedFeatures())]
[unit.clearEncryptedFeatures()/]
[/if]
[if (unit.hasInterfaceFields())]
[unit.rememberInterfaceFields()/]
[/if]
[/template]

[template public interfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public clearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public rememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields()->select(f | not f.isEncrypted()))
	separator (', ')]'[field.formName()/]'[/for]));
[/template]