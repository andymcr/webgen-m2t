[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::criteria/]
[import uk::ac::man::cs::mdsd::waf::m2t::kohana::names/]


[template public generateLoggedInCheck(page : Page)
	? (not page.partOf.authentication.oclIsUndefined())
	post(trim())]
// Log::instance()->add(Log::DEBUG, '[page.name/] setting use of ssl ');
// use_ssl();
[if (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[let localAuthentication : LocalAuthenticationSystem = page.partOf.authentication.oclAsType(LocalAuthenticationSystem)]
if (!Auth::instance()->logged_in())
{
	Session::instance()->set('login_referrer', $this->request->uri());
	$this->redirect(Route::get('[if (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
TBC[elseif (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[page.partOf.authentication.oclAsType(LocalAuthenticationSystem).loginUnit.routeName()/][else]
TBC[/if]')->uri());
}
[/let]
[elseif (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
[let casAuthentication : CasAuthentication = page.partOf.authentication.oclAsType(CasAuthentication)]
[/let]
[/if]
[/template]


[template public loadSelection(target : Selectable) post(trim())]
[target.loadSelection(false)/]
[/template]

[template public loadSelection(target : Selectable, validate : Boolean) post(trim())]
[let unit : DynamicUnit = target.oclAsType(DynamicUnit)]
[if (target.parameters->size() > 0)]
	[if (target.parameters->size() = 1)]
	[let parameter : ServiceAttribute = target.parameters->first()]
if (!empty($this->request->param('[parameter.name/]')))
{
    $this->[unit.instanceName()/]->where('[parameter.name/]', '=', $this->request->param('[parameter.name/]'));
	[/let]
	[else]
if ([for (parameter : ServiceAttribute | target.parameters) separator(' || ')]
!empty($this->request->param('[parameter.name/]'))[/for])
{
		[for (parameter : ServiceAttribute | target.parameters)]
    if (!empty($this->request->param('[parameter.name/]')))
        $this->[unit.instanceName()/]->where('[parameter.name/]', '=', $this->request->param('[parameter.name/]'));
		[/for]
	[/if]
    $this->[unit.instanceName()/]->find();
	[if (validate)]
    [unit.checkSelection()/]
	[else]
    [unit.detectInvalidSelection()/]
	[/if]
}
[/if]
[/let]
[/template]

[template public checkSelection(unit : DynamicUnit) post(trim())]
[unit.detectInvalidSelection()/]
else if ($this->request->method() == HTTP_request::GET)
    $this->[unit.instanceName()/]->check();
[/template]

[template public detectInvalidSelection(unit : DynamicUnit) post(trim())]
if (!$this->[unit.instanceName()/]->loaded())
    $this->[unit.errorName()/] = 'Invalid [unit.modelName()/] selection';
[/template]


[template public createAndBindTemplate(unit : ContentUnit) post(trim())]
$[unit.templateInstanceName()/] = View::factory('[unit.pageDisplayedOn().controllerName()/]/[unit.instanceName()/]');
$this->template->unitViews['['/][']'/] = $[unit.templateInstanceName()/];
[if (unit.pageDisplayedOn().hasParameterisedUnits())]
$[unit.templateInstanceName()/]->bind('query_parameters', $this->query_parameters);
[/if]
[/template]

[template public bindErrorMessage(selectable : Selectable) post(trim())]
if (!empty($this->[selectable.errorName()/]))
    $[selectable.oclAsType(DynamicUnit).templateInstanceName()/]->bind('[selectable.errorName()/]', $this->[selectable.errorName()/]);
[/template]


[template public valuesFromFormToModel(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->values($this->request->post(), array([for
	(field : UnitField | unit.nonResourceInputFeatures()->select(f | not f.isEncrypted()))
	separator (', ')][if (field.isLocation())]'[field.formName()/]_latitude', '[field.formName()/]_longitude'[else]'[field.formName()/]'[/if][/for]));
[/template]

[template public unitDefaultValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitElement))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(IncludedAttribute).defaultValue.generateCriteria()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.generateCriteria()/];
[/if]
[/for]
[/template]


[template public forcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : IncludedFeature | unit.forcedValueFeatures())]
	[if (feature.oclIsTypeOf(IncludedAttribute))]
$this->[unit.instanceName()/]->[feature.oclAsType(IncludedAttribute).attribute.columnName()/] = [feature.forcedValue.generateCriteria()/];
	[else]
$this->[unit.instanceName()/]->[feature.oclAsType(IncludedAssociation).association.columnName()/] = [feature.forcedValue.generateCriteria()/];
	[/if]
[/for]
[/template]

[template public captchaCheck(unit : DynamicUnit) post(trim())]
$reCaptcha = new ReCaptcha('[unit.pageDisplayedOn().partOf.captchaSecretKey/]');
$resp = $reCaptcha->verifyResponse(
	Request::$client_ip, 
	$this->request->post('g-recaptcha-response') 
	); 
if ($resp == NULL || !$resp->success)
	throw new Captcha_Exception($resp->errorCodes);
[/template]

[template public catchCaptchaException(unit : DynamicUnit) post(trim())]
catch (Captcha_Exception $e)
{
    $this->[unit.instanceName()/]_field_errors = ['['/][']'/];
[for (field : UnitField | unit.captchaFields())]
    $this->[unit.instanceName()/]_field_errors['['/]'[field.modelPropertyName()/]'[']'/] = $e->message();
[/for]
[if (unit.hasEncryptedFeatures())]
    [unit.clearEncryptedFeatures()/]
[/if]
[if (unit.hasInterfaceFields())]
    [unit.rememberInterfaceFields()/]
[/if]
}
[/template]

[template public interfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public clearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public rememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields()->select(f | not f.isEncrypted()))
	separator (', ')]'[field.formName()/]'[/for]));
[/template]


[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
public function action_[deleteAction.actionName()/]()
{
	$[deleteAction.instanceName()/] = ORM::factory('[deleteAction.modelName()/]', $this->request->param('param'));
	if ($[deleteAction.instanceName()/]->loaded())
	{
		$[deleteAction.instanceName()/]->delete();
[if (not deleteAction.destination.oclIsUndefined())]
		$this->redirect(Route::get('[deleteAction.destination.routeName()/]')->uri());
[/if]
	}
	else
		[errorVariable/] = 'Invalid [deleteAction.modelName()/] identifier';
}
[/let]
[/template]

[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let supportAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
public function action_[action.actionName()/]()
{
	$[supportAction.instanceName()/] = ORM::factory('[supportAction.modelName()/]', $this->request->param('param'));
	if (!$[supportAction.instanceName()/]->loaded())
		[errorVariable/] = 'Invalid [supportAction.modelName()/] identifier';
	else
	{
		/* [protected ('support.'.concat(supportAction.actionName()))]
		 */
		/* [/protected]
		 */
	}
}
[/let]
[/template]

