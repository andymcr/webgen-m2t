[comment encoding = UTF-8 /]
[module collectionMethods(
	'http://andycarpenter.work/psm/Base',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import work::andycarpenter::psms::expression::m2t::core::expression/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]


[template public unitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[collectionUnit.actionMethod()/]
[if (not collectionUnit.inlineSelectCode())]

[collectionUnit.actionSupportMethods()/]
[/if]
[/let]
[/template]

[template public actionMethod(unit : CollectionUnit) post(trim())]
/**
 [unit.routeAnnotation()/]
[if (unit.isAuthorised)]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]([unit.actionMethodFormals()/]): Response
{
[if (unit.isDislayedOnlyOnExplicitRoute())]
    [unit.actionCore()/]

[/if]
    return $this->renderPage([unit.oclAsType(DynamicUnit).renderMethodActuals()/]);
}
[/template]

[template public actionCore(unit : CollectionUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[if (unit.inlineSelectCode())]
[unit.selectCode()/]
[else]
$this->[unit.selectName()/]([unit.selectMethodParameters()/]);
[/if]
[/template]

[template public actionSupportMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(CollectionUnit)) post(trim())]
[let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)]
[if (not collectionUnit.inlineSelectCode())]
private function [collectionUnit.selectName()/]([collectionUnit.selectMethodParameters(true)/]): void
{
    [collectionUnit.selectCode()/]
}
[/if]
[/let]
[/template]

[template private selectMethodParameters(unit : CollectionUnit) post(trim())]
[unit.selectMethodParameters(false)/]
[/template]

[template private selectMethodParameters(unit : CollectionUnit, formal : Boolean) post(trim())]
[if (unit.hasFilters or unit.hasPagination)][if (formal)]
Request [/if]$request[if (unit.hasRouteParameters())]
, [/if][/if]
[unit.routeParameterList()/]
[/template]

[template private selectionParameters(unit : CollectionUnit) post(trim())]
[if (unit.hasRouteParameters())]
[unit.routeParameterList()/][if (unit.hasPagination)]
, [/if][/if][unit.paginationActuals()/]
[/template]

[template private paginationActuals(unit : CollectionUnit) post(trim())]
[if (unit.hasPagination)]
	[if (unit.maximumPaginationSize > 0)]
([unit.pageVariable()/] - 1) * [unit.pageSizeVariable()/], [unit.pageSizeVariable()/]
	[else]
([unit.pageVariable()/] - 1) * [unit.defaultPaginationSize/], [unit.defaultPaginationSize/]
	[/if]
[/if]
[/template]

[template private selectCode(unit : CollectionUnit) post(trim())]
[if (unit.isContained)]
	[if (not unit.containingTypeLoadedElsewhere())]
[unit.containerInstanceVariable()/] = [unit.loadContainerInstance()/];
if (![unit.containerInstanceVariable()/]) {
    throw $this->createNotFoundException('The [unit.containingType.name/] does not exist');
}
	[/if]
	[if (unit.isConditionallyDisplayed)]
if (!([unit.hideWhen.controllerExpression(unit.instanceVariable(), unit.containerInstanceVariable())/])) {
    [unit.selectCode2()/]
}
	[else]
[unit.selectCode2()/]
	[/if]
[else]
[unit.selectCode2()/]
[/if]
[/template]

[template private selectCode2(unit : CollectionUnit) post(trim())]
[if (unit.hasPagination)]
[unit.notePage()/]
[/if]
[if (unit.hasFilters)]
[unit.filterSelect()/]
else
[/if]
[if (unit.hasFilters)]    [/if][if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
[unit.instanceVariable()/] = $this->[unit.selection.definedBy.instanceName()/]->[unit.selection.methodName/]([unit.selectionParameters()/]);
	[else]
[unit.instanceVariable()/] = $this->[unit.filter.selection.definedBy.instanceName()/]->[unit.filter.methodName/]([unit.selectionParameters()/]);
	[/if]
[else]
[unit.instanceVariable()/] = [unit.oclAsType(DynamicUnit).getContentRepository()/]->findAll([unit.paginationActuals()/]);
[/if]
[/template]

[template public notePage(unit : CollectionUnit) post(trim())]
[unit.pageVariable()/] = $request->query->getInt('[unit.paginationPageParameterName()/]', 1);
[if (unit.maximumPaginationSize > 0)]
[unit.pageSizeVariable()/] = min([unit.maximumPaginationSize/], $request->query->getInt('[unit.paginationSizeParameterName()/]', [unit.defaultPaginationSize/]));
[/if]
[/template]

[template private filterSelect(unit : CollectionUnit) post(trim())]
[for (filter : Filter | unit.supportedFilters) separator('else')]
if ($request->query->has('[filter.name/]Filter'))
    [unit.filterCall(filter)/]
[/for]
[/template]

[template private filterCall(unit : CollectionUnit, filter : Filter)]
[unit.instanceVariable()/] = [unit.oclAsType(DynamicUnit).getContentRepository()/]->[filter.methodName/](
[if (unit.hasRouteParameters(filter.selection))]
    [unit.routeParameterList(filter.selection)/][if(filter.parameters->notEmpty() or filter.selection.joins->isEmpty() or filter.selection.fields->isEmpty())]
, [/if]

[/if]
[for (parameter : FormalParameter | filter.parameters)]
    $request->query->get('[parameter.name/]')[if (i < filter.parameters->size() or unit.hasPagination)],[/if]
[/for]
[if (unit.hasPagination)]
    [unit.paginationActuals()/]
[/if]
);
[/template]

[template private loadCollection(unit : CollectionUnit) post(trim())]
[if (not unit.selection.oclIsUndefined())]
	[if (unit.filter.oclIsUndefined())]
[unit.instanceVariable()/] = $this->[unit.selection.definedBy.instanceName()/]->[unit.selection.methodName/]([unit.selectionParameters()/]);
	[else]
[unit.instanceVariable()/] = $this->[unit.filter.selection.definedBy.instanceName()/]->[unit.filter.methodName/]([unit.selectionParameters()/]);
	[/if]
[else]
[unit.instanceVariable()/] = [unit.oclAsType(DynamicUnit).getContentRepository()/]->findAll([unit.paginationActuals()/]);
[/if]
[/template]

[template public templateParameters(unit : CollectionUnit) post(trim())]
[if (not unit.displayedOn.hasSingleActionMethod() and not unit.isDislayedOnlyOnExplicitRoute())]
[unit.actionCore()/]
[/if]
[if (unit.isDislayedOnlyOnExplicitRoute())]
if (isset([unit.instanceVariable()/])) {
    [unit.templateParameters2()/]
}
[elseif (unit.isConditionallyDisplayed)]
if (!([unit.hideWhen.controllerExpression(unit.instanceVariable(), unit.containerInstanceVariable())/])) {
    [unit.templateParameters2()/]
}
[else]
[unit.templateParameters2()/]
[/if]
[/template]

[template private templateParameters2(unit : CollectionUnit) post(trim())]
[if (unit.isContained and not unit.containingTypeLoadedElsewhere())]
$parameters['['/]'[unit.oclAsType(DynamicUnit).containerParameter()/]'[']'/] = [unit.containerInstanceVariable()/];
[/if]
$parameters['['/]'[unit.oclAsType(DynamicUnit).instanceParameter()/]'[']'/] = [unit.instanceVariable()/];
[if (unit.hasPagination)]
$parameters['['/]'currentPage'[']'/] = [unit.pageVariable()/];
	[if (unit.maximumPaginationSize > 0)]
$parameters['['/]'pageCount'[']'/] = ceil([unit.instanceVariable()/]->count() / [unit.pageSizeVariable()/]);
$parameters['['/]'[unit.paginationSizeParameterName()/]'[']'/] = [unit.pageSizeVariable()/];
	[else]
$parameters['['/]'pageCount'[']'/] = ceil([unit.instanceVariable()/]->count() / [unit.defaultPaginationSize/]);
	[/if]
[/if]
[/template]

[query public pageNumberName(unit : CollectionUnit) : String
	= 'page'
/]

[template public pageVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionallyDisplayed)]
$[unit.pageNumberName()/]
[else]
$this->[unit.pageNumberName()/]
[/if]
[/template]

[query public pageSizeName(unit : CollectionUnit) : String
	= 'pageSize'
/]

[template public pageSizeVariable(unit : CollectionUnit) post(trim())]
[if (unit.inlineSelectCode() and not unit.oclAsType(DynamicUnit).isConditionallyDisplayed)]
$[unit.pageSizeName()/]
[else]
$this->[unit.pageSizeName()/]
[/if]
[/template]
