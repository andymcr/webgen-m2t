[comment encoding = UTF-8 /]
[module formType(
	'http://andycarpenter.work/psm/Base',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::repository::queryDoctrine/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[query private formEntities(model : WafModel) : Set(Entity)
	= model.pages
		->collect(p | p.units)
		->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
		->select(u | u.oclIsKindOf(EditUnit) or u.oclIsKindOf(ControlUnit))
		->collect(u | u.contentType)->asSet()
/]

[query private embeddedForms(model : WafModel) : Sequence(UnitAssociation)
	= model.formUnits
		->collect(u | u.displayFields)
		->select(f | f.isContains).oclAsType(UnitAssociation)
/]

[query private uniqueEnumerationFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.enumerationFields->asSet()->asSequence()
/]


[template public formTypes(model : WafModel)]
[for (entity : Entity | model.formEntities())]
	[for (form : SingletonUnit | entity.formsUsing(model))]
	[let sameModel : Sequence(SingletonUnit) = form.sameModel(model)]
		[if (form = sameModel->first())]
[form.entityFormType()/]
		[/if]
	[/let]
	[/for]
[/for]
[for (form : UnitAssociation | model.embeddedForms())]
[form.formType()/]
[/for]
[/template]

[template private entityFormType(unit : SingletonUnit)]
[file(unit.formTypeFilename(), false)]
[let dataInstance : String = unit.contentType.instanceName()]
<?php
namespace [unit.formNamespace()/];

[unit.useStatements()/]


class [unit.typeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
[if (unit.hasDynamicChoiceFields)]
        $[dataInstance/] = $options['['/]'data'[']'/] ?? null;

[/if]
[for (feature : UnitField | unit.displayFields->sortedBy(f | f.persistentFeature.name))]
        $builder->[feature.formField(dataInstance)/];
[/for]
[if (unit.contentType.allowFormTypeCustomisation)]

    // [protected ('form customisation')]
    // [/protected]
[/if]
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(array(
            'data_class' => '[unit.modelsNamespace()/]\[unit.modelName()/]'
        ));
    }
}
[/let]
[/file]
[/template]

[template public formType(association : UnitAssociation)]
[file(association.formTypeFilename(), false)]
<?php
namespace [association.formNamespace()/];

[association.useStatements()/]


class [association.typeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
[for (feature : Feature | association.association.targetType.features->select(f | not f.isContainer)->sortedBy(f | f.name))]
	[if (feature.oclIsKindOf(Attribute) and feature.isSingleton)]
        $builder->[feature.oclAsType(Attribute).formFeature()/];
 	[elseif (feature.oclIsKindOf(Attribute) and not feature.isSingleton)]
        $builder->[feature.oclAsType(Attribute).formFeature(false, false)/];
	[elseif (feature.oclIsKindOf(Association))]
        $builder->[feature.oclAsType(Association).formFeature(null, false, null, null)/];
	[/if]
[/for]
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(array(
            'data_class' => '[association.modelsNamespace()/]\[association.association.targetType.modelName()/]'
        ));
    }
}
[/file]
[/template]

[template private useStatements(unit : SingletonUnit) post(trim())]
[for (feature : UnitFeature | unit.uniqueEnumerationFeatures()->sortedBy(f | f.persistentFeature.name))]
use [feature.modelsNamespace()/]\[feature.enumerationType.modelName()/];
[/for]
[if (unit.hasAssociationFields and not unit.hasDynamicChoiceFields)]
use Doctrine\ORM\EntityRepository;
[/if]
[if (unit.hasAssociationFields)]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
[/if]
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (unit.hasBooleanFields)]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (unit.hasEnumerationFields)]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (unit.collectionFeatures->select(f | f.oclIsTypeOf(UnitAttribute) or f.isContains)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::DateOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::DateAndTime)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (unit.hasEmailFields)]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (unit.hasIntegerFields)]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (unit.hasObfuscatedFields)]
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
[/if]
[if (unit.hasStringFields or unit.hasUrlFields)]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (unit.hasTextareaFields)]
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
[/if]
[if (unit.dateFields->select(f | f.dateDetails = DateDetails::TimeOnly)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;
[if (unit.contentType.allowFormTypeCustomisation)]
// [protected ('custom.uses')]
// [/protected]
[/if]
[/template]

[template private useStatements(association : UnitAssociation) post(trim())]
[let features : OrderedSet(Feature) = association.association.targetType.features->select(f | not f.isContainer)]
[for (feature : Feature | features->select(f | f.isEnumerationFeature)->sortedBy(f | f.name))]
use [feature.modelsNamespace()/]\[feature.enumerationType.modelName()/];
[/for]
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
[if (features->select(f | f.isBooleanFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
[/if]
[if (features->select(f | f.isEnumerationFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
[/if]
[if (features->select(f | not f.isSingleton)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::DateOnly))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::DateAndTime))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
[/if]
[if (features->select(f | f.isEmailFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\EmailType;
[/if]
[if (features->select(f | f.isIntegerFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
[/if]
[if (features->select(f | f.isStringFeature or f.isUrlFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextType;
[/if]
[if (features->select(f | f.isTextareaFeature)->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
[/if]
[if (features->select(f | f.isDateFeature and (f.dateDetails = DateDetails::TimeOnly))->notEmpty())]
use Symfony\Component\Form\Extension\Core\Type\TimeType;
[/if]
use Symfony\Component\OptionsResolver\OptionsResolver;
[/let]
[/template]

[template private formField(field : UnitField, dataInstance : String)
	? (field.isAttributeField and field.isSingleton) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[attribute.attribute.formFeature()/]
[/let]
[/template]

[template private formFeature(feature : Attribute)
	? (feature.isSingleton) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
add('[attribute.modelPropertyName()/]', [attribute.interfaceType()/], array(
    'label' => '[attribute.partOf.oclAsType(Entity).id()/].labels.[attribute.id()/]',
    'translation_domain' => 'entity',
[if (not attribute.isRequired)]
    'required' => false,
[/if]
[if (attribute.isDateFeature)]
	[if (attribute.dateDetails = DateDetails::DateAndTime)]
    'date_widget' => 'single_text',
    'time_widget' => 'single_text',
	[elseif (attribute.dateDetails <> DateDetails::DateAndTime)]
    'widget' => 'single_text',
		[if (attribute.dateDetails = DateDetails::TimeOnly)]
    'with_seconds' => TRUE,
		[/if]
	[/if]
[elseif (attribute.isEnumerationFeature)]
    'choices' => [attribute.enumerationType.modelName()/]::values(),
    'placeholder' => 'actions.labels.select_one',
[/if]
[if (attribute.hasHtml5Attributes)]
    'attr' => array(
	[if (false)] [comment not attribute.placeholder.oclIsUndefined())/]
        'placeholder' => '[comment attribute.placeholder/]',
	[/if]
	[if (attribute.hasValidationPattern)]
        'pattern' => '[attribute.validationPattern/]',
	[/if]
    ),
[/if]
))
[/let]
[/template]

[template private formField(field : UnitField, dataInstance : String)
	? (field.isAttributeField and not field.isSingleton) post(trim())]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[attribute.attribute.formFeature(attribute.collectionUiAllowAdd, attribute.collectionUiAllowRemove)/]
[/let]
[/template]

[template private formFeature(feature : Attribute, allowUiAdd : Boolean, allowUiRemove : Boolean)
	? (not feature.isSingleton) post(trim())]
[let attribute : Attribute = feature.oclAsType(Attribute)]
add('[attribute.modelPropertyName()/]', CollectionType::class, array(
    'label' => '[attribute.partOf.oclAsType(Entity).id()/].labels.[attribute.id()/]',
    'translation_domain' => 'entity',
    'entry_type' => [attribute.interfaceType()/],
[if (allowUiAdd)]
    'allow_add' => true,
[/if]
[if (allowUiRemove)]
    'allow_delete' => true,
[/if]
[if (attribute.collectionOrmAllowAdd and attribute.collectionOrmAllowRemove)]
    'by_reference' => false,
[/if]
    'required' => false,
))
[/let]
[/template]

[template private interfaceType(attribute : Attribute) post(trim())]
[if (attribute.isBooleanFeature)]
CheckboxType::class
[elseif (attribute.isDateFeature)]
	[if (attribute.dateDetails = DateDetails::DateOnly)]
DateType::class
	[elseif (attribute.dateDetails = DateDetails::DateAndTime)]
DateTimeType::class
	[else]
TimeType::class
	[/if]
[elseif (attribute.isEmailFeature)]
EmailType::class
[elseif (attribute.isEnumerationFeature)]
ChoiceType::class
[elseif (attribute.isIntegerFeature)]
IntegerType::class
[elseif (attribute.isObfuscatedFeature)]
PasswordType::class
[elseif (attribute.isTextareaFeature)]
TextareaType::class
[else]
TextType::class
[/if]
[/template]

[template private formField(field : UnitField, dataInstance : String)
	? (field.isAssociationField and not field.isContains) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[association.association.formFeature(association.valueDisplay, association.hasDynamicChoices, association.options, dataInstance)/]
[/let]
[/template]

[template private formFeature(feature : Association, valueLabel : ModelLabel, hasDynamicChoices : Boolean, selection : Selection, dataInstance : String)
	? (not feature.isContains) post(trim())]
[let association : Association = feature.oclAsType(Association)]
add('[association.modelPropertyName()/]', EntityType::class, array(
    'label' => '[association.sourceType.id()/].labels.[association.id()/]',
    'translation_domain' => 'entity',
[if (not association.isSingleton or not association.isRequired)]
    'required' => false,
[/if]
    'class' => '[association.appName()/]:[association.modelName()/]',
[if (hasDynamicChoices)]
    'choices' => !is_null($[dataInstance/]) && !is_null($[dataInstance/]->[feature.getMethodName()/]())
        ? array(['['/]$[dataInstance/]->[feature.getMethodName()/]()[']'/])
        : array(),
[else]
	[if (not selection.oclIsUndefined())]
    [selection.options()/]
	[/if]
[/if]
    'choice_label' => [if (valueLabel.oclIsUndefined())]'defaultLabel'[else]'[valueLabel.name.toLowerFirst()/][if (not valueLabel.name.endsWith('Label'))]Label[/if]'[/if],
    'choice_translation_domain' => false,
[if (association.isSingleton)]
    'placeholder' => 'actions.labels.select_one',
[else]
    'multiple' => true,
[/if]
[if (association.sourceType.allowFormTypeCustomisation)]
// [protected ('custom.'.concat(association.modelPropertyName()))]
// [/protected]
[/if]
))
[/let]
[/template]

[template private options(selection : Selection) post(trim())]
'query_builder' => function (EntityRepository $er) {
    $queryBuilder = $er->createQueryBuilder('[selection.definedBy.serves.selectName()/]');
    return $queryBuilder
[for (join : Association | selection.joins)]
        ->join('[join.partOf.oclAsType(Entity).selectName()/].[join.modelPropertyName()/]', '[join.targetType.selectName()/]')
[/for]
[if (selection.ordering->notEmpty())]
        ->orderBy([selection.ordering->first().path.queryExpression()/], [selection.ordering->first().order()/])[if (selection.ordering->size() = 1 and selection.condition.oclIsUndefined())]
;[/if]

	[if (selection.ordering->size() > 1)]
		[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
        ->addOrderBy([order.path.queryExpression()/], [order.order()/])[if (selection.condition.oclIsUndefined())]
;[/if]

		[/for]
	[/if]
[/if]
[if (not selection.condition.oclIsUndefined())]
        ->where([selection.condition.queryExpression()/]);
[/if]
},
[/template]

[template private formField(field : UnitField, dataInstance : String)
	? (field.isAssociationField and field.isContains) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[if (association.isSingleton)]
add('[association.modelPropertyName()/]', [association.typeClassName()/]::class)
[else]
add('[association.modelPropertyName()/]', CollectionType::class, array(
    'entry_type' => [association.typeClassName()/]::class,
	[if (association.collectionUiAllowAdd)]
    'allow_add' => true,
	[/if]
	[if (association.collectionUiAllowRemove)]
    'allow_delete' => true,
	[/if]
	[if (association.association.collectionOrmAllowAdd and association.association.collectionOrmAllowRemove)]
    'by_reference' => false,
	[/if]
    'required' => false,
))
[/if]
[/let]
[/template]