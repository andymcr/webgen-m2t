[comment encoding = UTF-8 /]
[module security(
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::model/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public securityController(model : WafModel)]
[let security : Authentication = model.authentication]
[file(security.controllerFilename(model), false)]
<?php
[if (model.hasAPI())]
namespace [model.webControllersNamespace()/];
[else]
namespace [model.controllersNamespace()/];
[/if]

[if (model.isLocallyAuthenticated())]
[let localSecurity : LocalAuthenticationSystem = model.localAuthentication()]
use [localSecurity.modelsNamespace()/]\[security.userModelName()/];
use [localSecurity.formNamespace()/]\[localSecurity.changePasswordTypeClassName()/];
use [localSecurity.formNamespace()/]\[localSecurity.resetPasswordRequestTypeClassName()/];
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Bundle\FrameworkBundle\Controller\[model.baseControllerClassName()/];
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;
[/let]
[/if]
use Symfony\Component\Routing\Annotation\Route;
[if (model.isLocallyAuthenticated())]
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
[/if]


class [authentication.controllerClassName()/] extends [model.baseControllerClassName()/]
{
[if (model.isLocallyAuthenticated())]
    use ResetPasswordControllerTrait;

    private $resetPasswordHelper;

    public function __construct(ResetPasswordHelperInterface $resetPasswordHelper)
    {
        $this->resetPasswordHelper = $resetPasswordHelper;
    }

[/if]
    /**
     * @Route("/register", name="register")
     */
    public function register()
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }

    /**
     * @Route("/login", name="login", methods={"GET", "POST"})
     */
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        $error = $authenticationUtils->getLastAuthenticationError();
        $lastUsername = $authenticationUtils->getLastUsername();
        return $this->render('[security.securityViewDirectorySuffix()/]/login.html.twig', ['['/]
            'last_username' => $lastUsername,
            'error'         => $error,
        [']'/]);
    }

    /**
     * @Route("/logout", name="logout")
     */
    public function logout()
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }

[if (model.isLocallyAuthenticated())]
[let localSecurity : LocalAuthenticationSystem = model.localAuthentication()]
    /**
     * Display & process form to request a password reset.
     *
     * @Route("/reset-password", name="app_forgot_password_request")
     */
    public function request(Request $request, MailerInterface $mailer): Response
    {
        $form = $this->createForm([localSecurity.resetPasswordRequestTypeClassName()/]::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            return $this->processSendingPasswordResetEmail(
                $form->get('email')->getData(),
                $mailer
            );
        }

        return $this->render('[security.securityViewDirectorySuffix()/]/request.html.twig', ['['/]
            'requestForm' => $form->createView(),
        [']'/]);
    }

    /**
     * Confirmation page after a user has requested a password reset.
     *
     * @Route("/check-email", name="app_check_email")
     */
    public function checkEmail(): Response
    {
        // We prevent users from directly accessing this page
        if (!$this->canCheckEmail()) {
            return $this->redirectToRoute('app_forgot_password_request');
        }

        return $this->render('[security.securityViewDirectorySuffix()/]/check_email.html.twig', ['['/]
            'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
        [']'/]);
    }

    /**
     * Validates and process the reset URL that the user clicked in their email.
     *
     * @Route("/reset/{token}", name="app_reset_password")
     */
    public function reset(Request $request, UserPasswordEncoderInterface $passwordEncoder, string $token = null): Response
    {
        if ($token) {
            // We store the token in session and remove it from the URL, to avoid the URL being
            // loaded in a browser and potentially leaking the token to 3rd party JavaScript.
            $this->storeTokenInSession($token);

            return $this->redirectToRoute('app_reset_password');
        }

        $token = $this->getTokenFromSession();
        if (null === $token) {
            throw $this->createNotFoundException('No reset password token found in the URL or in the session.');
        }

        try {
            $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
        } catch (ResetPasswordExceptionInterface $e) {
            $this->addFlash('reset_password_error', sprintf(
                'There was a problem validating your reset request - %s',
                $e->getReason()
            ));

            return $this->redirectToRoute('app_forgot_password_request');
        }

        // The token is valid; allow the user to change their password.
        $form = $this->createForm([localSecurity.changePasswordTypeClassName()/]::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // A password reset token should be used only once, remove it.
            $this->resetPasswordHelper->removeResetRequest($token);

            // Encode the plain password, and set it.
            $encodedPassword = $passwordEncoder->encodePassword(
                $user,
                $form->get('plainPassword')->getData()
            );

            $user->setPassword($encodedPassword);
            $this->getDoctrine()->getManager()->flush();

            // The session is cleaned up after the password has been changed.
            $this->cleanSessionAfterReset();

            return $this->redirectToRoute('[model.homeUnit().routeName()/]');
        }

        return $this->render('[security.securityViewDirectorySuffix()/]/reset.html.twig', ['['/]
            'resetForm' => $form->createView(),
        [']'/]);
    }

    private function processSendingPasswordResetEmail(string $emailFormData, MailerInterface $mailer): RedirectResponse
    {
        $user = $this->getDoctrine()->getRepository(SecurityUser::class)->findOneBy(['['/]
            'email' => $emailFormData,
        [']'/]);

        // Marks that you are allowed to see the app_check_email page.
        $this->setCanCheckEmailInSession();

        // Do not reveal whether a user account was found or not.
        if (!$user) {
            return $this->redirectToRoute('app_check_email');
        }

        try {
            $resetToken = $this->resetPasswordHelper->generateResetToken($user);
        } catch (ResetPasswordExceptionInterface $e) {
            // If you want to tell the user why a reset email was not sent, uncomment
            // the lines below and change the redirect to 'app_forgot_password_request'.
            // Caution: This may reveal if a user is registered or not.
            //
            // $this->addFlash('reset_password_error', sprintf(
            //     'There was a problem handling your password reset request - %s',
            //     $e->getReason()
            // ));

            return $this->redirectToRoute('app_check_email');
        }

        $email = (new TemplatedEmail())
            ->from(new Address('info@salephoto.org.uk', 'SPS'))
            ->to($user->getEmail())
            ->subject('Your password reset request')
            ->htmlTemplate('[security.securityViewDirectorySuffix()/]/email.html.twig')
            ->context(['['/]
                'resetToken' => $resetToken,
                'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
            [']'/])
        ;

        $mailer->send($email);

        return $this->redirectToRoute('app_check_email');
    }

[/let]
[/if]
}
[/file]
[/let]
[/template]