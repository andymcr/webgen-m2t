[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::selection/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::select/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]


[query public hasCommonUriPaths(page : Page) : Boolean
	= if page.units->size() < 2 then
			true
		else if page.units->size() = 2 then
			page.units->first().uriPath() = page.units->last().uriPath()
		else
			page.units->subOrderedSet(2, page.units->size())->forAll(u | u.uriPath() = page.units->first().uriPath())
		endif endif
/]

[query public uriPath(page : Page) : String
	= if page.units->isEmpty() then
			page.uriPagePath()
		else
			page.uriPagePath()
				.combinePaths(page.units->first().uriPath())
		endif
/]

[query private uriPagePath(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			page.uriElement
		else
			page.parentPage.uriPagePath().combinePaths(page.uriElement)
		endif
/]

[query public uriPath(unit : ContentUnit) : String
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.uriPath(unit.oclAsType(CollectionUnit).selection)
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.uriPath(unit.oclAsType(DetailsUnit).selection)
		else
			unit.uriPath(unit.contentType())
		endif endif
/]

[query private uriPath(unit : ContentUnit, selection : Selection) : String
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.uriPath(unit.contentType().parentEntity(), selection)
		else
			unit.uriPath(unit.contentType(), selection)
		endif
/]

[query private uriPath(unit : ContentUnit, routingType : Entity) : String
	= unit.uriPath(routingType, unit.uriElement, unit.routeParameters())
/]

[query private uriPath(unit : ContentUnit, routingType : Entity, selection : Selection) : String
	= if selection.oclIsUndefined() then
			unit.uriPath(routingType, unit.uriElement, unit.routeParameters())
-- for collection unit selection type /= routing type
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType(), unit.uriElement, unit.routeParameters())
		else
			unit.uriPath(routingType, unit.uriElement, unit.routeParameters())
		endif endif
/]

[query private uriPath(unit : ContentUnit, routingType : Entity, suffix : String, routeParameters : Sequence(Attribute)) : String
	= if routingType.oclIsUndefined() then
			unit.displayedOn.uriPagePath()
				.combinePaths(suffix)
		else
			unit.displayedOn.uriPagePath()
				.combinePaths(routingType.keysPath(routeParameters))
				.combinePaths(suffix)
		endif
/]

[query public uriPath(action : Action, suffix : String) : String
	= if action.unit().oclIsKindOf(CollectionUnit) then
			action.uriPath(
				action.unit().oclAsType(CollectionUnit).findElementSelection,
				suffix)
		else
			action.unit().uriPath(action.unit().contentType(), suffix, action.routeParameters())
		endif
/]

[query private uriPath(action : Action, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			action.unit().uriPath(action.unit().contentType(), suffix, action.routeParameters())
		else if selection.selectPath->notEmpty() then
			action.unit().uriPath(selection.selectionType(), suffix, action.routeParameters())
		else
			action.unit().uriPath(action.unit().contentType(), suffix, action.routeParameters())
		endif endif
/]

[query public uriContainerPath(unit : ContentUnit, suffix : String) : String
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.uriContainerPath(
				unit.oclAsType(CollectionUnit).findContainerSelection,
				suffix)
		else
			unit.uriPath(unit.contentType().container(), suffix, unit.routeContainerParameters())
		endif
/]

[query private uriContainerPath(unit : ContentUnit, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			unit.uriPath(unit.contentType().container(), suffix, unit.routeContainerParameters())
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType(), suffix, unit.routeContainerParameters())
		else
			unit.uriPath(unit.contentType().container(), suffix, unit.routeContainerParameters())
		endif endif
/]

[query public uriContainerPath(action : OperationAction) : String
	= if action.unit().oclIsKindOf(CollectionUnit) then
			action.uriContainerPath(
				action.unit().oclAsType(CollectionUnit).findElementSelection,
				action.uriElement)
		else
			action.unit().uriPath(
				action.unit().contentType().container(),
				action.uriElement,
				action.routeContainerParameters())
		endif
/]

[query private uriContainerPath(action : Action, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			action.unit().uriPath(
				action.unit().contentType().container(),
				suffix,
				action.routeContainerParameters())
		else if selection.selectPath->notEmpty() then
			action.unit().uriPath(
				selection.selectionType().container(),
				suffix,
				action.routeContainerParameters())
		else
			action.unit().uriPath(
				action.unit().contentType().container(),
				suffix,
				action.routeContainerParameters())
		endif endif
/]

[query public uriCreatePath(unit : EditUnit, suffix : String) : String
	= unit.uriPath(unit.contentType(), suffix, unit.routeCreateParameters())
/]

[query private uriCreatePath(unit : EditUnit, selection : Selection, suffix : String) : String
	= if selection.oclIsUndefined() then
			unit.uriPath(unit.contentType(), suffix, unit.routeContainerParameters())
		else if selection.selectPath->notEmpty() then
			unit.uriPath(selection.selectionType(), suffix, unit.routeContainerParameters())
		else
			unit.uriPath(unit.contentType(), suffix, unit.routeContainerParameters())
		endif endif
/]

[query public uriGeneralPath(action : OperationAction) : String
	= action.unit().displayedOn.uriPagePath()
		.combinePaths(action.uriElement)
/]


[query private keysPath(elementType : Entity, routeParameters : Sequence(Attribute)) : String
	= let keyType : Entity = elementType.keyEntity()
		in if not keyType.isContained() then
				keyType.keyPath(routeParameters)
			else
				keyType.container().keysPath(routeParameters)
					.appendContainingAssociation(keyType)
					.combinePaths(keyType.keyPath(routeParameters))
			endif
/]

[query private keyPath(elementType : Entity, routeParameters : Sequence(Attribute)) : String
	= let activeKeys : Sequence(Attribute)
		= elementType.attributeKeys()
			->select(k | routeParameters->includes(k))
		in if activeKeys->isEmpty() then
				''
			else
				activeKeys
					->collect(k | k.routeParameterName(routeParameters))->sep('{', '}/{', '}')
					->toString()
			endif
/]


[query public uriPath(resource : Resource) : String
	= resource.uriPath(false)
/]

[query public uriPath(resource : Resource, basePath : Boolean) : String
	= resource.uriPath(basePath, resource)
/]

[query private uriPath(resource : Resource, baseUriOnly : Boolean, base : Resource) : String
	= let parentUri : String
		= if resource.parentResource.oclIsUndefined() then
				'/'
			else if baseUriOnly then
				resource.parentResource.uriPath()
			else
				resource.parentResource.uriPath(false, base)
			endif endif
		in let baseUri : String
			= parentUri.combinePaths(resource.uriElement)
			in if baseUriOnly then
					baseUri
				else
					baseUri.combinePaths(resource.repository.serves.keyEntity().keyPath(base))
				endif
/]

[query private keyPath(entity : Entity, base : Resource) : String
	= if entity.attributeKeys()->isEmpty() then
			''
		else
			entity.attributeKeys()
				->collect(k | k.routeParameterName(base))->sep('{', '}/{', '}')->toString()
		endif
/]


[query public uriPathValidatedKeys(page : Page) : Sequence(Attribute)
	= page.routeParameters()
		->select(k | not k .validationPattern.oclIsUndefined())
		->select(k | k.validationPattern <> '[^/]+')
/]

[query public hasValidatedRouteParameters(page : Page) : Boolean
	= page.uriPathValidatedKeys()->notEmpty()
/]

[query public uriPathValidatedKeys(unit : ContentUnit, parentPath : Boolean) : Sequence(Attribute)
	= let selectType : Entity
			= if not parentPath then
					unit.routingType()
				else
					unit.contentType().parentEntity()
				endif
		in if selectType.oclIsUndefined() then
				Sequence{}
			else
				selectType.uriPathKeys()
					->select(k | not k .validationPattern.oclIsUndefined())
					->select(k | k.validationPattern <> '[^/]+')
			endif
/]

[query public hasValidatedRouteParameters(unit : ContentUnit, parentPath : Boolean) : Boolean
	= unit.uriPathValidatedKeys(parentPath)->notEmpty()
/]


[query public routeParameterName(attribute : Attribute, parameters : Sequence(Attribute)) : String
	= if parameters->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.oclAsType(Entity).modelName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif
/]

[query public routeParameterName(attribute : Attribute, resource : Resource) : String
	= if resource.oclIsUndefined() then
			attribute.name
		else if resource.routeParameters()->select(k | k.name.toLowerCase() = attribute.name.toLowerCase())->size() < 2 then
			attribute.name
		else
			attribute.partOf.oclAsType(Entity).modelName().toLowerFirst()
				.concat(attribute.name.toUpperFirst())
		endif endif
/]


[query public combinePaths(path1 : String, path2 : String) : String
	= if path1 = '' then
			path2
		else if path2.oclIsUndefined() then
			path1
		else if path2 = '' then
			path1
		else if path1 ='/' then
			path1.concat(path2)
		else
			path1.concat('/').concat(path2)
		endif endif endif endif
/]

[query private appendContainingAssociation(path : String, keyEntity : Entity) : String
	= if keyEntity.containingAssociation().oclIsUndefined() then
			path
		else
			path.combinePaths(keyEntity.containingAssociation().opposite.name)
		endif
/]


[query private explicitHomeUnit(model : WafModel) : ContentUnit
	= let homeUnits : Sequence(ContentUnit)
		= model.pages
			->collect(p | p.units)
			->select(u | u.uriPath() = '')
		in if homeUnits->notEmpty() then
				homeUnits->first()
			else
				null
			endif
/]

[query public isHomeUnit(unit : ContentUnit) : Boolean
	= let explicitHome : ContentUnit
		= unit.displayedOn.partOf.explicitHomeUnit()
		in if not explicitHome.oclIsUndefined() then
				explicitHome = unit
			else 
				let homePage : Page
					= unit.displayedOn.partOf.homePage()
					in if homePage.units->notEmpty() then
							homePage.units->first() = unit
						else
							false
						endif
			endif
/]