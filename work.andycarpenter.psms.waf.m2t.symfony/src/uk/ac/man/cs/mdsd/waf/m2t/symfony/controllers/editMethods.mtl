[comment encoding = UTF-8 /]
[module editMethods(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/Base',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::controller/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit) and not unit.oclIsKindOf(SecurityUnit) and not unit.oclIsTypeOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[for (association : UnitAssociation | editUnit.associationFields)]
	[if (association.hasDynamicChoices)]
[association.optionsMethod(editUnit)/]

	[/if]
[/for]
[if (not editUnit.oclIsTypeOf(UpdateUnit))]
[editUnit.actionCreateMethod()/]

[/if]
[if (not editUnit.oclIsTypeOf(CreateUnit))]
[editUnit.actionUpdateMethod()/]

[/if]
[/let]
[/template]

[template private optionsMethod(association : UnitAssociation, unit : EditUnit) post(trim())]
/**
 [association.routeAnnotation(unit)/]
[if (unit.isAuthorised)]
 [unit.securityAnnotation()/]
[/if]
 */
public function [association.actionName()/]([association.optionsFilter.optionFormals()/])
{
    $selection = $this->[association.optionsFilter.selection.definedBy.instanceName()/]->[association.optionsFilter.methodName/]([association.optionsFilter.selectionActuals()/]);
    $matches = array();
    foreach ($selection as $option) {
        $matches['['/]$option->getId()[']'/] = $option->defaultLabel();
    }

    return new JsonResponse($matches);
}
[/template]

[template private optionFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.selection.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for][if (filter.selection.parameters->notEmpty() and filter.parameters->notEmpty())]
, [/if][for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private selectionActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.selection.parameters) separator(', ')]
$[parameter.name/][/for][if (filter.selection.parameters->notEmpty() and filter.parameters->notEmpty())]
, [/if][for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private actionCreateMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.displayedOn]
/**
 [unit.routeCreateAnnotation()/]
[if (unit.isAuthorised)]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]X([unit.actionMethodFormals()/]): Response
{
    [unit.actionCreateCore()/]

    return $this->renderPage([unit.renderMethodActuals()/]);
}
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(CreateUnit)) post(trim())]
[let createUnit : CreateUnit = unit.oclAsType(CreateUnit)]
[createUnit.actionCreateCore()/]
[/let]
[/template]

[template private actionCreateCore(unit : EditUnit) post(trim())]
[let sourceParameters : Sequence(Attribute) = unit.routeParameters()]
$[unit.instanceName()/] = [unit.createInstance()/];
$this->[unit.instanceName()/] = [unit.createForm(sourceParameters)/];
[if (unit.customiseValues or unit.hasForcedValueFields
	or (unit.isContained and not unit.hasExplicitlyEditedContainer))]
if ($request->isMethod('POST')) {
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancelPost()/]
	[/if]
    [unit.customValuesBody('add', sourceParameters)/]
}
[else]
$this->[unit.instanceName()/]->handleRequest($request);
	[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
	[/if]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
    [unit.saveBody(sourceParameters)/]
}
[/if]
[/let]
[/template]

[template private actionUpdateMethod(unit : EditUnit) post(trim())]
[let page : Page = unit.displayedOn]
[let suffix : String
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			unit.oclAsType(CreateUpdateUnit).updateUriElement
		else
			unit.uriElement
		endif]
/**
 [unit.routeUpdateAnnotation(suffix)/]
[if (unit.isAuthorised)]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]([unit.actionMethodUpdateFormals()/]): Response
{
    [unit.actionUpdateCore()/]

    return $this->renderPage([unit.renderMethodUpdateActuals()/]);
}
[/let]
[/let]
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(UpdateUnit)) post(trim())]
[let updateUnit : UpdateUnit = unit.oclAsType(UpdateUnit)]
[updateUnit.actionUpdateCore()/]
[/let]
[/template]

[template private actionUpdateCore(unit : EditUnit) post(trim())]
[let sourceParameters : Sequence(Attribute) = unit.routeUpdateParameters()]
$[unit.instanceName()/] = [unit.loadUpdateInstance()/];
if (!$[unit.instanceName()/]) {
    throw $this->createNotFoundException('The [unit.contentType.name/] does not exist');
}
[for (field : UnitField | unit.formFields->select(f | f.isContains))]
[let association : Association = field.persistentFeature.oclAsType(Association)]
$original[field.instanceName().toUpperFirst()/] = new ArrayCollection();
foreach ($[unit.instanceName()/]->[field.persistentFeature.getMethodName()/]() as $[association.targetType.instanceName()/])
    $original[field.instanceName().toUpperFirst()/]->add($[association.targetType.instanceName()/]);
[/let]
[/for]
$this->[unit.instanceName()/] = [unit.updateForm(sourceParameters)/];
[if (unit.customiseValues or unit.hasForcedValueFields or unit.hasDisabledFields)]
if ($request->isMethod('POST')) {
	[if (not unit.cancelDestination.oclIsUndefined())]
    [unit.handleCancelPost()/]
	[/if]
    [unit.customValuesBody('edit', sourceParameters)/]
}
[else]
$this->[unit.instanceName()/]->handleRequest($request);
	[if (not unit.cancelDestination.oclIsUndefined())]
[unit.handleCancelSubmit()/]
	[/if]
if ($this->[unit.instanceName()/]->isSubmitted() && $this->[unit.instanceName()/]->isValid()) {
	[for (field : UnitField | unit.formFields->select(f | f.isContains))]
	[let association : Association = field.persistentFeature.oclAsType(Association)]
    foreach ($original[field.instanceName().toUpperFirst()/] as $[association.targetType.instanceName()/])
        if (false === $[unit.instanceName()/]->[field.persistentFeature.getMethodName()/]()->contains($[association.targetType.instanceName()/]))
            $this->[association.targetType.repository.instanceName()/]->remove($[association.targetType.instanceName()/]);
	[/let]
	[/for]
    [unit.saveBody(sourceParameters)/]
}
[/if]
[/let]
[/template]

[template private customValuesBody(unit : EditUnit, customTag : String, sourceParameters : Sequence(Attribute)) post(trim())]
[if (unit.customiseValues)]
// [protected ('customise.values.'.concat(unit.instanceName()).concat('.').concat(customTag))]
// [/protected]
[/if]
[if (unit.hasForcedValueFields)]
// forced values [comment unit.forcedFeatureValues()/]
[/if]
[if (unit.isContained and customTag = 'add')]
[unit.setContainer()/]
[/if]
$this->[unit.instanceName()/]->submit($request->request->get($this->[unit.instanceName()/]->getName()), false);
foreach ($this->validatorService->validate($[unit.instanceName()/]) as $violation) {
    $path = $violation->getPropertyPath();
   	$this->[unit.instanceName()/]->get($path)->addError(new FormError($violation->getMessage()));
}
if ($this->[unit.instanceName()/]->isValid()) {
    [unit.saveBody(sourceParameters)/]
}
[/template]

[template private createForm(unit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[let page : Page = unit.displayedOn]
$this->createForm([unit.typeClassName()/]::class, $[unit.instanceName()/], array(
    'action' => $this->generateUrl('[unit.routeName()/]'[if (page.hasFilters or page.hasPagination)], [if (not unit.hasRouteParameters())]
$request->query->all()[else]
array_merge(
        $request->query->all(),
        array(
            [unit.routeActualParameters(sourceParameters)/]
    ))[/if]
[else]
	[if (unit.hasRouteParameters())]
, array(
        [unit.routeActualParameters(sourceParameters)/]
    )[/if]
[/if]),
))
[/let]
[/template]

[template private updateForm(unit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[let page : Page = unit.displayedOn]
$this->createForm([unit.typeClassName()/]::class, $[unit.instanceName()/], array(
    'action' => $this->generateUrl('[unit.routeUpdateName()/]'[if (page.hasFilters or page.hasPagination)], [if (not unit.hasRouteUpdateParameters())]
$request->query->all()[else]
array_merge(
        $request->query->all(),
        array(
            [unit.routeActualUpdateParameters(sourceParameters)/]
    ))[/if]
[else]
	[if (unit.hasRouteUpdateParameters())]
, array(
        [unit.routeActualUpdateParameters(sourceParameters)/]
    )[/if]
[/if]),
))
[/let]
[/template]

[template public setContainer(unit : EditUnit) post(trim())]
[let modelPropertyName : String = unit.contentType.containingAssociation.modelPropertyName().toUpperFirst()]
[let parentRepository : Repository = unit.contentType.containingType.repository]
$[unit.instanceName()/]->set[modelPropertyName/]([unit.getContainerRepository()/]->[unit.containingType.findMethodName()/]([unit.routeParameterList()/]));
[/let]
[/let]
[/template]

[template private saveBody(unit : EditUnit, sourceParameters : Sequence(Attribute)) post(trim())]
[unit.getContentRepository()/]->save($[unit.instanceName()/], true);
[if (not unit.confirmDestination.oclIsUndefined())]
return [unit.confirmDestination.redirect()/];
[else]
	[if (not unit.onSaveContinueEditing)]
return [unit.redirectCreate(unit.routeSaveName(), sourceParameters)/];
	[/if]
[/if]
[/template]

[template public templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (editUnit.displayedOn.units->size() > 1 or editUnit.oclIsTypeOf(CreateUpdateUnit))]
if (!isset($this->[editUnit.instanceName()/])) {
    $[editUnit.instanceName()/] = [editUnit.createInstance()/];
    $this->[editUnit.instanceName()/] = [editUnit.createForm(editUnit.routeParameters())/];
}
[/if]
$parameters['['/]'[editUnit.instanceName()/]'[']'/] = $this->[editUnit.instanceName()/]->createView();
[/let]
[/template]