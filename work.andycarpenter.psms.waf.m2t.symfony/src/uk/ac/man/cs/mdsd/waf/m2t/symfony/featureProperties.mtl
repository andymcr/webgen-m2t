[comment encoding = UTF-8 /]
[module featureProperties(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import work::andycarpenter::psms::expression::m2t::core::expression/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::model/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::select]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[query public embeddedForms(model : WafModel) : Sequence(UnitAssociation)
	= model.formUnits()
		->collect(u | u.displayFields)
		->select(f | f.isContains()).oclAsType(UnitAssociation)
/]

[query public formEntities(model : WafModel) : Set(Entity)
	= model.pages
		->collect(p | p.units)
		->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
		->select(u | u.oclIsKindOf(EditUnit) or u.oclIsKindOf(ControlUnit))
		->collect(u | u.contentType())->asSet()
/]

[query public userRepository(model : WafModel) : Repository
	= if model.isLocallyAuthenticated() then
			model.localAuthentication().user.repository
		else if model.isCasAuthenticated() then
			model.casAuthentication().user.repository
		else
			null
		endif endif
/]

[query public unitsNeedingModels(model : WafModel) : Sequence(DynamicUnit)
	= model.pages->collect(p | p.units)
	->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
	->select(u | u.hasInterfaceFields() or u.hasDefaultValueFields())
/]


[query public hasExplicitValidation(page : Page) : Boolean
	= page.editUnits()->select(u | u.hasExplicitValidation())->notEmpty()
/]


[query public uniqueEnumerationFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.enumerationFeatures()->asSet()->asSequence()
/]

[query public hasExplicitValidation(unit : EditUnit) : Boolean
	= let commonValidation : Boolean
		= unit.customiseValues or unit.hasForcedValueFeatures()
		in let addValidation : Boolean
			= unit.isContained() and not unit.displayedAssociations()->includes(unit.containingAssociation())
			in let editValidation : Boolean
				= unit.hasDisabledFeatures()
				in if unit.oclIsTypeOf(CreateUnit) then
						commonValidation or addValidation
					else if unit.oclIsTypeOf(UpdateUnit) then
						commonValidation or editValidation
					else
						commonValidation or addValidation or editValidation
					endif endif
/]


[query public alias(field : UnitField) : String
	= if field.oclIsKindOf(InterfaceField) then
			null
		else if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).alias()
		else
			field.oclAsType(UnitAssociation).alias()
		endif endif
/]

[query public alias(attribute : UnitAttribute) : String
	= if attribute.displayedOn.oclIsKindOf(CollectionUnit) then
			let unit : CollectionUnit = attribute.displayedOn.oclAsType(CollectionUnit)
				in if unit.selection.oclIsUndefined() then
						null
					else
						attribute.attribute.alias(unit.selection)
					endif
		else if attribute.displayedOn.oclIsKindOf(DetailsUnit) then
			let unit : DetailsUnit = attribute.displayedOn.oclAsType(DetailsUnit)
				in if unit.selection.oclIsUndefined() then
						null
					else
						attribute.attribute.alias(unit.selection)
					endif
		else
			null
		endif endif
/]

[query public alias(association : UnitAssociation) : String
	= null
/]