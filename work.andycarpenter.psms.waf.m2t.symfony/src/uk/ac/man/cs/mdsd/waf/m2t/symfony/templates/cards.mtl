[comment encoding = UTF-8 /]
[module cards(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::badge/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::collection/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::data/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::image/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::titles/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let accessor : String = cardsUnit.instanceName()]
[file(cardsUnit.viewFilename(), false)]
{% trans_default_domain "entity" %}
<section class="[cardsUnit.styleClass/]" id="[cardsUnit.instanceName()/]">
[if (not cardsUnit.omitCaption)]
 <h4 class="[cardsUnit.captionClass/]">[cardsUnit.unitTitle()/]</h4>
[/if]
[if (cardsUnit.hasFilters())]
 [cardsUnit.unitFilters()/]
[/if]
[if (cardsUnit.hasPagination()
		and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Below)]
 [cardsUnit.pagination()/]
[/if]
[if (cardsUnit.selection.grouping->isEmpty())]
 <div class="[cardsUnit.contentClass/]">
  [cardsUnit.unitContent(null, accessor, 0)/]
 </div>
[else]
 {% set [cardsUnit.selection.grouping->first().name/] = null %}
 [cardsUnit.unitContent(null, accessor, 0)/]
 {% if [accessor/] | length > 0 %}
 </div>
 {% endif %}
[/if]
[if (cardsUnit.hasPagination()
		and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Above)]
 [cardsUnit.pagination()/]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]

[template private unitContent(unit : ContentUnit, nullDisplayValue : String, accessor : String, depthIndex : Integer)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let variable : String = cardsUnit.contentType().instanceName()]
{% for [variable/] in [accessor/] %}
[if (cardsUnit.selection.grouping->notEmpty())]
 {% if [cardsUnit.selection.grouping->first().name/] != [variable/].enteredIn.title %}
  {% if [cardsUnit.selection.grouping->first().name/] is not null %}
 </div>
  {% endif %}
 {% set [cardsUnit.selection.grouping->first().name/] = [variable/].enteredIn.title %}
 <h5>{{ [variable/].enteredIn.title }}</h5>
 <div class="row">
 {% endif%}
[/if]
<div class="[cardsUnit.columnClass/]">
 <div class="[cardsUnit.cardClass/]">
[if (cardsUnit.oclIsTypeOf(TextCardsUnit))]
[let textUnit : TextCardsUnit = cardsUnit.oclAsType(TextCardsUnit)]
	[if (not textUnit.elementTitle.oclIsUndefined() or textUnit.displayFields->notEmpty())]
  [textUnit.cardContent(variable)/]
	[/if]
[/let]
[elseif (cardsUnit.oclIsTypeOf(DateCardsUnit))]
[let dateUnit : DateCardsUnit = cardsUnit.oclAsType(DateCardsUnit)]
  [dateUnit.dateImage(variable)/]
	[if (not dateUnit.elementTitle.oclIsUndefined() or dateUnit.displayFields->notEmpty())]
  [dateUnit.cardContent(variable)/]
	[/if]
[/let]
[elseif (cardsUnit.oclIsTypeOf(ImageCardsUnit))]
[let imageUnit : ImageCardsUnit = cardsUnit.oclAsType(ImageCardsUnit)]
  [imageUnit.cardImage(variable)/]
	[if (not imageUnit.overlayTitle and not imageUnit.elementTitle.oclIsUndefined() or imageUnit.displayFields->notEmpty())]
  [imageUnit.cardContent(variable)/]
	[/if]
[/let]
[/if]
[if (cardsUnit.hasInlineActions())]
	[if (not cardsUnit.overlaySingleSelectAction or cardsUnit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() > 1)]
  [cardsUnit.cardActions(variable)/]
	[/if]
[/if]
 </div>
</div>
{% endfor %}
[/let]
[/let]
[/template]

[template private dateImage(unit : DateCardsUnit, variable : String) post(trim())]
<div class="card-image">
[if (unit.badges->notEmpty())]
	[for (badge : Badge | unit.badges)]
 [badge.badge(variable)/]
	[/for]
[/if]
[if (unit.overlaySingleSelectAction and unit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() = 1)]
[let action : InlineAction = unit.inlineActions()->first()]
 [action.actionLink(unit.contentType(), variable, unit.dateIcon(variable), null, variable, unit.hasObjectAccess())/]
[/let]
[else]
 [unit.dateIcon(variable)/]
[/if]
</div>
[/template]

[template private dateIcon(unit : DateCardsUnit, variable : String) post(trim())]
<time datetime="{{ [unit.elementDate.accessor(variable, unit.selection)/] | date }}" class="xxxx">
 <em>{{ [unit.elementDate.accessor(variable, unit.selection)/] | date('l') }}</em>
 <strong>{{ [unit.elementDate.accessor(variable, unit.selection)/] | date('j') }}</strong>
 <em>{{ [unit.elementDate.accessor(variable, unit.selection)/] | date('F') }}</em>
</time>
[/template]

[template private cardImage(unit : ImageCardsUnit, variable : String) post(trim())]
[let imageClass : String = if unit.enableImageEnlargement then 'materialboxed' else '' endif]
<div class="card-image">
[if (unit.badges->notEmpty())]
	[for (badge : Badge | unit.badges)]
 [badge.badge(variable)/]
	[/for]
[/if]
[if (unit.overlaySingleSelectAction and unit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() = 1)]
[let action : InlineAction = unit.inlineActions()->first()]
 [action.actionLink(unit.contentType(), variable, unit.image(variable, imageClass), null, variable, unit.hasObjectAccess())/]
[/let]
[else]
 [unit.image(variable, imageClass)/]
[/if]
[if (unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
 <span class="card-title[if (unit.truncateElementTitle)] truncate[/if]">{% [unit.elementTitle.accessor(variable, unit.selection)/] %}</span>
[/if]
</div>
[/let]
[/template]

[template private cardContent(unit : TextCardsUnit, variable : String) post(trim())]
<div class="card-content">
[if (not unit.elementTitle.oclIsUndefined())]
 <span class="card-title[if (unit.truncateElementTitle)] truncate[/if]">{{ [unit.elementTitle.accessor(variable, unit.selection)/][unit.elementTitle.valueLabel()/] }}</span>
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.cardFields(variable)/]
[/if]
</div>
[/template]

[template private cardContent(unit : DateCardsUnit, variable : String) post(trim())]
<div class="card-content">
[if (not unit.elementTitle.oclIsUndefined())]
 <span class="card-title[if (unit.truncateElementTitle)] truncate[/if]">{{ [unit.elementTitle.accessor(variable, unit.selection)/][unit.elementTitle.valueLabel()/] }}</span>
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.cardFields(variable)/]
[/if]
</div>
[/template]

[template private cardContent(unit : ImageCardsUnit, variable : String) post(trim())]
<div class="card-content">
[if (not unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
 <span class="card-title[if (unit.truncateElementTitle)] truncate[/if]">{{ [unit.elementTitle.accessor(variable, unit.selection)/][unit.elementTitle.valueLabel()/] }}</span>
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.cardFields(variable)/]
[/if]
</div>
[/template]

[template private cardFields(unit : CardsUnit, variable : String) post(trim())]
[if (not unit.omitFieldLabels)]
<dl>
[/if]
[for (field : UnitField | unit.displayFields)]
	[if (field.isConditionalDisplay())]
{% if not ([field.hideWhen.twigExpression(variable)/]) -%}
	[/if]
[if (not unit.omitFieldLabels)]
 <dt[if (field.truncate)] class="truncate"[/if]>[if (field.hasCustomisedDisplayLabel)]
{{ '[unit.containedId()/].labels.[field.labelId()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[unit.contentType().id()/].labels.[field.labelId()/]' | trans }}[/if]<dt><dd[if (field.truncate)] class="truncate"[/if]>[field.displayValue(variable, true)/]</dd>
[else]
<p[if (field.truncate)] class="truncate"[/if]>[field.displayValue(variable, true)/]</p>
[/if]
	[if (field.isConditionalDisplay())]
{%- endif %}
	[/if]
[/for]
[if (not unit.omitFieldLabels)]
</dl>
[/if]
[/template]

[template private cardActions(unit : CardsUnit, valueAccessor : String) post(trim())]
<div class="card-action">
[for (action : InlineAction | unit.inlineActions())]
	[if (unit.hasObjectAccess())]
 [action.actionLink(unit.contentType(), valueAccessor, action.displayLabel, valueAccessor.concat('.defaultLabel()'), valueAccessor, unit.hasObjectAccess())/]
	[else]
 [action.actionLink(unit.contentType(), valueAccessor, action.displayLabel, null, valueAccessor, unit.hasObjectAccess())/]
	[/if]
[/for]
</div>
[/template]

