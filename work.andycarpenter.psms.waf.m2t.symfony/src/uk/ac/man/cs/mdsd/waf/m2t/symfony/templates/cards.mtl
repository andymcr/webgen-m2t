[comment encoding = UTF-8 /]
[module cards(
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::badge/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::collection/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::data/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::image/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::titles/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let accessor : String = cardsUnit.instanceParameter()]
[file(cardsUnit.templateFilename(), false)]
{% trans_default_domain "entity" %}
<section [if (cardsUnit.hasSectionClass)] class="[cardsUnit.sectionClass/]" [/if]id="[cardsUnit.instanceParameter()/]">
<h4[if (cardsUnit.hasCaptionClass or cardsUnit.omitCaption)]
 class="[if (cardsUnit.hasCaptionClass)][cardsUnit.captionClass/][/if] [if (cardsUnit.omitCaption)] hidden[/if]"[/if]>[cardsUnit.unitTitle()/]</h4>
[if (cardsUnit.hasFilters)]
[cardsUnit.unitFilters()/]
[/if]
[if (cardsUnit.hasContainerActions and cardsUnit.containerActionsPlacement <> ContainerActionsPlacement::Below)]
 [cardsUnit.containerActions(cardsUnit.containerParameter())/]
[/if]
[if (cardsUnit.hasPagination
	and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Below)]
[cardsUnit.pagination()/]
[/if]
[cardsUnit.unitContent(null, accessor, 0)/]
[if (cardsUnit.hasPagination
	and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Above)]
 [cardsUnit.pagination()/]
[/if]
[if (cardsUnit.hasContainerActions and cardsUnit.containerActionsPlacement = ContainerActionsPlacement::Below)]
 [cardsUnit.containerActions(cardsUnit.containerParameter())/]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]

[template private unitContent(unit : ContentUnit, nullDisplayValue : String, accessor : String, depthIndex : Integer)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let variable : String = cardsUnit.contentType.instanceName()]
[if (cardsUnit.hasGroupedResults)]
{% set [cardsUnit.selection.grouping->first().name/] = null %}
[else]
<div class="[cardsUnit.rowClass/]">
[/if]
{% for [variable/] in [accessor/] %}
[if (cardsUnit.hasGroupedResults)]
{% if [cardsUnit.selection.grouping->first().name/] != [variable/].enteredIn.title %}
 {% if [cardsUnit.selection.grouping->first().name/] is not null %}
</div>
 {% endif %}
{% set [cardsUnit.selection.grouping->first().name/] = [variable/].enteredIn.title %}
<h5>{{ [variable/].enteredIn.title }}</h5>
<div class="[cardsUnit.rowClass/]">
{% endif%}
[/if]
 <div class="[cardsUnit.columnClass/]">
  <div[if (cardsUnit.hasCardClass)] class="[cardsUnit.cardClass/]"[/if]>
[if (cardsUnit.badges->notEmpty())]
   [cardsUnit.header(variable)/]
[/if]
   [cardsUnit.cardBody(variable)/]
[if (cardsUnit.hasActions)]
	[if (not cardsUnit.overlaySingleSelectAction or cardsUnit.actions->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() > 1)]
   [cardsUnit.footer(variable)/]
	[/if]
[/if]
  </div>
 </div>
{% endfor %}
</div>
[/let]
[/let]
[/template]

[template private header(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasCardHeaderClass)] class="[unit.cardHeaderClass/]"[/if]>
[for (badge : Badge | unit.badges)]
 [badge.badge(cardAccessor)/]
[/for]
</div>
[/template]

[template private footer(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasCardFooterClass)] class="[unit.cardFooterClass/]"[/if]>
 <nav[if (unit.hasInstanceControlClass)] class="[unit.instanceControlClass/]"[/if]>
[for (action : Action | unit.instanceActions)]
  [action.unitActionLink(cardAccessor)/]
[/for]
 </nav>
</div>
[/template]

[template private containerActions(unit : CardsUnit, containerAccessor : String) post(trim())]
<div[if (unit.hasControlClass)] class="[unit.controlClass/]"[/if]>
[for (action : Action | unit.containerActions)]
 [action.unitActionLink(containerAccessor)/]
[/for]
</div>
[/template]

[template private floatingInstanceActions(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasControlClass)] class="[unit.controlClass/]"[/if]>
 <nav[if (unit.hasInstanceControlClass)] class="[unit.instanceControlClass/]"[/if]>
[for (action : Action | unit.instanceActions)]
  [action.unitActionLink(cardAccessor)/]
[/for]
 </nav>
</div>
[/template]

[template private cardBody(unit : CardsUnit, cardAccessor : String) post(trim())]
<div[if (unit.hasCardBodyClass)] class="[unit.cardBodyClass/]"[/if]>
[if (unit.oclIsTypeOf(TextCardsUnit))]
[let textUnit : TextCardsUnit = unit.oclAsType(TextCardsUnit)]
	[if (not textUnit.elementTitle.oclIsUndefined() or textUnit.displayFields->notEmpty())]
 [textUnit.cardTitle(cardAccessor)/]
	[/if]
[/let]
[elseif (unit.oclIsTypeOf(DateCardsUnit))]
[let dateUnit : DateCardsUnit = unit.oclAsType(DateCardsUnit)]
	[if (not dateUnit.elementTitle.oclIsUndefined())]
 [dateUnit.cardTitle(cardAccessor)/]
	[/if]
[/let]
[elseif (unit.oclIsTypeOf(ImageCardsUnit))]
[let imageUnit : ImageCardsUnit = unit.oclAsType(ImageCardsUnit)]
 [imageUnit.cardTitle(cardAccessor)/]
[/let]
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.fields(cardAccessor)/]
[/if]
</div>
[/template]

[template private cardTitle(unit : TextCardsUnit, cardAccessor : String) post(trim())]
[if (not unit.elementTitle.oclIsUndefined())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private cardTitle(unit : DateCardsUnit, cardAccessor : String) post(trim())]
[unit.dateImage(cardAccessor)/]
[if (not unit.elementTitle.oclIsUndefined() or unit.displayFields->notEmpty())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private dateImage(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<div class="card-image img-fluid">
[if (unit.overlaySingleSelectAction and unit.actions->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() = 1)]
[let action : Action = unit.actions->first()]
 [action.unitActionLink(cardAccessor)/]
[/let]
[else]
 [unit.dateIcon(cardAccessor)/]
[/if]
</div>
[/template]

[template private dateIcon(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<time datetime="{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date }}" class="xxxx">
 <em>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('l') }}</em>
 <strong>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('j') }}</strong>
 <em>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('F') }}</em>
</time>
[/template]

[template private cardTitle(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[unit.cardImage(cardAccessor)/]
[if (not unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if] mt-2">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private cardImage(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[let imageClass : String = 'card-img-top']
[if (unit.overlaySingleSelectAction and unit.actions->select(a | a.oclIsTypeOf(InstanceSelectAction))->size() = 1)]
[let action : Action = unit.actions->first()]
 [action.unitActionLink(unit.image(cardAccessor, imageClass), cardAccessor)/]
[/let]
[else]
 [unit.image(cardAccessor, imageClass)/]
[/if]
[if (unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
<div class="card-img-overlay">
 <span class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{% [unit.elementTitle.accessor(cardAccessor, unit.selection)/] %}</span>
</div>
[/if]
[/let]
[/template]