[comment encoding = UTF-8 /]
[module cards(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::badge/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::collection/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::data/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::image/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::titles/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let accessor : String = cardsUnit.instanceName()]
[file(cardsUnit.viewFilename(), false)]
{% trans_default_domain "entity" %}
<section [if (not cardsUnit.sectionClass.oclIsUndefined())] class="[cardsUnit.sectionClass/]" [/if]id="[cardsUnit.instanceName()/]">
[if (not cardsUnit.omitCaption)]
<h4 class="[cardsUnit.captionClass/]">[cardsUnit.unitTitle()/]</h4>
[/if]
[if (cardsUnit.hasFilters())]
[cardsUnit.unitFilters()/]
[/if]
[if (cardsUnit.hasPagination()
	and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Below)]
[cardsUnit.pagination()/]
[/if]
[cardsUnit.unitContent(null, accessor, 0)/]
[if (cardsUnit.hasPagination()
	and cardsUnit.paginationControlPlacement <> PaginationControlPlacements::Above)]
 [cardsUnit.pagination()/]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]

[template private unitContent(unit : ContentUnit, nullDisplayValue : String, accessor : String, depthIndex : Integer)
	? (unit.oclIsKindOf(CardsUnit)) post(trim())]
[let cardsUnit : CardsUnit = unit.oclAsType(CardsUnit)]
[let variable : String = cardsUnit.contentType().instanceName()]
[if (cardsUnit.selection.grouping->notEmpty())]
{% set [cardsUnit.selection.grouping->first().name/] = null %}
[/if]
[if (cardsUnit.selection.grouping->isEmpty())]
<div class="[cardsUnit.rowClass/] mb-3">
[/if]
{% for [variable/] in [accessor/] %}
[if (cardsUnit.selection.grouping->notEmpty())]
{% if [cardsUnit.selection.grouping->first().name/] != [variable/].enteredIn.title %}
 {% if [cardsUnit.selection.grouping->first().name/] is not null %}
</div>
 {% endif %}
{% set [cardsUnit.selection.grouping->first().name/] = [variable/].enteredIn.title %}
<h5>{{ [variable/].enteredIn.title }}</h5>
<div class="[cardsUnit.rowClass/]">
{% endif%}
[/if]
 <div class="[cardsUnit.columnClass/]">
  <div class="[cardsUnit.cardClass/]">
[if (cardsUnit.badges->notEmpty())]
   [cardsUnit.header(variable)/]
[/if]
   [cardsUnit.cardBody(variable)/]
[if (cardsUnit.hasInlineActions())]
	[if (not cardsUnit.overlaySingleSelectAction or cardsUnit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() > 1)]
   [cardsUnit.footer(variable)/]
	[/if]
[/if]
  </div>
 </div>
{% endfor %}
</div>
[/let]
[/let]
[/template]

[template private header(unit : CardsUnit, cardAccessor : String) post(trim())]
<div class="card-header">
[for (badge : Badge | unit.badges)]
 [badge.badge(cardAccessor)/]
[/for]
</div>
[/template]

[template private footer(unit : CardsUnit, cardAccessor : String) post(trim())]
<div class="card-footer">
 <nav class="nav nav-pills nav-justified">
[for (action : InlineAction | unit.inlineActions())]
	[if (unit.hasObjectAccess())]
  [action.actionLink(unit.contentType(), cardAccessor, action.displayLabel,
		cardAccessor.concat('.defaultLabel()'), cardAccessor, unit.hasObjectAccess(), 'nav-link m-1')/]
	[else]
  [action.actionLink(unit.contentType(), cardAccessor, action.displayLabel, null,
		cardAccessor, unit.hasObjectAccess(), 'nav-link m-1')/]
	[/if]
[/for]
 </nav>
</div>
[/template]

[template private cardBody(unit : CardsUnit, cardAccessor : String) post(trim())]
<div class="card-body">
[if (unit.oclIsTypeOf(TextCardsUnit))]
[let textUnit : TextCardsUnit = unit.oclAsType(TextCardsUnit)]
	[if (not textUnit.elementTitle.oclIsUndefined() or textUnit.displayFields->notEmpty())]
 [textUnit.cardTitle(cardAccessor)/]
	[/if]
[/let]
[elseif (unit.oclIsTypeOf(DateCardsUnit))]
[let dateUnit : DateCardsUnit = unit.oclAsType(DateCardsUnit)]
 [dateUnit.cardTitle(cardAccessor)/]
[/let]
[elseif (unit.oclIsTypeOf(ImageCardsUnit))]
[let imageUnit : ImageCardsUnit = unit.oclAsType(ImageCardsUnit)]
 [imageUnit.cardTitle(cardAccessor)/]
[/let]
[/if]
[if (unit.displayFields->notEmpty())]
 [unit.cardFields(cardAccessor)/]
[/if]
</div>
[/template]

[template private cardTitle(unit : TextCardsUnit, cardAccessor : String) post(trim())]
[if (not unit.elementTitle.oclIsUndefined())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private cardTitle(unit : DateCardsUnit, cardAccessor : String) post(trim())]
[unit.dateImage(cardAccessor)/]
[if (not unit.elementTitle.oclIsUndefined() or unit.displayFields->notEmpty())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private dateImage(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<div class="card-image img-fluid">
[if (unit.overlaySingleSelectAction and unit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() = 1)]
[let action : InlineAction = unit.inlineActions()->first()]
 [action.actionLink(unit.contentType(), cardAccessor, unit.dateIcon(cardAccessor),
	null, cardAccessor, unit.hasObjectAccess(), null)/]
[/let]
[else]
 [unit.dateIcon(cardAccessor)/]
[/if]
</div>
[/template]

[template private dateIcon(unit : DateCardsUnit, cardAccessor : String) post(trim())]
<time datetime="{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date }}" class="xxxx">
 <em>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('l') }}</em>
 <strong>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('j') }}</strong>
 <em>{{ [unit.elementDate.accessor(cardAccessor, unit.selection)/] | date('F') }}</em>
</time>
[/template]

[template private cardTitle(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[unit.cardImage(cardAccessor)/]
[if (not unit.overlayTitle and not unit.elementTitle.oclIsUndefined() or unit.displayFields->notEmpty())]
<h5 class="card-title[if (unit.truncateElementTitle)] text-truncate[/if] mt-2">{{ [unit.elementTitle.accessor(cardAccessor, unit.selection)/][unit.elementTitle.valueLabel()/] }}</h5>
[/if]
[/template]

[template private cardImage(unit : ImageCardsUnit, cardAccessor : String) post(trim())]
[let imageClass : String = 'card-img-top']
[if (unit.overlaySingleSelectAction and unit.inlineActions()->select(a | a.oclIsTypeOf(SelectAction))->size() = 1)]
[let action : InlineAction = unit.inlineActions()->first()]
 [action.actionLink(unit.contentType(), cardAccessor, unit.image(cardAccessor, imageClass),
	null, cardAccessor, unit.hasObjectAccess(), null)/]
[/let]
[else]
 [unit.image(cardAccessor, imageClass)/]
[/if]
[if (unit.overlayTitle and not unit.elementTitle.oclIsUndefined())]
<div class="card-img-overlay">
 <span class="card-title[if (unit.truncateElementTitle)] text-truncate[/if]">{% [unit.elementTitle.accessor(cardAccessor, unit.selection)/] %}</span>
</div>
[/if]
[/let]
[/template]

[template private cardFields(unit : CardsUnit, cardAccessor : String) post(trim())]
[if (not unit.omitFieldLabels)]
<dl>
[/if]
[for (field : UnitField | unit.displayFields)]
	[if (field.isConditionalDisplay())]
{% if not ([field.hideWhen.twigExpression(cardAccessor)/]) -%}
	[/if]
[if (not unit.omitFieldLabels)]
 <dt[if (field.truncate and field.isSingleton())] class="text-truncate"[/if]>[if (field.hasCustomisedDisplayLabel)]
{{ '[unit.containedId()/].labels.[field.labelId()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[unit.contentType().id()/].labels.[field.labelId()/]' | trans }}[/if]<dt><dd[if (field.truncate)] class="text-truncate"[/if]>[field.displayValue(cardAccessor, true)/]</dd>
[else]
<div[if (field.truncate)] class="text-truncate"[/if]>[field.displayValue(cardAccessor, true)/]</div>
[/if]
	[if (field.isConditionalDisplay())]
{%- endif %}
	[/if]
[/for]
[if (not unit.omitFieldLabels)]
</dl>
[/if]
[/template]