[comment encoding = UTF-8 /]
[module userModel(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]


[template public userModel(security  : LocalAuthenticationSystem)]
[file (security.modelsDirectory().concat('/').concat(security.userModelName()).concat(security.executableExtension()), false)]
<?php
namespace [security.modelsNamespace()/];

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;


/**
 * // @ORM\Entity(repositoryClass=AuthUserRepository::class)
 * @ORM\Entity
 * @ORM\Table(name="authentications")
 **/
class [security.userModelName()/] implements UserInterface
{
   /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue
     **/
    protected $id;

    /**
     * @ORM\Column(type="string", length=180, unique=true)
     */
    private $email;

    /**
     * @ORM\Column(type="array")
     */
    private $roles = ['['/][']'/];

    /**
     * @var string The hashed password
     * @ORM\Column(type="string")
     */
    private $password;

    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank
     **/
    protected $password_changed_at;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank
     **/
    protected $created;
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     **/
    protected $updated;

    public function __construct()
    {
        $this->created = new \DateTime();
        $this->password_changed_at = new \DateTime('1000-01-01 00:00:00');
    }

    public function getId()
    {
        return $this->id;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /**
     * A visual identifier that represents this user.
     *
     * @see UserInterface
     */
    public function getUsername(): string
    {
        return (string) $this->email;
    }

    /**
     * @see UserInterface
     */
    public function getRoles(): array
    {
        $roles = $this->roles;
        // guarantee every user at least has ROLE_USER
        $roles['['/][']'/] = 'ROLE_USER';

        return array_unique($roles);
    }

    public function setRoles(array $roles): self
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * @see UserInterface
     */
    public function getPassword(): string
    {
        return (string) $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;
        $this->setPasswordChangedAt(new \DateTime());

        return $this;
    }

    private function setPasswordChangedAt($passwordChangedAt) 
    { 
        $this->password_changed_at = $passwordChangedAt; 
    } 
  
    public function getPasswordChangedAt() 
    { 
        return $this->password_changed_at; 
    } 

    /**
     * @see UserInterface
     */
    public function getSalt()
    {
        // not needed when using the "bcrypt" algorithm in security.yaml
    }

    /**
     * @see UserInterface
     */
    public function eraseCredentials()
    {
        // If you store any temporary, sensitive data on the user, clear it here
        // $this->plainPassword = null;
    }

}
[/file]
[/template]
