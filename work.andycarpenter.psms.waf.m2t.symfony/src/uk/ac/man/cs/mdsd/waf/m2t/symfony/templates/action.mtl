[comment encoding = UTF-8 /]
[module action(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::value/]


[template public linkLabel(label : String, iconName : String) post(trim())]
[if (iconName = '')]
[label/]
[else]
<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-left" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
  <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
</svg>
[/if]
[/template]


[template public unitActionLink(action : Action, instanceAccessor : String)  post(trim())]
[action.unitActionLink(action.linkContent(), instanceAccessor)/]
[/template]

[template public unitActionLink(action : Action, linkContent : String, instanceAccessor : String)  post(trim())]
[action.anchor(
	action.linkPath(action.accessor(instanceAccessor)),
	action.attributes(instanceAccessor),
	linkContent,
	action.accessor(instanceAccessor))/]
[/template]

[template public featureActionLink(action : Action, association : UnitAssociation, instanceAccessor : String) 
	?(action.oclIsKindOf(SelectAction)) post(trim())]
[let selectAction : SelectAction = action.oclAsType(SelectAction)]
[action.anchor(
	selectAction.linkPath(association.association.targetType, action.accessor(instanceAccessor)),
	action.attributes(association, instanceAccessor),
	action.linkContent(association, instanceAccessor),
	instanceAccessor)/]
[/let]
[/template]


[query private accessor(action : Action, instanceAccessor : String) : String
	= if not action.oclIsKindOf(SelectAction) then
			instanceAccessor
		else
			let selectAction : SelectAction = action.oclAsType(SelectAction)
				in if selectAction.valuePath.oclIsUndefined() then
						instanceAccessor
					else
						selectAction.valuePath.accessor(instanceAccessor, null)
					endif
		endif
/]


[template private linkPath(action : Action, instanceAccessor : String) 
	?(action.oclIsTypeOf(DeleteAction) or action.oclIsKindOf(InstanceOperationAction)) post(trim())]
'[action.routeName()/]'[action.linkPathParameters(action.routeActualParameters(instanceAccessor), true)/]
[/template]

[template private linkPath(action : Action, instanceAccessor : String) 
	?(action.oclIsTypeOf(ContainerOperationAction) or action.oclIsKindOf(GeneralOperationAction)) post(trim())]
'[action.routeName()/]'[action.linkPathParameters(action.parentUnit.routeActualParameters(
	action.parentUnit.routeParameters(), instanceAccessor, action.parentUnit.contentType,
	action.parentUnit.hasObjectAccess()), true)/]
[/template]

[template private linkPath(action : Action, instanceAccessor : String) 
	?(action.oclIsTypeOf(SecurityAction)) post(trim())]
'[action.routeName()/]'
[/template]

[template private linkPath(action : SelectAction, instanceAccessor : String) 
	?(action.oclIsTypeOf(SelectAction)) post(trim())]
[let selectAction : SelectAction = action.oclAsType(SelectAction)]
[selectAction.linkPath(selectAction.selectType(), instanceAccessor)/]
[/let]
[/template]

[query private selectType(action : SelectAction) : Entity
	= if action.valuePath.oclIsUndefined() then
			action.parentUnit.contentType
		else
			action.valuePath.selectType()
		endif
/]

[query private selectType(path : FeaturePath) : Entity
	= if path.oclIsTypeOf(FeaturePathAssociation) then
			path.oclAsType(FeaturePathAssociation).selectType()
		else
			null
		endif
/]

[query private selectType(path : FeaturePathAssociation) : Entity
	= if path.childFeature.oclIsUndefined() then
			path.association.targetType
		else
			path.childFeature.selectType()
		endif
/]

[query private selectType(path : FeatureChildPath) : Entity
	= if path.oclIsTypeOf(ChildPathAssociation) then
			path.oclAsType(ChildPathAssociation).selectType()
		else
			null
		endif
/]

[query private selectType(path : ChildPathAssociation) : Entity
	= if path.persistentFeature.oclIsKindOf(Association) then
				path.persistentFeature.oclAsType(Association).targetType
			else
				null
			endif
/]

[template private linkPath(action : SelectAction, valueType : Entity, instanceAccessor : String) 
	?(action.oclIsTypeOf(SelectAction)) post(trim())]
[let targetUnit : DynamicUnit = action.target.oclAsType(DynamicUnit)]
[let routeName : String
	= if targetUnit.oclIsKindOf(EditUnit) then
			targetUnit.oclAsType(EditUnit).routeUpdateName()
		else
			targetUnit.routeName()
		endif]
[let routeParameters : Sequence(Attribute)
	= if targetUnit.oclIsKindOf(EditUnit) then
			targetUnit.oclAsType(EditUnit).routeUpdateParameters()
		else
			targetUnit.routeParameters()
		endif]
'[routeName/]'[action.linkPathParameters(
	targetUnit.routeActualParameters(routeParameters, instanceAccessor, valueType, action.parentUnit.hasObjectAccess()),
	action.parentUnit.displayedOn = targetUnit.displayedOn)/]
[/let]
[/let]
[/let]
[/template]

[template private linkPathParameters(action : Action, routeParameters : String, preserveQuery : Boolean) post(trim())]
[if (action.parentUnit.displayedOn.hasFiltersOrPagination() and preserveQuery)]
, app.request.query.all[if (not routeParameters.oclIsUndefined())]
|merge({ [routeParameters/] })[/if]
[else][if (not routeParameters.oclIsUndefined())]
, { [routeParameters/] }[/if]
[/if][/template]


[template private attributes(action : Action, instanceAccessor : String)
	?(action.oclIsTypeOf(SecurityAction)) post(trim())]
[if (action.hasAnchorClass)]
class="[action.anchorClass/]"
[/if]
[/template]

[template private attributes(action : Action, instanceAccessor : String)
	?(not action.oclIsTypeOf(SecurityAction)) post(trim())]
title="[action.displayLabel/][if (not instanceAccessor.oclIsUndefined())]
 {{ [instanceAccessor/].defaultLabel() }}[/if]"[if (action.hasConfirmMessage)]
 onclick="return confirm('[action.confirmMessage/][if (not instanceAccessor.oclIsUndefined())]
 {{ [instanceAccessor/].defaultLabel() }}[/if]');"[/if][if (action.hasAnchorClass)]
 class="[action.anchorClass/]"
[/if]
[/template]

[template private attributes(action : Action, association : UnitAssociation, instanceAccessor : String)
	?(action.oclIsTypeOf(SelectAction)) post(trim())]
[let title : String = instanceAccessor.concat(association.valueLabel())]
title="[action.displayLabel/] {{ [title/] }}"[if (action.hasConfirmMessage)]
 onclick="return confirm('[action.confirmMessage/][if (not title.oclIsUndefined())]
 {{ [title/] }}[/if]');"[/if][if (action.hasAnchorClass)]
 class="[action.anchorClass/]"
[/if]
[/let]
[/template]


[template private linkContent(action : Action) post(trim())]
[comment <button type="button" class="btn">{{ '/][comment action.displayLabelId()/][comment ' | trans }}</button>/]
[action.displayLabel/]
[/template]

[template private linkContent(action : Action, association : UnitAssociation, instanceAccessor : String) post(trim())]
{{ [instanceAccessor/][association.valueLabel()/] }}
[/template]


[template private anchor(action : Action, path : String, attributes : String, linkContent : String,
	conditionAccessor : String) post(trim())]
[if (action.isAuthorised and action.hasCustomisedAuthorisation)]
{% if is_granted('[action.authorisationRoles.trim()/]') %}[/if]
[action.anchor2(path, attributes, linkContent, conditionAccessor)/][if (action.isAuthorised and action.hasCustomisedAuthorisation)]
{% endif %}[/if]
[/template]

[template private anchor2(action : Action, path : String, attributes : String, linkContent : String,
	conditionAccessor : String) post(trim())]
[if (action.displayWhen.oclIsUndefined())]
	[if (action.enableWhen.oclIsUndefined())]
[action.anchor3(path, attributes, linkContent)/]
	[else]
{% if [if (action.oclIsTypeOf(SelectAction))]not ([/if][action.enableWhen.twigExpression(conditionAccessor)/][if (action.oclIsTypeOf(SelectAction))])[/if] %}[action.anchor3(path, attributes, linkContent)/]{% else %}[linkContent/]{% endif %}
	[/if]
[else]
{% if [action.displayWhen.twigExpression(conditionAccessor)/] %}[action.anchor3(path, attributes, linkContent)/]{% endif %}
[/if]
[/template]

[template private anchor3(action : Action, path : String, attributes : String, linkContent : String) post(trim())]
<a href="{{ path([path/]) }}" [attributes/]>[linkContent/]</a>
[/template]


[template public routeActualParameters(unit : DynamicUnit, routeParameters : Sequence(Attribute),
	instanceAccessor : String, valueType : Entity, objectAccess : Boolean) post(trim())]
[for (key : Attribute | routeParameters)]
[key.routeActualParameter(routeParameters, instanceAccessor, valueType, objectAccess)/],
[/for]
[/template]

[template private routeActualParameters(action : Action, instanceAccessor : String) post(trim())]
[action.parentUnit.routeActualParameters(action.routeParameters(), instanceAccessor, action.parentUnit.contentType, action.parentUnit.hasObjectAccess())/]
[/template]

[template private routeActualParameter(key : Attribute, routeParameters : Sequence(Attribute),
	instanceAccessor : String, valueType : Entity, objectAccess : Boolean) post(trim())]
'[key.routeParameterName(routeParameters)/]': [key.getValue(key.keyAccessor(instanceAccessor, valueType, objectAccess))/][if (key.isDateFeature)]
.format('Y-m-d H:i:s')[/if][if (key.encodeUriKey)] | url_encode[/if]
[/template]

[query private keyAccessor(key : Attribute, accessor : String, valueType : Entity, objectAccess : Boolean) : String
	= if valueType.attributeKeys->includes(key) then
			accessor.concat('.').concat(key.modelPropertyName())
		else if valueType.isContained then
			key.keyAccessor(accessor.concat('.').concat(valueType.containingAssociation.modelPropertyName()), valueType.containingType, objectAccess)
		else
			''
		endif endif
/]