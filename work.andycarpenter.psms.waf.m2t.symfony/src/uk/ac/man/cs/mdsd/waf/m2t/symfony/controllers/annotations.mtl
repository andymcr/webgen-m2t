[comment encoding = UTF-8 /]
[module annotations(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]


[template public routeAnnotation(page : Page) post(trim())]
[if (page.units->isEmpty())]
* @Route("[page.uriPath()/]", name="[page.routeName()/]")
[else]
[page.units->first().routeAnnotation(page.routeName(), page.uriPath(), true)/]
[/if]
[/template]

[template public routeAnnotation(unit : ContentUnit) post(trim())]
[if (unit.oclIsKindOf(SecurityUnit))]
[unit.routeAnnotation(unit.routeName(), unit.uriSecurityPath(unit), false)/]
[else]
[unit.routeAnnotation(unit.routeName(), unit.uriPath(unit), true)/]
[/if]
[/template]

[template public routeContainerAnnotation(unit : ContentUnit, suffix : String) post(trim())]
[unit.routeAnnotation(unit.routeName(), unit.uriContainerPath(suffix), true)/]
[/template]

[template public routeCreateAnnotation(unit : EditUnit, suffix : String) post(trim())]
[unit.routeAnnotation(unit.routeCreateName(), unit.uriCreatePath(suffix), true)/]
[/template]

[template public routeAnnotation(association : UnitAssociation, unit : EditUnit) post(trim())]
[comment unit.routeAnnotation(association.routeName(), unit.uriPath(unit.contentType, association.name), true)/]
[/template]

[template public routeAnnotation(action : Action, suffix : String) post(trim())]
[action.unit().routeAnnotation(action.routeName(), action.uriPath(suffix), false)/]
[/template]

[template public routeContainerAnnotation(action : OperationAction) post(trim())]
[action.unit().routeAnnotation(action.routeName(), action.uriContainerPath(), false)/]
[/template]

[template public routeGeneralAnnotation(action : OperationAction) post(trim())]
[action.unit().routeAnnotation(action.routeName(), action.uriGeneralPath(), false)/]
[/template]

[template private routeAnnotation(unit : ContentUnit, routeName : String, uriPath : String, potentialHomeRoute : Boolean) post(trim())]
[if (potentialHomeRoute and unit.isHomeUnit())]
* @Route("", name="[routeName/]")
[else]
* @Route("[uriPath/]", name="[routeName/]"[if (unit.hasValidatedRouteParameters(false))]
, requirements={[for (key : Attribute | unit.uriPathValidatedKeys(false)) separator(', ')]"[key.routeParameterName(unit.contentType())/]" = "[key.validationPattern/]"[/for]}[/if])
[/if]
[/template]


[template public securityAnnotation(page : Page) post(trim())]
[if (true)]
[if (page.hasAuthorisationRoles())]
* @Security("[for (role : String | page.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[page.requiresRole()/]")
[/if]
[/if]
[/template]

[template public securityAnnotation(unit : ContentUnit) post(trim())]
[if (true)]
[if (unit.hasAuthorisationRoles())]
* @Security("[for (role : String | unit.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[unit.requiresRole/]")
[/if]
[/if]
[/template]

[template public securityAnnotation(action : Action) post(trim())]
[if (action.hasAuthorisationRoles())]
* @Security("[for (role : String | action.roles()) separator(' or ')]has_role('[role/]')[/for]")
[else]
* @IsGranted("[action.requiresRole()/]")
[/if]
[/template]