[comment encoding = UTF-8 /]
[module details(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::badge/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::data/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::image/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::labels/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::titles/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[let accessor : String = detailsUnit.instanceName()]
[file(detailsUnit.viewFilename(), false)]
{% trans_default_domain "entity" %}
<section [if (detailsUnit.hasSectionClass)] class="[detailsUnit.sectionClass/]" [/if]id="[detailsUnit.instanceName()/]">
 <h4[if (detailsUnit.hasCaptionClass or detailsUnit.omitCaption)]
 class="[if (detailsUnit.hasCaptionClass)][detailsUnit.captionClass/][/if] [if (detailsUnit.omitCaption)] hidden[/if]"[/if]>[detailsUnit.unitTitle()/]</h4>
 [detailsUnit.unitContent(null, accessor, 0)/]
</section>
[/file]
[/let]
[/let]
[/template]

[template public unitContent(unit : ContentUnit, nullDisplayValue : String, accessor : String, depthInteger : Integer)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[detailsUnit.detailsContent(accessor, depthInteger)/]
[/let]
[/template]

[template public detailsContent(unit : DetailsUnit, accessor : String, depthInteger : Integer) post(trim())]
[unit.fields(accessor)/]
[/template]

[template private displayField(field : UnitField, parentAccessor : String, objectAccess : Boolean, depthIndex : Integer)
	? (not field.isAssociationField) post(trim())]
[field.displayValue(parentAccessor, objectAccess)/]
[/template]

[template private displayField(field : UnitField, parentAccessor : String, objectAccess : Boolean, depthIndex : Integer)
	? (field.isAssociationField and field.isSingleton) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[field.displayValue(parentAccessor, objectAccess)/]
[/let]
[/template]

[template private displayField(field : UnitField, parentAccessor : String, objectAccess : Boolean, depthIndex : Integer)
	? (field.isAssociationField and not field.isSingleton) post(trim())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
[field.displayValue(parentAccessor, objectAccess)/]
[/let]
[/template]
