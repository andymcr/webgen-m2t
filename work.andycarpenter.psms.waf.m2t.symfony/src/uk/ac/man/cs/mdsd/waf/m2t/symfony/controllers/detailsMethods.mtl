[comment encoding = UTF-8 /]
[module detailsMethods(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::criteriaDoctrine/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[detailsUnit.actionMethod()/]

[for (action : Action | detailsUnit.fieldSelectActions())]
[comment action.generateActionMethod('$this->'.concat(detailsUnit.instanceName()).concat('_error'))/]

[/for]
[/let]
[/template]

[template private actionMethod(unit : DetailsUnit) post(trim())]
/**
 [unit.routeAnnotation()/]
[if (unit.hasAuthorisation())]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]([unit.actionMethodFormals()/])
{
[if (unit.isConditionalDisplay())]
    [unit.actionCore()/]

[/if]
    return $this->renderPage([unit.renderMethodActuals()/]);
}
[/template]

[template public actionCore(unit : ContentUnit)
	? (unit.oclIsTypeOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[if (detailsUnit.selection.oclIsUndefined())]
$this->[detailsUnit.instanceName()/] = [detailsUnit.loadInstance()/];
if (!$this->[detailsUnit.instanceName()/]) {
    throw $this->createNotFoundException('The [detailsUnit.contentType.name/] does not exist');
}
[else]
$this->[detailsUnit.instanceName()/] = $this->[detailsUnit.selection.definedBy.instanceName()/]->[detailsUnit.selection.methodName/]();
[/if]
[/let]
[/template]

[template private templateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(DetailsUnit)) post(trim())]
[let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)]
[if (detailsUnit.isConditionalDisplay())]
if (isset($this->[detailsUnit.instanceName()/]))
    $parameters['['/]'[detailsUnit.instanceName()/]'[']'/] = $this->[detailsUnit.instanceName()/];
[else]
	[if (not detailsUnit.displayedOn.hasSingleActionMethod()) ]
[unit.actionCore()/]
	[/if]
$parameters['['/]'[detailsUnit.instanceName()/]'[']'/] = $this->[detailsUnit.instanceName()/];
[/if]
[/let]
[/template]