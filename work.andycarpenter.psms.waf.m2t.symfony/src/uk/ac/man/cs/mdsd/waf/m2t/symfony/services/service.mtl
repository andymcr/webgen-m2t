[comment encoding = UTF-8 /]
[module service(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::constant/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::queryDoctrine/]

[template public service(service : Service)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

// [protected ('use')]
// [/protected]

class [service.className()/]
{
[for (constant : Constant | service.constants)]
    [if (constant.useFunction())]private[else]public[/if] static $[constant.name/] = [if (constant.useFunction())]null[else][constant.value.queryExpression()/][/if];


[/for]
// [protected ('constants')]
// [/protected]

// [protected ('variables')]
// [/protected]

[for (uses : Service | service.uses)]
    private $[uses.instanceServiceName()/];

[/for]
[if (service.uses->notEmpty())]
    public function __construct([for (uses : Service | service.uses) separator(', ')]
[uses.className()/] $[uses.instanceName()/][/for])
    {
	[for (uses : Service | service.uses)]
        $this->[uses.instanceServiceName()/] =  $[uses.instanceName()/]; // [uses.name/]
	[/for]
    }

[/if]
[for (constant : Constant | service.constants->select(c | c.useFunction()))]
    public static function [constant.name/]()
    {
	[if (constant.value.oclIsUndefined())]
        // [protected ('constant '.concat(constant.name))]
        // [/protected]
	[else]
		[if (constant.value.oclIsTypeOf(TimeLiteral))]
        if (empty($[constant.name/])) {
            $[constant.name/] = new \DateTime('[constant.value.oclAsType(TimeLiteral).value/]');
        }

        return $[constant.name/];
		[/if]
	[/if]
    }

[/for]
[for (operation : BusinessOperation | service.operations)]
    [operation.businessOperation()/]

[/for]
/*
 * [protected ('support')]
 */
// [/protected]
}
[/file]
[/template]

[template private businessOperation(operation : BusinessOperation) post(trim())]
public function [operation.methodName()/]([operation.formalParameters()/])
{
    // [protected ('operation.'.concat(operation.methodName()))]
    // [/protected]
}
[/template]

[template private formalParameters(operation : BusinessOperation) post(trim())]
[for (parameter : FormalParameter | operation.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())] = [parameter.defaultValue/][/if][/for]
[/template]
