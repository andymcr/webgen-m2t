[comment encoding = UTF-8 /]
[module tabular(
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::expression::twig/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::accessor/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::action/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::collection/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::data/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::titles/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::templates::value/]


[template public unitView(unit : ContentUnit)
	? (unit.oclIsKindOf(TabularUnit)) post(trim())]
[let tabularUnit : TabularUnit = unit.oclAsType(TabularUnit)]
[let accessor : String = tabularUnit.instanceName()]
[file(tabularUnit.viewFilename(), false)]
{% trans_default_domain "entity" %}
<section [if (tabularUnit.hasSectionClass)] class="[tabularUnit.sectionClass/]" [/if]id="[tabularUnit.instanceName()/]">
 <h4[if (tabularUnit.hasCaptionClass or tabularUnit.omitCaption)]
 class="[if (tabularUnit.hasCaptionClass)][tabularUnit.captionClass/][/if] [if (tabularUnit.omitCaption)] hidden[/if]"[/if]>[tabularUnit.unitTitle()/]</h4>
[if (tabularUnit.hasFilters)]
 [tabularUnit.unitFilters()/]
[/if]
[if (tabularUnit.hasPagination
		and tabularUnit.paginationControlPlacement <> PaginationControlPlacements::Below)]
 [tabularUnit.pagination()/]
[/if]
 [tabularUnit.unitContent(null, accessor)/]
[if (tabularUnit.hasPagination
		and tabularUnit.paginationControlPlacement <> PaginationControlPlacements::Above)]
 [tabularUnit.pagination()/]
[/if]
</section>
[/file]
[/let]
[/let]
[/template]

[template public unitContent(unit : TabularUnit, nullDisplayValue : String, accessor : String) post(trim())]
<table class="[unit.contentClass/]">
[if (not unit.hasOmittedFieldLabels())]
 <thead class="[unit.headerClass/]">
  <tr>
 	[for (field : UnitField | unit.displayFields)]
		[if (field.isAuthorised)]
{% if is_granted('[field.authorisationRoles/]') %}
		[/if]
   <th>[if (field.hasCustomisedDisplayLabel)]
{{ '[field.customisedDisplayLabelId()/]' | trans({}, '[unit.translationDomain()/]') }}[else]
{{ '[field.defaultDisplayLabelId()/]' | trans }}[/if]</th>
		[if (field.isAuthorised)]
{% endif %}
		[/if]
 	[/for]
	[if (unit.hasInstanceActions)]
   <th>Actions</th>
	[/if]
  </tr>
 </thead>
[/if]
 <tbody>
[let loopVariable : String = 'entry']
{% for [loopVariable/] in [accessor/] %}
  <tr class="{{ cycle(['['/][for (class : String | unit.rowClasses.trim().tokenize(',; ')) separator (', ')]'[class/]'[/for][']'/], loop.index0) }}">
   [unit.entry(loopVariable, unit.hasObjectAccess())/]
[if (unit.hasInstanceActions)]
   <td class="actions">[unit.instanceActions(loopVariable)/]</td>
[/if]
  </tr>
[if (not nullDisplayValue.oclIsUndefined() or not unit.emptyMessage.oclIsUndefined())]
{% else %}
  <tr>
	[if (not nullDisplayValue.oclIsUndefined())]
   <td[if (unit.displayFields->size() > 1)] colspan="[unit.displayFields->size()/]"[/if]>[nullDisplayValue/]</td>
	[else]
   <td[if (unit.displayFields->size() > 1)] colspan="[unit.displayFields->size()/]"[/if]>[unit.emptyMessage/]</td>
	[/if]
	[if (unit.hasInstanceActions)]
   <td class="actions">&nbsp;</td>
	[/if]
  </tr>
[/if]
{% endfor %}
[/let]
 </tbody>
[if (unit.hasContainerActions and unit.isContained)]
 <tfoot>
  <tr>
   [unit.containerActions(unit.containerInstanceName())/]
  </tr>
 </tfoot>
[/if]
</table>
[/template]

[template private entry(unit : TabularUnit, accessor : String, objectAccess : Boolean) post(trim())]
[for (field : UnitField | unit.displayFields)]
	[if (field.isAuthorised)]
{% if is_granted('[field.authorisationRoles/]') %}
	[/if]
<td[if (field.oclIsKindOf(UnitFeature))] class="[field.oclAsType(UnitFeature).persistentFeature.name.replaceAll('([A-Z])', '_$1').toLower()/]"[/if]>[field.displayValue(accessor, objectAccess)/]</td>
	[if (field.isAuthorised)]
{% endif %}
	[/if]
[/for]
[/template]

[template private instanceActions(unit : TabularUnit, rowAccessor : String) post(trim())]
[for (action : Action | unit.instanceActions)]
[action.unitActionLink(rowAccessor)/]
[/for]
[/template]

[template private containerActions(unit : TabularUnit, accessor : String) post(trim())]
[for (action : Action | unit.containerActions)]
[action.unitActionLink(accessor)/]
[/for]
[/template]
