[comment encoding = UTF-8 /]
[module page(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::selection]
[import uk::ac::man::cs::mdsd::orm::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::model/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security]
[import uk::ac::man::cs::mdsd::waf::m2t::core::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::units/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::featureProperties/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::collectionMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::staticMethods/]


[template public controller(page : Page, model : WafModel)]
[file(page.controllerFilename(model), false)]
<?php
[if (model.hasAPI())]
namespace [page.webControllersNamespace()/];
[else]
namespace [page.controllersNamespace()/];
[/if]

[page.useStatements()/]


class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{
[for (repository : Repository | page.repositories())]
    private $[repository.instanceName()/];

[/for]
[for (service : Service | page.services())]
    private $[service.instanceName()/];

[/for]
[if (page.hasExplicitValidation())]
    private $validatorService;

[/if]
    private $translationService;

    public function __construct([for (repository : Repository | page.repositories()) separator (', ')]
[repository.className()/] $[repository.instanceName()/][/for][if (page.repositories()->notEmpty() and page.services()->notEmpty())]
, [/if][for (service : Service | page.services()) separator (', ')]
[service.className()/] $[service.instanceName()/][/for][if (page.hasExplicitValidation())]
[if (page.repositories()->notEmpty() or page.services()->notEmpty())]
, [/if]ValidatorInterface $validator[/if][if (page.repositories()->notEmpty() or page.services()->notEmpty())]
, [/if]TranslatorInterface $translator)
    {
	[for (repository : Repository | page.repositories())]
        $this->[repository.instanceName()/] = $[repository.instanceName()/];
	[/for]
	[for (service : Service | page.services())]
        $this->[service.instanceName()/] = $[service.instanceName()/];
	[/for]
	[if (page.hasExplicitValidation())]
        $this->validatorService = $validator;
	[/if]
        $this->translationService = $translator;
    }

[if (page.hasSingleActionMethod())]
    [page.actionMethod()/]

	[if (page.hasSupportMethods())]
		[for (unit : ContentUnit | page.units->select(u | u.hasSupportMethods()))]
    [unit.actionSupportMethods()/]

		[/for]
	[/if]
	[for (action : Action | page.actionsRequiringHandlers())]
    [action.actionMethod()/]

	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits())]
    [unit.unitMethods()/]

		[for (action : Action | unit.actionsRequiringHandlers())]
    [action.actionMethod()/]

		[/for]
	[/for]
    [page.renderMethod()/]
[/if]
}
[/file]
[/template]

[template private useStatements(page : Page) post(trim())]
[for (entity : Entity | page.editUnits()
		->select(u | not u.oclIsTypeOf(UpdateUnit) or page.units->size() > 1)
		->collect(u | u.contentType)->asSet()->asSequence()->sortedBy(e | e.name))]
use [entity.modelsNamespace()/]\[entity.modelName()/];
[/for]
[for (form : SingletonUnit | page.formUnits()->sortedBy(u | u.name))]
use [form.formNamespace()/]\[form.typeClassName(page.partOf)/];
[/for]
[for (repository : Repository | page.repositories())]
use [repository.repositoryNamespace()/]\[repository.className()/];
[/for]
[for (service : Service | page.services())]
use [service.serviceNamespace()/]\[service.className()/];
[/for]
[if (page.editUnits()->collect(u | u.inputFields())->select(f | f.isContains())->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (page.hasAnyAuthorisationRole())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
[/if]
[if (page.hasAuthorisationRoles())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
[/if]
use Symfony\Bundle\FrameworkBundle\Controller\[page.baseControllerClassName()/];
[if (page.hasFilters() or page.hasPagination() or page.hasEditUnits())]
use Symfony\Component\HttpFoundation\Request;
[/if]
[if (page.hasFileActions())]
use Symfony\Component\HttpFoundation\Response;
[/if]
use Symfony\Component\Routing\Annotation\Route;
[if (page.hasExplicitValidation())]
use Symfony\Component\Validator\Validator\ValidatorInterface;
[/if]
use Symfony\Contracts\Translation\TranslatorInterface;
[/template]

[template private actionMethod(page : Page) post(trim())]
/**
 [page.routeAnnotation()/]
[if (page.hasAuthorisation())]
 [page.securityAnnotation()/]
[/if]
 */
public function [page.actionName()/]([page.actionMethodFormals()/])
{
[for (unit : DynamicUnit | page.dynamicUnits())]
    [unit.actionCore()/]

[/for]
    [page.renderCore()/]
}
[/template]

[template private renderMethod(page : Page) post(trim())]
private function renderPage([if (page.hasFilters() or page.hasPagination())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if][for (key : Attribute | page.routeParameters()) separator(', ')]
$[key.routeParameterName(page.routeParameters()->last().partOf.oclAsType(Entity))/][/for])
{
    [page.renderCore()/]
}
[/template]

[template private renderCore(page : Page) post(trim())]
$parameters = array();
[page.templateParameters()/]
[for (unit : ContentUnit | page.units)]
[unit.templateParameters()/]
[/for]

return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/template]


[template private actionMethod(action : Action)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.unit()]
/**
 [deleteAction.routeAnnotation(deleteAction.uriElement)/]
[if (deleteAction.hasAuthorisation())]
 [deleteAction.securityAnnotation()/]
[/if]
 */
public function [deleteAction.actionName()/]([action.actionMethodFormals()/])
{
    [deleteAction.loadInstance()/]
    $this->[unit.contentRepository().instanceName()/]->remove($[deleteAction.instanceName()/], true);

[if (unit.oclIsKindOf(CollectionUnit))]
    return [action.redirect(unit.routeName(), deleteAction.routeParameters())/];
[else]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(UnitFeature)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = action.unit()]
/**
 [operationAction.routeAnnotation(operationAction.uriElement)/]
[if (operationAction.hasAuthorisation())]
 [operationAction.securityAnnotation()/]
[/if]
 */
public function [operationAction.actionName()/]([unit.actionMethodFormals()/])
{
[if (operationAction.operation.resultType = OperationResultTypes::None)]
[elseif (operationAction.operation.resultType = OperationResultTypes::File)]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(DynamicUnit)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = operationAction.unit()]
/**
[if (action.oclIsTypeOf(InstanceOperationAction))]
 [operationAction.routeAnnotation(operationAction.uriElement)/]
[elseif (action.oclIsTypeOf(ContainerOperationAction))]
 [operationAction.routeContainerAnnotation()/]
[else]
 [operationAction.routeGeneralAnnotation()/]
[/if]
[if (operationAction.hasAuthorisation())]
 [operationAction.securityAnnotation()/]
[/if]
 */
public function [operationAction.actionName()/]([if (action.oclIsTypeOf(InstanceOperationAction))]
[action.actionMethodFormals()/][elseif (action.oclIsTypeOf(ContainerOperationAction))]
[action.actionContainerMethodFormals()/][else]
[/if])
{
[if (not operationAction.operation.oclIsUndefined())]
    [operationAction.actionMethodBody()/]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(InstanceOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.unit()]
[action.loadInstance()/]
[if (not action.successMessage.oclIsUndefined() and not action.failureMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (not action.successMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
[action.actionResultFlash()/]
[/if]
return [action.redirect(unit.routeName(true), action.routeParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(ContainerOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.unit()]
[action.unit().loadContainer()/];
[if (not action.successMessage.oclIsUndefined() and not action.failureMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (not action.successMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
[action.actionResultFlash()/]
[/if]
return [action.redirect(unit.routeName(true), action.routeContainerParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(GeneralOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.unit()]
[if (not action.successMessage.oclIsUndefined() and not action.failureMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (not action.successMessage.oclIsUndefined() or not action.failureMessage.oclIsUndefined())]
[action.actionResultFlash()/]
[/if]
return [action.redirect(unit.routeName(true), action.routeContainerParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(InstanceOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
[action.loadInstance()/]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
$response = $this->file($file, $[action.unit().instanceName()/].getName()[if (not action.fileExtension.oclIsUndefined())]
 . '[action.fileExtension/]'[/if]);
return $response;
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(ContainerOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
[action.unit().loadContainer()/];
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
$response = $this->file($file, $[action.unit().instanceName()/].getName()[if (not action.fileExtension.oclIsUndefined())]
 . '[action.fileExtension/]'[/if]);
return $response;
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(GeneralOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]();
$response = $this->file($file, '[action.instanceName()/][if (not action.fileExtension.oclIsUndefined())]
 . [action.fileExtension/][/if]');
return $response;
[/template]
