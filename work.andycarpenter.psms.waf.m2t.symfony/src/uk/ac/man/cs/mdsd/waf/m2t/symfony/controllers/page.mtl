[comment encoding = UTF-8 /]
[module page(
	'http://andycarpenter.work/psm/ObjectRelationalMapping',
	'http://andycarpenter.work/psm/service',
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::actions/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::translation/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::uriRoutes/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::collectionMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::securityMethods/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::staticMethods/]


[query private hasSingleAuthorisationRole (page : Page) : Boolean
	= units->exists(u | u.authorisationRoles.trim().tokenize(',; ')->size() = 1)
		or dynamicUnits->exists(u | u.actions->exists(a | a.authorisationRoles.trim().tokenize(',; ')->size() = 1))
/]

[query private hasMultipleAuthorisationRoles (page : Page) : Boolean
	= units->exists(u | u.authorisationRoles.trim().tokenize(',; ')->size() > 1)
		or dynamicUnits->exists(u | u.actions->exists(a | a.authorisationRoles.trim().tokenize(',; ')->size() > 1))
/]

[query private hasSupportMethods(page : Page) : Boolean
	= page.units->select(u | u.hasSupportMethods())->notEmpty()
/]

[query private hasExplicitValidation(page : Page) : Boolean
	= page.editUnits->select(u | u.hasExplicitValidation())->notEmpty()
/]

[query private hasExplicitValidation(unit : EditUnit) : Boolean
	= let commonValidation : Boolean
		= unit.customiseValues or unit.hasForcedValueFields
		in let addValidation : Boolean
			= unit.isContained and not unit.hasExplicitlyEditedContainer
			in let editValidation : Boolean
				= false -- unit.hasDisabledFeatures
				in if unit.oclIsTypeOf(CreateUnit) then
						commonValidation or addValidation
					else if unit.oclIsTypeOf(UpdateUnit) then
						commonValidation or editValidation
					else
						commonValidation or addValidation or editValidation
					endif endif
/]


[template public controller(page : Page, model : WafModel)]
[file(page.controllerFilename(model), false)]
<?php
[if (model.hasAPI)]
namespace [page.webControllersNamespace()/];
[else]
namespace [page.controllersNamespace()/];
[/if]

[page.useStatements()/]


class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{
[for (repository : Repository | page.repositoriesUsed->sortedBy(r | r.name))]
    private $[repository.instanceName()/];

[/for]
[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
    private $[service.instanceName()/];

[/for]
[if (page.hasExplicitValidation())]
    private $validatorService;

[/if]
    private $translationService;

    public function __construct([for (repository : Repository | page.repositoriesUsed->sortedBy(r | r.name)) separator (', ')]
[repository.className()/] $[repository.instanceName()/][/for][if (page.hasRepositoriesUsed and page.hasServicesUsed)]
, [/if][for (service : Service | page.servicesUsed->sortedBy(s | s.name)) separator (', ')]
[service.className()/] $[service.instanceName()/][/for][if (page.hasExplicitValidation())]
[if (page.hasRepositoriesUsed or page.hasServicesUsed)]
, [/if]ValidatorInterface $validator[/if][if (page.hasRepositoriesUsed or page.hasServicesUsed)]
, [/if]TranslatorInterface $translator)
    {
	[for (repository : Repository | page.repositoriesUsed->sortedBy(r | r.name))]
        $this->[repository.instanceName()/] = $[repository.instanceName()/];
	[/for]
	[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
        $this->[service.instanceName()/] = $[service.instanceName()/];
	[/for]
	[if (page.hasExplicitValidation())]
        $this->validatorService = $validator;
	[/if]
        $this->translationService = $translator;
    }

[if (page.hasSingleActionMethod())]
    [page.actionMethod()/]

	[if (page.hasSupportMethods())]
		[for (unit : ContentUnit | page.units->select(u | u.hasSupportMethods()))]
    [unit.actionSupportMethods()/]

		[/for]
	[/if]
	[for (action : Action | page.actionsWithoutTarget)]
    [action.actionMethod()/]

	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits)]
    [unit.unitMethods()/]

		[for (action : Action | unit.actionsWithoutTarget)]
    [action.actionMethod()/]

		[/for]
	[/for]
    [page.renderMethod()/]
[/if]
}
[/file]
[/template]

[template private useStatements(page : Page) post(trim())]
[for (entity : Entity | page.editUnits
		->select(u | not u.oclIsTypeOf(UpdateUnit) or page.units->size() > 1)
		->collect(u | u.contentType)->asSet()->asSequence()->sortedBy(e | e.name))]
use [entity.modelsNamespace()/]\[entity.modelName()/];
[/for]
[for (form : DynamicUnit | page.formUnits->sortedBy(u | u.name))]
use [form.formNamespace()/]\[form.typeClassName()/];
[/for]
[for (repository : Repository | page.repositoriesUsed->sortedBy(r | r.name))]
use [repository.repositoryNamespace()/]\[repository.className()/];
[/for]
[for (service : Service | page.servicesUsed->sortedBy(s | s.name))]
use [service.serviceNamespace()/]\[service.className()/];
[/for]
[if (page.editUnits->collect(u | u.formFields)->select(f | f.isContains)->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (page.hasSingleAuthorisationRole())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
[/if]
[if (page.hasMultipleAuthorisationRoles())]
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
[/if]
use Symfony\Bundle\FrameworkBundle\Controller\[page.baseControllerClassName()/];
[if (page.hasFiltersOrPagination() or page.hasEditUnits)]
use Symfony\Component\HttpFoundation\Request;
[/if]
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
[if (page.hasForgottenPasswordUnits)]
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
[/if]
[if (page.hasExplicitValidation())]
use Symfony\Component\Validator\Validator\ValidatorInterface;
[/if]
use Symfony\Contracts\Translation\TranslatorInterface;
[if (page.hasForgottenPasswordUnits)]
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
[/if]
[/template]

[template private actionMethod(page : Page) post(trim())]
/**
 [page.routeAnnotation()/]
[if (page.isAuthorised)]
 [page.securityAnnotation()/]
[/if]
 */
public function [page.actionName()/]([page.actionMethodFormals()/]): Response
{
[for (unit : DynamicUnit | page.dynamicUnits)]
    [unit.actionCore()/]

[/for]
    [page.renderCore()/]
}
[/template]

[template private renderMethod(page : Page) post(trim())]
private function renderPage([if (page.hasFiltersOrPagination())]
Request $request[if (page.hasRouteParameters())]
, [/if][/if][for (key : Attribute | page.routeParameters()) separator(', ')]
$[key.routeParameterName(page.routeParameters())/][/for]): Response
{
    [page.renderCore()/]
}
[/template]

[template private renderCore(page : Page) post(trim())]
$parameters = array();
[page.templateParameters()/]
[for (unit : ContentUnit | page.units)]
[unit.templateParameters()/]
[/for]

return $this->render('[page.name/]/page[page.htmlExtension()/][page.twigExtension()/]', $parameters);
[/template]


[template private actionMethod(action : Action)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
[let unit : DynamicUnit = action.parentUnit]
/**
 [deleteAction.routeAnnotation(deleteAction.uriElement)/]
[if (deleteAction.isAuthorised)]
 [deleteAction.securityAnnotation()/]
[/if]
 */
public function [deleteAction.actionName()/]([action.actionMethodFormals()/]): Response
{
    [deleteAction.loadInstance()/]
    $this->[unit.contentRepository.instanceName()/]->remove($[deleteAction.instanceName()/], true);

[if (unit.oclIsKindOf(CollectionUnit))]
    return [action.redirect(action.routeActionReturnName(), deleteAction.routeParameters())/];
[else]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(UnitFeature)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = action.parentUnit]
/**
 [operationAction.routeAnnotation(operationAction.uriElement)/]
[if (operationAction.isAuthorised)]
 [operationAction.securityAnnotation()/]
[/if]
 */
public function [operationAction.actionName()/]([unit.actionMethodFormals()/]): [if (operationAction.operation.resultType = OperationResultTypes::None)]
Response[else]File[/if]
{
[if (operationAction.operation.resultType = OperationResultTypes::None)]
[elseif (operationAction.operation.resultType = OperationResultTypes::File)]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethod(action : Action)
	? (action.oclIsKindOf(OperationAction) and action.usedBy.oclIsKindOf(DynamicUnit)) post(trim())]
[let operationAction : OperationAction = action.oclAsType(OperationAction)]
[let unit : DynamicUnit = operationAction.parentUnit]
/**
[if (action.oclIsTypeOf(InstanceOperationAction))]
 [operationAction.routeAnnotation(operationAction.uriElement)/]
[elseif (action.oclIsTypeOf(ContainerOperationAction))]
 [operationAction.routeContainerAnnotation()/]
[else]
 [operationAction.routeGeneralAnnotation()/]
[/if]
[if (operationAction.isAuthorised)]
 [operationAction.securityAnnotation()/]
[/if]
 */
public function [operationAction.actionName()/]([if (action.oclIsTypeOf(InstanceOperationAction))]
[action.actionMethodFormals()/][elseif (action.oclIsTypeOf(ContainerOperationAction))]
[action.actionMethodContainerFormals()/][else]
[/if]): [if (operationAction.operation.resultType = OperationResultTypes::None)]
Response[else]File[/if]

{
[if (not operationAction.operation.oclIsUndefined())]
    [operationAction.actionMethodBody()/]
[/if]
}
[/let]
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(InstanceOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.parentUnit]
[action.loadInstance()/]
[if (action.hasSuccessMessage and action.hasFailureMessage or action.hasFailureMessage)]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (action.hasSuccessMessage or action.hasFailureMessage)]
[action.actionResultFlash()/]
[/if]
return [action.redirect(action.routeActionReturnName(), action.routeParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(ContainerOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.parentUnit]
[action.parentUnit.loadContainer()/];
[if (action.hasSuccessMessage and action.hasFailureMessage or action.hasFailureMessage)]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (action.hasSuccessMessage or action.hasFailureMessage)]
[action.actionResultFlash()/]
[/if]
return [action.redirect(action.routeActionReturnName(), action.parentUnit.routeParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(GeneralOperationAction) and action.operation.resultType = OperationResultTypes::None) post(trim())]
[let unit : DynamicUnit = action.parentUnit]
[if (action.hasSuccessMessage and action.hasFailureMessage or action.hasFailureMessage)]
$result = [/if]$this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
[if (action.hasSuccessMessage or action.hasFailureMessage)]
[action.actionResultFlash()/]
[/if]
return [action.redirect(action.routeActionReturnName(), action.parentUnit.routeContainerParameters())/];
[/let]
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(InstanceOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
[action.loadInstance()/]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
$response = $this->file($file, $[action.parentUnit.instanceName()/].getName()[if (not action.fileExtension.oclIsUndefined())]
 . '[action.fileExtension/]'[/if]);
return $response;
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(ContainerOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
[action.parentUnit.loadContainer()/];
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]($[action.instanceName()/]);
$response = $this->file($file, $[action.parentUnit.instanceName()/].getName()[if (not action.fileExtension.oclIsUndefined())]
 . '[action.fileExtension/]'[/if]);
return $response;
[/template]

[template private actionMethodBody(action : OperationAction)
	? (action.oclIsTypeOf(GeneralOperationAction) and action.operation.resultType = OperationResultTypes::File) post(trim())]
$file = $this->[action.operation.partOf.instanceName()/]->[action.operation.methodName()/]();
$response = $this->file($file, '[action.instanceName()/][if (not action.fileExtension.oclIsUndefined())]
 . [action.fileExtension/][/if]');
return $response;
[/template]
