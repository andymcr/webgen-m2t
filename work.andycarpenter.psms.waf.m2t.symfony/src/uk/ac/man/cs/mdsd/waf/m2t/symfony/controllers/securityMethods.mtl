[comment encoding = UTF-8 /]
[module securityMethods(
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::interface/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(RegistrationUnit)) post(trim())]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
/**
 [unit.routeAnnotation()/]
 **/
public function [unit.actionName()/](): Response
{
    if (!$this->isGranted("IS_ANONYMOUS")) {
[if (unit.genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[unit.genModel.homeUnit().routeName()/]");
[/if]
    }
    throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
/**
 [unit.routeAnnotation()/]
 **/
public function [unit.actionName()/](AuthenticationUtils $authenticationUtils[if (loginUnit.hasCaptcha)]
, Recaptcha3Validator $recaptcha3Validator, LoggerInterface $logger[/if]): Response
{
    if (!$this->isGranted("IS_ANONYMOUS")) {
[if (unit.genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[unit.genModel.homeUnit().routeName()/]");
[/if]
    }
    $[unit.instanceName()/] = new [unit.modelClassName()/];
    $[loginUnit.formName()/] = $this->createForm([loginUnit.typeClassName()/]::class, $[unit.instanceName()/], array(
        'action' => $this->generateUrl('[unit.routeName()/]'),
        'csrf_token_id' => '[unit.displayedOn.partOf.siteProperties.siteName/]_authenticate',
    ));

    $parameters = array();
    [loginUnit.displayedOn.templateParameters()/]
    $parameters['['/]'[unit.instanceName()/]'[']'/] = $[loginUnit.formName()/]->createView();
    $parameters['['/]'[unit.instanceName()/]_error'[']'/] = $authenticationUtils->getLastAuthenticationError();
    return $this->render('[unit.displayedOn.templateName()/]/[unit.templateName()/][unit.htmlExtension()/][unit.twigExtension()/]', $parameters);
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LogoutUnit)) post(trim())]
[let logoutUnit : LogoutUnit = unit.oclAsType(LogoutUnit)]
/**
 [unit.routeAnnotation()/]
 */
public function [unit.actionName()/](): Response
{
    throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ForgottenPasswordUnit)) post(trim())]
[let forgottenUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
/**
 [forgottenUnit.routeAnnotation()/]
 **/
public function [unit.actionName()/]Request(Request $request, MailerInterface $mailer[if (forgottenUnit.hasCaptcha)]
, Recaptcha3Validator $recaptcha3Validator, LoggerInterface $logger[/if]): Response
{
    if (!$this->isGranted("IS_ANONYMOUS")) {
[if (unit.genModel.homeUnit().oclIsUndefined())]
        return $this->redirect("/");
[else]
        return $this->redirectToRoute("[unit.genModel.homeUnit().routeName()/]");
[/if]
    }
    $[forgottenUnit.formName()/] = $this->createForm([forgottenUnit.typeClassName()/]::class);
    $[forgottenUnit.formName()/]->handleRequest($request);
    if ($[forgottenUnit.formName()/]->isSubmitted() && $[forgottenUnit.formName()/]->isValid()) {
[if (forgottenUnit.hasCaptcha)]
        if ($recaptcha3Validator->getLastResponse() !== null) {
            $score = $recaptcha3Validator->getLastResponse()->getScore();
            $logger->error("Score ".$score);
        }
[/if]
        return $this->processSendingPasswordResetEmail(
            $[forgottenUnit.formName()/]->get('[if (unit.localAuthentication.authenticationKey = AuthenticationKeyTypes::Email)]
email[else]username[/if]')->getData(),
            $mailer
        );
    }

    $parameters = array();
    [forgottenUnit.displayedOn.templateParameters()/]
    $parameters['['/]'[unit.instanceName()/]'[']'/] = $[forgottenUnit.formName()/]->createView();
    $parameters['['/]'[unit.instanceName()/]_error'[']'/] = null;
    return $this->render('[unit.displayedOn.templateName()/]/[unit.templateName()/][unit.htmlExtension()/][unit.twigExtension()/]', $parameters);
}

/**
 * Confirmation page after a user has requested a password reset.
 *
 [forgottenUnit.routeEmailSentAnnotation()/]
 **/
public function [unit.actionName()/]CheckEmail(): Response
{
    // We prevent users from directly accessing this page
    if (null === ($resetToken = $this->getTokenObjectFromSession())) {
        return $this->redirectToRoute('[forgottenUnit.routeName()/]');
    }

    return $this->render('[forgottenUnit.displayedOn.templateName()/]/[forgottenUnit.viewCheckEmailName()/][forgottenUnit.htmlExtension()/][forgottenUnit.twigExtension()/]', ['['/]
//        'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
       'resetToken' => $resetToken,
    [']'/]);
}

private function processSendingPasswordResetEmail(string $emailFormData, MailerInterface $mailer): RedirectResponse
{
    $user = $this->getDoctrine()->getRepository(Authentication::class)->findOneBy(['['/]
        'email' => $emailFormData,
    [']'/]);

    // Do not reveal whether a user account was found or not.
    if (!$user) {
        return $this->redirectToRoute('[forgottenUnit.routeEmailSentName()/]');
    }

    try {
        $resetToken = $this->resetPasswordHelper->generateResetToken($user);
    } catch (ResetPasswordExceptionInterface $e) {
        // If you want to tell the user why a reset email was not sent, uncomment
        // the lines below and change the redirect to '[forgottenUnit.routeName()/]'.
        // Caution: This may reveal if a user is registered or not.
        //
        // $this->addFlash('reset_password_error', sprintf(
        //     'There was a problem handling your password reset request - %s',
        //     $e->getReason()
        // ));

        return $this->redirectToRoute('[forgottenUnit.routeEmailSentName()/]');
    }

    $email = (new TemplatedEmail())
        ->from(new Address('info@salephoto.org.uk', 'SPS'))
        ->to($user->getEmail())
        ->subject('[forgottenUnit.emailSubject/]')
        ->htmlTemplate('[forgottenUnit.displayedOn.templateName()/]/[forgottenUnit.viewEmailMessageName()/][forgottenUnit.htmlExtension()/][forgottenUnit.twigExtension()/]')
        ->context(['['/]
            'resetToken' => $resetToken,
        [']'/]);

    $mailer->send($email);

    // Store the token object in session for retrieval in check-email route.
    $this->setTokenObjectInSession($resetToken);

    return $this->redirectToRoute('[forgottenUnit.routeEmailSentName()/]');
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ResetPasswordUnit)) post(trim())]
[let resetUnit : ResetPasswordUnit = unit.oclAsType(ResetPasswordUnit)]
/**
 [resetUnit.routeAnnotation()/]
 **/
public function [unit.actionName()/]Reset(Request $request, UserPasswordEncoderInterface $passwordEncoder, string $token = null): Response
{
    if ($token) {
        // We store the token in session and remove it from the URL, to avoid the URL being
        // loaded in a browser and potentially leaking the token to 3rd party JavaScript.
        $this->storeTokenInSession($token);

        return $this->redirectToRoute('[resetUnit.routeName()/]');
    }

    $token = $this->getTokenFromSession();
    if (null === $token) {
        throw $this->createNotFoundException('No reset password token found in the URL or in the session.');
    }

    try {
        $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
    } catch (ResetPasswordExceptionInterface $e) {
        $this->addFlash('reset_password_error', sprintf(
            'There was a problem validating your reset request - %s',
            $e->getReason()
        ));

        return $this->redirectToRoute('[resetUnit.forgottenPasswordUnit.routeName()/]');
    }

    // The token is valid; allow the user to change their password.
    $[resetUnit.formName()/] = $this->createForm([resetUnit.typeClassName()/]::class);
    $[resetUnit.formName()/]->handleRequest($request);
    if ($[resetUnit.formName()/]->isSubmitted() && $[resetUnit.formName()/]->isValid()) {
        // A password reset token should be used only once, remove it.
        $this->resetPasswordHelper->removeResetRequest($token);

        // Encode the plain password, and set it.
        $encodedPassword = $passwordEncoder->encodePassword(
            $user,
            $[resetUnit.formName()/]->get('plainPassword')->getData()
         );

        $user->setPassword($encodedPassword);
        [resetUnit.getContentRepository()/]->save($user, true);

        // The session is cleaned up after the password has been changed.
        $this->cleanSessionAfterReset();

        return $this->redirectToRoute('[resetUnit.displayedOn.partOf.homeUnit().routeName()/]');
    }

    $parameters = array();
    [resetUnit.displayedOn.templateParameters()/]
    $parameters['['/]'[resetUnit.instanceName()/]'[']'/] = $[resetUnit.formName()/]->createView();
    $parameters['['/]'[resetUnit.instanceName()/]_error'[']'/] = null;
    return $this->render('[resetUnit.displayedOn.templateName()/]/[resetUnit.templateName()/][resetUnit.htmlExtension()/][resetUnit.twigExtension()/]', $parameters);
}
[/let]
[/template]
