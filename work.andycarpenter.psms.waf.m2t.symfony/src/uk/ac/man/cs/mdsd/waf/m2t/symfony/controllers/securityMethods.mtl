[comment encoding = UTF-8 /]
[module securityMethods(
	'http://andycarpenter.work/psm/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::security/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::annotations/]
[import uk::ac::man::cs::mdsd::waf::m2t::symfony::controllers::commonMethods/]


[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(RegistrationUnit)) post(trim())]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
/**
 [unit.routeAnnotation()/]
[if (unit.hasAuthorisation())]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/](): Response
{
    throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
/**
 [unit.routeAnnotation()/]
[if (unit.hasAuthorisation())]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/](AuthenticationUtils $authenticationUtils): Response
{
    $[loginUnit.instanceName()/] = [loginUnit.createInstance()/];
    $[loginUnit.instanceName()/]->[if (unit.localAuthentication().authenticationKey = AuthenticationKeyTypes::Email)]
[unit.localAuthentication().authenticationModel.getFeature('email').setMethodName()/][else]
[unit.localAuthentication().authenticationModel.getFeature('username').setMethodName()/][/if]($authenticationUtils->getLastUsername());
    $[loginUnit.formName()/] = $this->createForm([loginUnit.typeClassName()/]::class, $[loginUnit.instanceName()/], array(
        'action' => $this->generateUrl('[loginUnit.routeName()/]')
    ));
    $error = $authenticationUtils->getLastAuthenticationError();
    return $this->render('[unit.displayedOn.name/]/[unit.viewName()/][unit.htmlExtension()/][unit.twigExtension()/]', ['['/]
        '[loginUnit.instanceName()/]' => $[loginUnit.formName()/]->createView(),
        'error'         => $error,
    [']'/]);
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LogoutUnit)) post(trim())]
[let logoutUnit : LogoutUnit = unit.oclAsType(LogoutUnit)]
/**
 [unit.routeAnnotation()/]
[if (unit.hasAuthorisation())]
 [unit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/](): Response
{
    throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
}
[/let]
[/template]

[template public unitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ForgottenPasswordUnit)) post(trim())]
[let resetUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
/**
 [resetUnit.routeAnnotation()/]
[if (resetUnit.hasAuthorisation())]
 [resetUnit.securityAnnotation()/]
[/if]
 */
public function [unit.actionName()/]Request(Request $request, MailerInterface $mailer): Response
{
    $form = $this->createForm(SecurityResetPasswordRequestType::class);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        return $this->processSendingPasswordResetEmail(
            $form->get('[if (unit.localAuthentication().authenticationKey = AuthenticationKeyTypes::Email)]
email[else]username[/if]')->getData(),
            $mailer
        );
    }

    return $this->render('[resetUnit.displayedOn.name/]/[resetUnit.viewResetRequestName()/][resetUnit.htmlExtension()/][resetUnit.twigExtension()/]', ['['/]
        'requestForm' => $form->createView(),
    [']'/]);
}

/**
 * Confirmation page after a user has requested a password reset.
 *
 * @Route("/check-email", name="app_check_email")
 */
public function [unit.actionName()/]CheckEmail(): Response
{
    // We prevent users from directly accessing this page
    if (!$this->canCheckEmail()) {
        return $this->redirectToRoute('[resetUnit.routeName()/]');
    }

    return $this->render('[resetUnit.displayedOn.name/]/[resetUnit.viewResetCheckName()/][resetUnit.htmlExtension()/][resetUnit.twigExtension()/]', ['['/]
        'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
    [']'/]);
}

/**
 * Validates and process the reset URL that the user clicked in their email.
 *
 * @Route("/reset/{token}", name="app_reset_password")
 */
public function [unit.actionName()/]Reset(Request $request, UserPasswordEncoderInterface $passwordEncoder, string $token = null): Response
{
    if ($token) {
        // We store the token in session and remove it from the URL, to avoid the URL being
        // loaded in a browser and potentially leaking the token to 3rd party JavaScript.
        $this->storeTokenInSession($token);

        return $this->redirectToRoute('app_reset_password');
    }

    $token = $this->getTokenFromSession();
    if (null === $token) {
        throw $this->createNotFoundException('No reset password token found in the URL or in the session.');
    }

    try {
        $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
    } catch (ResetPasswordExceptionInterface $e) {
        $this->addFlash('reset_password_error', sprintf(
            'There was a problem validating your reset request - %s',
            $e->getReason()
        ));

        return $this->redirectToRoute('app_forgot_password_request');
    }

    // The token is valid; allow the user to change their password.
    $form = $this->createForm(SecurityChangePasswordType::class);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
        // A password reset token should be used only once, remove it.
        $this->resetPasswordHelper->removeResetRequest($token);

        // Encode the plain password, and set it.
        $encodedPassword = $passwordEncoder->encodePassword(
            $user,
            $form->get('plainPassword')->getData()
         );

        $user->setPassword($encodedPassword);
        $this->getDoctrine()->getManager()->flush();

        // The session is cleaned up after the password has been changed.
        $this->cleanSessionAfterReset();

        return $this->redirectToRoute('home');
    }

    return $this->render('[displayedOn.name/]/reset.html.twig', ['['/]
        'resetForm' => $form->createView(),
    [']'/]);
}

private function processSendingPasswordResetEmail(string $emailFormData, MailerInterface $mailer): RedirectResponse
{
    $user = $this->getDoctrine()->getRepository(Authentication::class)->findOneBy(['['/]
        'email' => $emailFormData,
    [']'/]);

    // Marks that you are allowed to see the app_check_email page.
    $this->setCanCheckEmailInSession();

    // Do not reveal whether a user account was found or not.
    if (!$user) {
        return $this->redirectToRoute('app_check_email');
    }

    try {
        $resetToken = $this->resetPasswordHelper->generateResetToken($user);
    } catch (ResetPasswordExceptionInterface $e) {
        // If you want to tell the user why a reset email was not sent, uncomment
        // the lines below and change the redirect to 'app_forgot_password_request'.
        // Caution: This may reveal if a user is registered or not.
        //
        // $this->addFlash('reset_password_error', sprintf(
        //     'There was a problem handling your password reset request - %s',
        //     $e->getReason()
        // ));

        return $this->redirectToRoute('app_check_email');
    }

    $email = (new TemplatedEmail())
        ->from(new Address('info@salephoto.org.uk', 'SPS'))
        ->to($user->getEmail())
        ->subject('Your password reset request')
        ->htmlTemplate('[resetUnit.displayedOn.name/]/[resetUnit.viewResetEmailName()/][resetUnit.htmlExtension()/][resetUnit.twigExtension()/]')
        ->context(['['/]
            'resetToken' => $resetToken,
            'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
        [']'/])
    ;

    $mailer->send($email);

    return $this->redirectToRoute('app_check_email');
}
[/let]
[/template]

