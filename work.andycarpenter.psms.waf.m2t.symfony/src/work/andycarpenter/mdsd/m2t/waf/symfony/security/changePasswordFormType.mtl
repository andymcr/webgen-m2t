[comment encoding = UTF-8 /]
[module changePasswordFormType(
	'http://andycarpenter.work/metamodel/security',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]


[template public changePasswordFormType(security : LocalAuthenticationSystem)]
[file (security.formTypeFilename(security.changePasswordName()), false)]
<?php
namespace [security.formNamespace()/];

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class [security.changePasswordTypeClassName()/] extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('plainPassword', RepeatedType::class, ['['/]
                'type' => PasswordType::class,
                'first_options' => ['['/]
                    'constraints' => ['['/]
                        new NotBlank(['['/]
                            'message' => 'Please enter a password',
                        [']'/]),
                        new Length(['['/]
                            'min' => 6,
                            'minMessage' => 'Your password should be at least {{ limit }} characters',
                            // max length allowed by Symfony for security reasons
                            'max' => 4096,
                        [']'/]),
                    [']'/],
                    'label' => 'New password',
                [']'/],
                'second_options' => ['['/]
                    'label' => 'Repeat Password',
                [']'/],
                'invalid_message' => 'The password fields must match.',
                // Instead of being set onto the object directly,
                // this is read and encoded in the controller
                'mapped' => false,
            [']'/])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults(['['/][']'/]);
    }
}
[/file]
[/template]
