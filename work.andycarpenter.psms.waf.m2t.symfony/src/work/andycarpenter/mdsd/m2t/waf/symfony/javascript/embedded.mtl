[comment encoding = UTF-8 /]
[module embedded(
	'http://andycarpenter.work/metamodel/ObjectRelationalMapping',
	'http://andycarpenter.work/metamodel/WebApplicationFramework')]
[import work::andycarpenter::mdsd::m2t::waf::symfony::files/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::interface/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::names/]
[import work::andycarpenter::mdsd::m2t::waf::symfony::expression::javascript/]


[template public javascriptEmbedded(model : WafModel) post(trim())]
[model.embeddedAttributes()/]

[model.embeddedContainers()/]
[/template]

[template private embeddedAttributes(model : WafModel) post(trim())]
[for (field : UnitField | model.formFields->select(f | f.oclIsKindOf(UnitAttribute) and not f.isSingleton))]
[let attribute : UnitAttribute = field.oclAsType(UnitAttribute)]
[if (attribute.collectionUiAllowAdd or attribute.collectionUiAllowRemove)]
[attribute.addLinks(attribute.attribute.singletonName)/]

	[if (attribute.collectionUiAllowAdd)]
[attribute.addLink(attribute.attribute.singletonName)/]

[attribute.addForm(attribute.attribute.singletonName)/]

	[/if]
	[if (attribute.collectionUiAllowRemove)]
[attribute.removeLink(attribute.attribute.singletonName)/]

	[/if]
[/if]
[/let]
[/for]
[/template]

[template private embeddedContainers(model : WafModel) post(trim())]
[for (contains : UnitField | model.formFields->select(f | f.isContains))]
[let association : UnitAssociation = contains.oclAsType(UnitAssociation)]
[if (association.collectionUiAllowAdd or association.collectionUiAllowRemove)]
[association.addLinks(association.association.targetType.name)/]

	[if (association.collectionUiAllowAdd)]
[association.addLink(association.association.targetType.name)/]

[association.addForm(association.association.targetType.name)/]

	[/if]
	[if (association.collectionUiAllowRemove)]
[association.removeLink(association.association.targetType.name)/]

	[/if]
[/if]
[/let]
[/for]
[/template]

[template private addLinks(feature : UnitFeature, type : String) post(trim())]
[if (feature.collectionUiAllowRemove)]
var [feature.persistentFeature.name/] = document.querySelectorAll('#[feature.displayedOn.formId()/] > div > div.[feature.persistentFeature.name.asId()/] > div');
for (var i = 0; i < [feature.persistentFeature.name/].length; ++i) {
    [type.toLowerFirst()/]RemoveLink([feature.persistentFeature.name/]['['/]i[']'/]);
}
[/if]
[if (feature.collectionUiAllowAdd)]
var [feature.persistentFeature.name/]Container = document.querySelector('#[feature.displayedOn.formId()/] > div > div.[feature.persistentFeature.name.asId()/]');
if ([feature.persistentFeature.name/]Container) {
    [feature.persistentFeature.name/]Container.dataset.index = [feature.persistentFeature.name/].length;
    [type.toLowerFirst()/]AddLink([feature.persistentFeature.name/]Container);
}
[/if]
[/template]

[template private addLink(feature : UnitFeature, type : String)]
function [type.toLowerFirst()/]AddLink(container) {
    var addDiv = document.createElement('div');
    var button = document.createElement('input');
    addDiv.append(button);
    button.type = 'button';
    button.name = 'add[type.toUpperFirst()/]';
    button.value = 'Add [type/]'
    button.onclick = function(e) {
        e.preventDefault();
        [type.toLowerFirst()/]AddForm(container, addDiv);
    };
    [feature.persistentFeature.name/]Container.append(addDiv);
}
[/template]

[template private addForm(feature : UnitFeature, type : String)]
function [type.toLowerFirst()/]AddForm(container, addDiv) {
    var template = document.createElement('template');
    template.innerHTML = container.dataset.prototype.replace(/__name__/g, container.dataset.index);
    container.dataset.index = Number(container.dataset.index) + 1;
    var newDiv = document.createElement('div');
    newDiv.appendChild(template.content);
    addDiv.before(newDiv);
}
[/template]

[template private removeLink(feature : UnitFeature, type : String)]
function [type.toLowerFirst()/]RemoveLink([feature.instanceName()/]) {
    var button = document.createElement('input');
    [feature.instanceName()/].append(button);
    button.type = 'button';
    button.name = 'remove[type.toUpperFirst()/]';
    button.value = 'Delete [type/]'
    button.onclick = function(e) {
        e.preventDefault();
        [feature.instanceName()/].remove();
    };
}
[/template]

[query private id(field : UnitField) : String
	= field.displayedOn.instanceParameter().asId().concat('_').concat(field.modelPropertyName())
/]
