[comment encoding = UTF-8 /]
[module security(
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions]
[import uk::ac::man::cs::mdsd::waf::m2t::core::featureProperties]


[query public isAuthenticated(model : WafModel) : Boolean
	= not model.authentication.oclIsUndefined()
/]

[query public casAuthentication(model : WafModel) : CasAuthentication
	= model.authentication.oclAsType(CasAuthentication)
/]

[query public isCasAuthenticated(model : WafModel) : Boolean
	= if model.isAuthenticated() then
			model.authentication.oclIsTypeOf(CasAuthentication)
		else
			false
		endif
/]

[query public isLocallyAuthenticated(model : WafModel) : Boolean
	= if model.isAuthenticated() then
			model.authentication.oclIsTypeOf(LocalAuthenticationSystem)
		else
			false
		endif
/]

[query public localAuthentication(model : WafModel) : LocalAuthenticationSystem
	= model.authentication.oclAsType(LocalAuthenticationSystem)
/]


[query public authenticationUnits(page : Page) : Sequence(AuthenticationUnit)
	= page.units->select(u | u.oclIsKindOf(AuthenticationUnit)).oclAsType(AuthenticationUnit)
/]

[query public hasAuthenticationUnit(page : Page) : Boolean
	= page.authenticationUnits()->notEmpty()
/]

[query public hasAuthorisation(page : Page) : Boolean
	= page.units->select(u | u.hasAuthorisation())->notEmpty()
/]

[query public isRequiresRoleCommon(page : Page) : Boolean
	= if page.units->size() < 2 then
			true
		else if page.units->size() = 2 then
			page.units->first().requiresRole = page.units->last().requiresRole
		else
			page.units->subOrderedSet(2, page.units->size())->forAll(u | u.requiresRole = page.units->first().requiresRole)
		endif endif
/]

[query public requiresRole(page : Page) : String
	= if page.units->isEmpty() then
			''
		else
			page.units->first().requiresRole
		endif
/]


[query public hasAuthorisation(unit : ContentUnit) : Boolean
	= unit.requiresRole <> ''
 		or if unit.oclIsKindOf(DynamicUnit) then
				unit.oclAsType(DynamicUnit).inlineActionsRequiringHandlers()->select(a | a.requiresRole() <> '')->notEmpty()
			else
				false
			endif
/]

