[comment encoding = UTF-8 /]
[module units(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features]
[import uk::ac::man::cs::mdsd::waf::m2t::core::actions]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service]
[import uk::ac::man::cs::mdsd::waf::m2t::core::uriRoutes]


[query public associationFeatures(unit : DynamicUnit) : Sequence(UnitAssociation)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
/]

[query public booleanFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.booleanFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public booleanFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isBooleanDataType())
/]

[query public captchaFields(unit : DynamicUnit) : Sequence(CaptchaField)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(CaptchaField)).oclAsType(CaptchaField)
/]

[query public childDynamicUnits(unit : ContentUnit) : Sequence(DynamicUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
/]

[query public childGalleryUnits(unit : ContentUnit) : Sequence(GalleryUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(GalleryUnit)).oclAsType(GalleryUnit)
/]

[query public childImageUnits(unit : ContentUnit) : Sequence(ImageUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(ImageUnit)).oclAsType(ImageUnit)
/]

[query public childIndexUnits(unit : ContentUnit) : Sequence(IndexUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(IndexUnit)).oclAsType(IndexUnit)
/]

[query public childSliderUnits(unit : ContentUnit) : Sequence(SliderUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(SliderUnit)).oclAsType(SliderUnit)
/]

[query public childUnits(unit : ContentUnit) : Sequence(ContentUnit)
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).displayFields
				->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
				->select(a | a.units->notEmpty())
				->collect(a | a.units)
		else
			Sequence{}
		endif
/]

[query public collectionFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.collectionFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public collectionFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | not f.isSingleton())
/]

[query public containerService(unit : DynamicUnit) : Service
	= let model : WafModel = unit.pageDisplayedOn().partOf
		in if unit.isContained() then
			model.services(unit.contentType().container())->first()
		else
			null
		endif
/]

[query public containingAssociation(unit : DynamicUnit) : Association
	= if unit.contentType().oclIsUndefined() then
			null
		else
			unit.contentType().containingAssociation()
		endif
/]

[query public containingUnit(unit : DynamicUnit) : DynamicUnit
	= if unit.displayedOn.oclIsTypeOf(Page) then
			unit
		else
			unit.displayedOn.oclAsType(UnitAssociation).displayedOn.containingUnit()
		endif
/]

[query public contentService(unit : DynamicUnit) : Service
	= let model : WafModel = unit.pageDisplayedOn().partOf
		in model.services(unit.contentType())->first()
/]

[query public contentType(unit : ContentUnit) : EntityOrView
	= if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).contentType
		else if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).contentType()
		else
			null
		endif endif
/]

[query public contentType(unit : CollectionUnit) : EntityOrView
	= unit.contentType->first()
/]

[query public dataTypeFeatures(unit : DynamicUnit, includeEnumerations : Boolean) : Sequence(UnitFeature)
	= unit.dataTypeFields(includeEnumerations)
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public dataTypeFields(unit : DynamicUnit, includeEnumerations : Boolean) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | (f.isDataType() and not f.isEnumerationType()) or (includeEnumerations and f.isEnumerationType()))
/]

[query public dateFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.dateFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public dateFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isDate())
/]

[query public defaultValueFields(unit : DynamicUnit) : Set(UnitField)
	= unit.displayFields->select(f | f.hasDefaultValue())
/]

[query public displayedAssociations(unit : DynamicUnit) : Sequence(Association)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
		->collect(a | a.association)
/]

[query public encryptedFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
		->select(f | f.isEncrypted())
/]

[query public enumerationFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
		->select(f | f.isEnumerationType())
/]

[query public forcedValueFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.hasForcedValue()).oclAsType(UnitFeature)
/]

[query public hasCaptchaFields(unit : DynamicUnit) : Boolean
	= unit.captchaFields()->notEmpty()
/]

[query public hasChangableCollections(unit : DynamicUnit) : Boolean
	= if not unit.oclIsKindOf(EditUnit) then
			false
		else
			unit.displayFields
				->select(f | not f.isSingleton())
				->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
				->select(f | f.collectionUiAllowAdd or f.collectionUiAllowRemove)
				->notEmpty()
		endif
/]

[query public hasCustomisedBody(unit : EditUnit) : Boolean
	= unit.customiseValues
		or unit.hasForcedValueFeatures()
		or (unit.isContained() and not unit.displayedAssociations()->includes(unit.containingAssociation()))
/]

[query public hasDefaultValueFields(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).defaultValueFields()->notEmpty()
		else
			false
		endif
/]

[query public hasDisabledFeatures(unit : DynamicUnit) : Boolean
	= unit.displayFields->select(f | f.disableInput)->notEmpty()
/]

[query public hasEncryptedFeatures(unit : DynamicUnit) : Boolean
	= unit.encryptedFeatures()->notEmpty()
/]

[query public hasFilters(unit : CollectionUnit) : Boolean
	= unit.supportedFilters->notEmpty()
/]

[query public hasForcedValueFeatures(unit : DynamicUnit) : Boolean
	= unit.forcedValueFeatures()->notEmpty()
/]

[query public hasInterfaceFields(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).interfaceFields()->notEmpty()
		else
			false
		endif
/]

[query public hasObjectAccess(unit : CollectionUnit) : Boolean
	= unit.oclAsType(DynamicUnit).hasObjectAccess()
/]

[query public hasObjectAccess(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then
			let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)
				in if collectionUnit.selection.oclIsUndefined() then
					true
				else
					collectionUnit.selection.joins->isEmpty() or collectionUnit.selection.fields->isEmpty()
				endif
		else if unit.oclIsKindOf(DataUnit) then
			let dataUnit : DataUnit = unit.oclAsType(DataUnit)
				in if dataUnit.defaultSelection.oclIsUndefined() then
					true
				else
					dataUnit.defaultSelection.joins->isEmpty() or dataUnit.defaultSelection.fields->isEmpty()
				endif
		else if unit.oclIsKindOf(EditUnit) then
			true
		else
			false
		endif endif endif
/]

[query public hasPagination(unit : CollectionUnit) : Boolean
	= if unit.selection.oclIsUndefined() then 
			unit.defaultPaginationSize > 0
		else
			unit.defaultPaginationSize > 0 and unit.selection.hasPaginationSupport()
		endif

/]

[query public hasPagination(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).hasPagination()
		else
			false
		endif
/]

[query public inputFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields->select(f |
		if f.oclIsKindOf(UnitFeature) then
			f.oclAsType(UnitFeature).isModifiable()
		else
			true
		endif)
/]

[query public interfaceFields(unit : DynamicUnit) : Sequence(InterfaceField)
	= unit.displayFields->select(f | f.oclIsKindOf(InterfaceField)).oclAsType(InterfaceField)
/]

[query public isContained(unit : DynamicUnit) : Boolean
	= if unit.contentType().oclIsUndefined() then
			false
		else
			unit.contentType().isContained()
		endif
/]

[query public pageDisplayedOn(unit : ContentUnit) : Page
	= if unit.displayedOn.oclIsTypeOf(Page) then
			unit.displayedOn.oclAsType(Page)
		else
			unit.displayedOn.oclAsType(UnitAssociation).displayedOn.pageDisplayedOn()
		endif
/]

[query public routedSelection(unit : CollectionUnit) : Boolean
	= if unit.selection.oclIsUndefined() then
			false
		else
			unit.selection.selectPath->notEmpty()
		endif
/]

[query public routingService(unit : DynamicUnit) : Service
	= let model : WafModel = unit.pageDisplayedOn().partOf
		in model.services(unit.routingType())->first()
/]

[query public searchFields(unit : IndexUnit) : Bag(UnitField)
	= unit->collect(targettingSearches.displayFields)
/]

[query public selectionService(unit : CollectionUnit) : Service
	= let model : WafModel = unit.oclAsType(DynamicUnit).pageDisplayedOn().partOf
		in if not unit.selectionType().oclIsUndefined() then
				model.services(unit.selectionType())->first()
			else
				null
			endif
/]

[query public selectionType(unit : CollectionUnit) : EntityOrView
	= if unit.selection.selectPath->notEmpty() then
			unit.selection.selectionType()
		else
			let association : EntityAssociation
				= unit.contentType->first().containingAssociation()
				in if association.oclIsUndefined() or unit.oclAsType(SelectableUnit).selectors->isEmpty() then
						unit.contentType->first()
					else
						association.targetType()
					endif
		endif
/]

[query public services(unit : DynamicUnit) : Sequence(Service)
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).services()
		else if unit.oclIsKindOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).services()
		else if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).services()
		else
			Sequence{}
		endif endif endif
/]

[query private services(unit : CollectionUnit) : Sequence(Service)
	= let routingType : EntityOrView = unit.routingType()
		in if routingType.oclIsUndefined() then
				unit.services2()
			else
				Sequence{ unit.oclAsType(DynamicUnit).routingService() }
					->union(unit.services2())
			endif
				->union(
					if unit.oclAsType(DynamicUnit).hasInlineActions() then
						Sequence{ unit.oclAsType(DynamicUnit).contentService() }
					else
						Sequence{}
					endif)
/]

[query private services2(unit : CollectionUnit) : Sequence(Service)
	= if not unit.selection.oclIsUndefined() then
			if unit.routedSelection() then
				Sequence{ unit.oclAsType(DynamicUnit).contentService() }
			else
				Sequence{ unit.selectionService() }
			endif
		else
			Sequence{ unit.oclAsType(DynamicUnit).contentService() }
		endif
/]

[query private services(unit : DetailsUnit) : Sequence(Service)
	= if unit.defaultSelection.oclIsUndefined() then
			Sequence{ unit.routingService() }
		else
			Sequence{ unit.contentService() }
		endif
/]

[query private services(unit : EditUnit) : Sequence(Service)
	= let containerService : Sequence(Service)
		= if unit.hasCustomisedBody() and unit.isContained() then
				if unit.oclIsTypeOf(CreateUnit) or unit.oclIsTypeOf(CreateUpdateUnit)then
					Sequence{ unit.containerService() }
				else
					Sequence{}
				endif
			else
				Sequence{}
			endif
		in if unit.oclIsTypeOf(UpdateUnit) or unit.oclIsTypeOf(CreateUpdateUnit) then
				Sequence{ unit.routingService() }
			else
				Sequence{}
			endif->union(containerService)
/]

[query public urlFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.urlFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public urlFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isUrl())
/]
