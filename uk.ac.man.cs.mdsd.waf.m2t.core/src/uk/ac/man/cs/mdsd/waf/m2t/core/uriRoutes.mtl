[comment encoding = UTF-8 /]
[module uriRoutes(
	'http://cs.manchester.ac.uk/mdsd/API',
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::waf::m2t::core::service]


[query public keyEntity(entity : EntityOrView) : EntityOrView
	= if entity.attributeKeys()->notEmpty() then
			entity
		else if entity.isContained() then
			entity.container().keyEntity()
		else
			null
		endif endif
/]

[query public parentEntity(entity : EntityOrView) : EntityOrView
	= let keyEntity : EntityOrView = entity.keyEntity()
		in if keyEntity.oclIsUndefined() then
				null
			else if not keyEntity.isContained() then
				null
			else
				keyEntity.container().keyEntity()
			endif endif
/]

[query private parentUriPathKeys(entity : EntityOrView) : Sequence(Attribute)
	= let parentEntity : EntityOrView = entity.parentEntity()
		in if not parentEntity.oclIsUndefined() then
				parentEntity.uriPathKeys()
			else
				Sequence{}
			endif
/]


[query public uriPathKeys(entity : EntityOrView) : Sequence(Attribute)
	= let keyEntity : EntityOrView = entity.keyEntity()
		in if keyEntity.oclIsUndefined() then
				Sequence{}
			else
				let localKeys : Sequence(Attribute) = keyEntity.attributeKeys()
					in let parentKeys : Sequence(Attribute) = entity.parentUriPathKeys()
						in if localKeys->isEmpty() then
								parentKeys
							else
								localKeys->iterate(k; j : Sequence(Attribute) = parentKeys | j->append(k))
							endif
			endif
/]

[query public uriEntityKeys(pathType : EntityOrView, unit : ContentUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Sequence(Attribute)
	= let keysWithActuals : Sequence(Attribute)
		= unit.routeActuals->collect(a | a.routeParameter)
		in pathType.attributeKeys()->select(k | not keysWithActuals->includes(k) and unit.selectionKeys(routingType, includeContentKeys)->includes(k))
/]

[query public uriPathKeys(unit : ContentUnit, includeContentKeys : Boolean, forCommonKeys : Boolean) : Sequence(Attribute)
	= if not unit.routingType(forCommonKeys).oclIsUndefined() then
				unit.uriPathKeys(unit.routingType(forCommonKeys), includeContentKeys)
			else
				Sequence{}
			endif
/]

[query public uriPathKeys(unit : ContentUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Sequence(Attribute)
	= if routingType.oclIsUndefined() then
			Sequence{}
		else
			routingType.uriPathKeys()->select(k | unit.selectionKeys(routingType, includeContentKeys)->includes(k))
		endif
/]

[query public uriPathKeys(unit : CollectionUnit, routingType : EntityOrView, selection : Selection) : Sequence(Attribute)
	= if routingType.oclIsUndefined() then
			Sequence{}
		else
			let selectionKeys : Collection(Attribute)
				=  if selection.oclIsUndefined() then
						routingType.uriPathKeys()
					else
						selection.selectionKeys()
					endif
				in let keysWithActuals : Sequence(Attribute)
					= unit.oclAsType(DynamicUnit).routeActuals->collect(a | a.routeParameter)
					in routingType.uriPathKeys()->select(k | not keysWithActuals->includes(k) and selectionKeys->includes(k))
		endif
/]


[query public uriCommonPathKeys(page : Page) : Sequence(Attribute)
	= if page.units->isEmpty() then
			Sequence{}
		else if page.units->size() = 1 then
			page.units->first().uriPathKeys(false, true)
		else
			page.units->subOrderedSet(2, page.units->size())->iterate(u;
				common : Sequence(Attribute) = page.units->first().uriPathKeys(false, false)
				| common->select(k | u.uriPathKeys(false, true)->includes(k)))
		endif endif
/]


[query public hasRouteParameters(page : Page) : Boolean
	= page.uriCommonPathKeys()->notEmpty()
/]

[query public hasRouteParameters(unit : CollectionUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Boolean
	= unit.oclAsType(ContentUnit).hasRouteParameters(routingType, includeContentKeys)
/]

[query public hasRouteParameters(unit : ContentUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Boolean
	= unit.uriPathKeys(routingType, includeContentKeys)->notEmpty()
/]

[query public hasRouteParameters(unit : CollectionUnit, routingType : EntityOrView, selection : Selection) : Boolean
	= unit.uriPathKeys(routingType, selection)->notEmpty()
/]

[query public hasRouteParameters(routingType : EntityOrView) : Boolean
	= if routingType.oclIsUndefined() then
			false
		else
			routingType.uriPathKeys()->notEmpty()
		endif
/]


[query public routingType(unit : ContentUnit) : EntityOrView
	= unit.routingType(false)
/]

[query public routingType(unit : ContentUnit, forCommonKeys : Boolean) : EntityOrView
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).routingType(forCommonKeys)
		else if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).routingType(forCommonKeys)
		else
			null
		endif endif
/]

[query public routingType(unit : CollectionUnit) : EntityOrView
	= unit.routingType(false)
/]

[query public routingType(unit : CollectionUnit, forCommonKeys : Boolean) : EntityOrView
	= let selectType : EntityOrView
			= if unit.selection.oclIsUndefined() then
					null
				else if unit.selection.selectPath->isEmpty() then
					null
				else
					unit.selection.selectionType()
				endif endif
		in if not selectType.oclIsUndefined() then
				selectType
			else
				let association : EntityAssociation
					= unit.contentType->first().containingAssociation()
					in if association.oclIsUndefined() or unit.oclAsType(SelectableUnit).selectors->isEmpty() then
							null
						else
							association.targetType()
						endif
			endif
/]

[query public routingType(unit : SingletonUnit) : EntityOrView
	= unit.routingType(false)
/]

[query public routingType(unit : SingletonUnit, forCommonKeys : Boolean) : EntityOrView
	= if unit.oclIsKindOf(DataUnit) then
			if unit.oclAsType(DataUnit).defaultSelection.oclIsUndefined() then
				unit.contentType
			else
				null
			endif
		else if unit.oclIsTypeOf(CreateUnit) or unit.oclIsTypeOf(CreateUpdateUnit) and forCommonKeys then
			let editUnit : EditUnit = unit.oclAsType(EditUnit)
				in if editUnit.contentType.parentEntity().oclIsUndefined() then
						null
					else
						editUnit.contentType.parentEntity()
					endif
		else
			unit.contentType
		endif endif
/]


[query private parentUriPathKeys(resource : Resource) : Sequence(Attribute)
	= if not resource.parentResource.oclIsUndefined() then
				resource.parentResource.uriPathKeys()
			else
				Sequence{}
			endif
/]

[query public uriPathKeys(resource : Resource) : Sequence(Attribute)
	= let keyEntity : EntityOrView = resource.service.serves.keyEntity()
		in let localKeys : Sequence(Attribute) = keyEntity.attributeKeys()
			in let parentKeys : Sequence(Attribute) = resource.parentUriPathKeys()
				in if localKeys->isEmpty() then
						parentKeys
					else
						localKeys->iterate(k; j : Sequence(Attribute) = parentKeys | j->append(k))
					endif
/]


[query public hasRouteActual(unit : ContentUnit, key : Attribute) : Boolean
	= not unit.routeActual(key).oclIsUndefined()
/]

[query public routeActual(unit : ContentUnit, key : Attribute) : RouteActual
	= unit.routeActuals->any(a | a.routeParameter = key)
/]


[query public selectionKeys(unit : ContentUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Set(Attribute)
	= if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).selectionKeys(routingType)
		else if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).selectionKeys(routingType, includeContentKeys)
		else
			Set{}
		endif endif
/]

[query public selectionKeys(unit : CollectionUnit, routingType : EntityOrView, includeContentKeys : Boolean) : Set(Attribute)
	= let routingKeys : Set(Attribute)
		= if unit.selection.oclIsUndefined() then
				routingType.uriPathKeys()->asSet()
			else if unit.selection.condition.oclIsUndefined() then
				routingType.uriPathKeys()->asSet()
			else
				unit.selection.selectionKeys()
			endif endif
		in routingKeys->union(unit.contentType->first().attributeKeys()->asSet())
/]

[query public selectionKeys(unit : SingletonUnit, routingType : EntityOrView) : Set(Attribute)
	= if unit.oclIsKindOf(DetailsUnit) then
			let detailsUnit : DetailsUnit = unit.oclAsType(DetailsUnit)
				in if detailsUnit.defaultSelection.oclIsUndefined() then
						if routingType.oclIsUndefined() then
							Set{}
						else
							routingType.uriPathKeys()->asSet()
						endif
					else
						detailsUnit.defaultSelection.selectionKeys()
					endif
		else
			if routingType.oclIsUndefined() then
				Set{}
			else
				routingType.uriPathKeys()->asSet()
			endif
		endif
/]

[query public selectionKeys(selection : Selection) : Set(Attribute)
	= if selection.selectPath->notEmpty() then
			selection.selectionType().uriPathKeys()->asSet()
		else if selection.condition.oclIsUndefined() then
			Set{}
		else
			selection.condition.selectionKeys()
		endif endif
/]

[query private selectionKeys(predicate : Predicate) : Set(Attribute)
	= if predicate.oclIsTypeOf(PredicateEqualityOperator) then
			let attribute : Attribute 
				= predicate.oclAsType(PredicateEqualityOperator).selectionKeys()
				in if attribute.oclIsUndefined() then
						Set{}
					else
						Set{ attribute }
					endif
		else if predicate.oclIsTypeOf(PredicateBooleanOperator) then
			predicate.oclAsType(PredicateBooleanOperator).selectionKeys()
		else
			Set{}
		endif endif
/]

[query private selectionKeys(predicate : PredicateEqualityOperator) : Attribute
	= if predicate.left.oclIsTypeOf(FeatureReference) and predicate.right.oclIsTypeOf(ParameterReference) then
			let feature : Feature = predicate.left.oclAsType(FeatureReference).feature
				in if feature.oclIsKindOf(Attribute) then
						feature.oclAsType(Attribute)
					else
						null
					endif
		else if predicate.left.oclIsTypeOf(ParameterReference) and predicate.right.oclIsTypeOf(FeatureReference) then
			let feature : Feature = predicate.right.oclAsType(FeatureReference).feature
				in if feature.oclIsKindOf(Attribute) then
						feature.oclAsType(Attribute)
					else
						null
					endif
		else
			null
		endif endif
/]

[query private selectionKeys(predicate : PredicateBooleanOperator) : Set(Attribute)
	= predicate.expressions->iterate(
			e : Predicate;
			attributes : Set(Attribute) = Set{}
			| attributes->union(e.selectionKeys()))
/]
