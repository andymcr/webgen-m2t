[comment encoding = UTF-8 /]
[module service(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features]


[query public services(model : WafModel, entity : EntityOrView) : OrderedSet(Service)
	= model.business.services->select(s | s.serves = entity)
/]

[query public services(entity : EntityOrView, model : WafModel) : OrderedSet(Service)
	= model.services(entity)
/]


[query public hasPaginationSupport(selection : Selection) : Boolean
	= (selection.limit = 0 or selection.limit > 1)
		and (selection.joins->isEmpty() or selection.fields->isEmpty())
/]

[query public hasSelectCondition(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then 
			unit.oclAsType(CollectionUnit).hasSelectCondition()
		else if unit.oclIsTypeOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).hasSelectCondition()
		else
			false
		endif endif
/]

[query public hasSelectCondition(unit : CollectionUnit) : Boolean
	= if unit.selection.oclIsUndefined() then 
			false
		else
			not unit.selection.condition.oclIsUndefined()
		endif
/]

[query public hasSelectCondition(unit : DetailsUnit) : Boolean
	= if unit.selection.oclIsUndefined() then 
			false
		else
			not unit.selection.condition.oclIsUndefined()
		endif
/]

[query public hasSelectPath(unit : CollectionUnit) : Boolean
	= if unit.selection.oclIsUndefined() then 
			false
		else
			unit.selection.selectPath->notEmpty()
		endif
/]

[query public selectionType(selection : Selection) : EntityOrView
	= if selection.selectPath->notEmpty() then
			selection.selectPath->last().targetType()
		else
			null
		endif
/]


[comment TODO what if field has a selection?/]
[query public selection(field : UnitField) : Selection
	= if not field.oclIsTypeOf(UnitAssociation) then
			null
		else
			let association : UnitAssociation = field.oclAsType(UnitAssociation)
			in if association.units->isEmpty() then
					null
				else if association.units->first().oclIsKindOf(DetailsUnit) then
					association.units->first().oclAsType(DetailsUnit).selection
				else
					null
			endif endif
		endif
/]
