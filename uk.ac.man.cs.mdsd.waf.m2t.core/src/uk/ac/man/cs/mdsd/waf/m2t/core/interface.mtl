[comment encoding = UTF-8 /]
[module interface(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features]
[import uk::ac::man::cs::mdsd::orm::m2t::core::interface]
[import uk::ac::man::cs::mdsd::waf::m2t::core::dataTypes]
[import uk::ac::man::cs::mdsd::waf::m2t::core::fields]
[import uk::ac::man::cs::mdsd::waf::m2t::core::pages]


[query public homePage(model : WafModel) : Page
	= let homes : Sequence(ActionMenuEntry)
		= model.menus
			->collect(m | m.entries)
			->select(e | e.oclIsKindOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
			->select(e | e.name.equalsIgnoreCase('Home'))
		in if homes->notEmpty() then
				homes->first().action.pageDisplayedOn()
			else
				model.pages->first()
			endif
/]


[query public id(entity : Entity) : String
	= entity.name.asId()
/]


[query public id(feature : Feature) : String
	= feature.name.asId()
/]

[query public id(menu : Menu) : String
	= menu.name.asId()
/]

[query public id(menuEntry : MenuEntry) : String
	= if menuEntry.oclIsTypeOf(SubmenuEntry) then
			menuEntry.oclAsType(SubmenuEntry).name.asId()
		else if menuEntry.oclIsTypeOf(ActionMenuEntry) then
			menuEntry.oclAsType(ActionMenuEntry).name.asId()
		else if menuEntry.oclIsTypeOf(EditStaticTextMenuEntry) then
			menuEntry.oclAsType(EditStaticTextMenuEntry).name.asId()
		else
			'Unhandled'
		endif endif endif
/]


[query public id(page : Page) : String
	= page.name.asId()
/]


[query private containerId(container : UnitContainer) : String
	= if container.oclIsTypeOf(Page) then
			container.oclAsType(Page).id()
		else
			container.oclAsType(UnitAssociation).displayedOn.containedId()
		endif
/]


[query public styleClass(menu : Menu) : String
	= menu.styleClass
/]


[query public cancelLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).cancelLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).cancelLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public containedId(unit : ContentUnit) : String
	= unit.displayedOn.containerId().concat('.').concat(unit.name.asId())
/]

[query public hasClearLabel(unit : EditUnit) : Boolean
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			not unit.oclAsType(CreateUpdateUnit).clearLabel.oclIsUndefined()
		else
			false
		endif
/]

[query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormHead
				or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
				or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if uUnit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormFoot
			or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= true
/]

[comment query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::OnFeature
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasOmitFieldLabels(unit : DataUnit) : Boolean
	= if unit.oclIsTypeOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).omitFieldLabels
		else
			unit.oclAsType(IndexUnit).omitColumnLabels
		endif
/]

[query public id(unit : ContentUnit) : String
	= unit.displayedOn.containerId().concat('.labels.').concat(unit.name.asId())
/]

[query public isConditionalDisplay(unit : DynamicUnit) : Boolean
	= not unit.hideWhen.oclIsUndefined()
/]

[query public rowClasses(unit : IndexUnit) : Sequence(String)
	= unit.rowClasses.tokenize(' ')
/]

[query public submitLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).confirmLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).submitLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public displayClass(field : UnitField) : String
	= if not field.oclIsTypeOf(UnitAssociation) or field.isSingleton() then
			field.modelPropertyName()
		else
			let association : UnitAssociation = field.oclAsType(UnitAssociation)
			in if association.units->isEmpty() then
					field.modelPropertyName()
				else
					association.units->first().styleClass
				endif
		endif
/]

[query public displayLabel(field : UnitField) : String
	= if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).displayLabel
		else if field.oclIsTypeOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).displayLabel()
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).displayLabel
		else 
			'UnhandledField'
		endif endif endif
/]

[query private displayLabel(association : UnitAssociation) : String
	= if association.displayLabel <> association.association.displayLabel then
			association.displayLabel
		else if association.childFeature.oclIsUndefined() then
			association.displayLabel
		else
			association.childFeature.displayLabel()
		endif endif
/]

[query private displayLabel(feature : ChildPath) : String
	= if feature.oclIsTypeOf(ChildPathAttribute) then
			feature.oclAsType(ChildPathAttribute).attribute.displayLabel
		else
			let association : ChildPathAssociation = feature.oclAsType(ChildPathAssociation)
				in if association.childFeature.oclIsUndefined() then
						association.association.displayLabel
					else
						association.childFeature.displayLabel()
					endif
		endif
/]

[query public hasClass(field : UnitField) : Boolean
	= not field.inputClass().oclIsUndefined()
/]

[query public hasPlaceholder(field : UnitField) : Boolean
	= if field.oclIsTypeOf(UnitAttribute) then
			not field.oclAsType(UnitAttribute).placeholder.oclIsUndefined()
		else if field.oclIsKindOf(InterfaceField) then
			not field.oclAsType(InterfaceField).placeholder.oclIsUndefined()
		else
			false
		endif endif
/]

[query public hasTitle(field : UnitField) : Boolean
	= not field.title.oclIsUndefined()
/]

[query public id(association : UnitAssociation) : String
	= if association.childFeature.oclIsUndefined() then
			association.name.asId()
		else
			association.name.asId().concat('.').concat(association.childFeature.id())
		endif
/]

[query public id(child : ChildPath) : String
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.id()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					association.name.asId()
				else
					association.name.asId().concat('.').concat(association.childFeature.id())
				endif
		endif
/]

[query public inputClass(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).inputClass
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).inputClass
		else
			null
		endif endif
/]

[query public isConditionalDisplay(field : UnitField) : Boolean
	= not field.hideWhen.oclIsUndefined()
/]

[query public placeholder(field : UnitField) : String
	= if field.oclIsKindOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).placeholder
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).placeholder
		else
			null
		endif endif
/]

[query public styleClass(field : UnitField) : String
	= field.modelPropertyName().asId()
/]
