[comment encoding = UTF-8 /]
[module featureProperties(
	'http://cs.manchester.ac.uk/mdsd/Expression',
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/Service',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::featureProperties]


[query public entry(entries : Sequence(String), index : Integer) : String
	= if entries->size() < index then
			''
		else
			entries->drop(index - 1)->first()
		endif
/]


[query public hasParameter(expression : Expression) : Boolean
	= if expression.oclIsTypeOf(PredicateBooleanOperator) then
			let predicate : PredicateBooleanOperator
				= expression.oclAsType(PredicateBooleanOperator)
				in predicate.expressions->exists(e | e.hasParameter())
		else if expression.oclIsTypeOf(PredicateEqualityOperator) then
			let predicate : PredicateEqualityOperator
				= expression.oclAsType(PredicateEqualityOperator)
				in  predicate.left.hasParameter() or predicate.right.hasParameter()
		else if expression.oclIsTypeOf(PredicateComparisonOperator) then
			let predicate : PredicateComparisonOperator
				= expression.oclAsType(PredicateComparisonOperator)
				in predicate.left.hasParameter() or predicate.right.hasParameter()
		else if expression.oclIsTypeOf(PredicateIsOperator) then
			let predicate : PredicateIsOperator
				= expression.oclAsType(PredicateIsOperator)
				in predicate.left.hasParameter() or predicate.right.hasParameter()
		else if expression.oclIsTypeOf(PredicateLikeOperator) then
			let predicate : PredicateLikeOperator
				= expression.oclAsType(PredicateLikeOperator)
				in predicate.left.hasParameter() or predicate.right.hasParameter()
		else if expression.oclIsTypeOf(PredicateIsEmpty) then
			let predicate : PredicateIsEmpty
				= expression.oclAsType(PredicateIsEmpty)
				in predicate.feature.hasParameter()
		else
			expression.oclIsTypeOf(ParameterReference)
				or expression.oclIsTypeOf(CurrentTime)
				or expression.oclIsTypeOf(CurrentUser)
		endif endif endif endif endif endif
/]


[query public formFields(model : WafModel) : Sequence(UnitField)
	= model.formUnits()->collect(u | u.displayFields)
/]

[query public formUnits(model : WafModel) : Sequence(DynamicUnit)
	= model.pages->collect(p | p.formUnits())
/]

[query public hasAPI(model : WafModel) : Boolean
	= if model.api.oclIsUndefined() then
			false
		else
			model.api.resources->notEmpty()
		endif
/]

[query public hasCaptchaFields(model : WafModel) : Boolean
	= model.pages->select(p | p.hasCaptchaFields())->notEmpty()
/]

[query public hasImageUnits(model : WafModel) : Boolean
	= model.pages->select(p | p.hasImageUnits())->notEmpty()
/]

[query public hasJavascript(model : WafModel) : Boolean
	= model.pages->select(p | p.hasJavascript())->notEmpty()
/]

[query public hasJQueryClasses(model : WafModel) : Boolean
	= model.inputTechnology <> InputTechnologies::Html
/]

[query public hasSliderUnits(model : WafModel) : Boolean
	= model.pages->select(p | p.hasSliderUnits())->notEmpty()
/]

[query public homePage(model : WafModel) : Page
	= let topPage : Page
			= if model.topMenuItems()->notEmpty() then
					model.topMenuItems()->first()
				else
					null
				endif
		in if not topPage.oclIsUndefined() then
			topPage
		else
			if model.pages->notEmpty() then
				model.pages->first()
			else
				null
		endif endif
/]

[query public imageUnits(model : WafModel) : Sequence(ImageUnit)
	= model.pages->collect(p | p.imageUnits())
/]

[query public indexUnits(model : WafModel) : Sequence(IndexUnit)
	= model.pages->collect(p | p.indexUnits())
/]

[query public services(model : WafModel, entity : EntityOrView) : OrderedSet(Service)
	= model.business.services->select(s | s.serves = entity)
/]

[query public topMenuItems(model : WafModel) : Sequence(Page)
	= model.pages
		->select(p | p.topMenuOption <> PageTopMenuOptions::NeverInclude)
		->sortedBy(p | p.topMenuRank).oclAsType(Page)
/]


[query public id(entity : EntityOrView) : String
	= entity.name.asId()
/]

[query public services(entity : EntityOrView, model : WafModel) : OrderedSet(Service)
	= model.services(entity)
/]

[query private usersOf(entity : EntityOrView, model : WafModel) : Sequence(EditUnit)
	= model.pages->collect(
		p | p.units
			->select(u | u.oclIsKindOf(EditUnit)).oclAsType(EditUnit)
			->select(u | u.contentType = entity))
/]

[query private usersOf(entity : EntityOrView, unit : EditUnit) : Sequence(EditUnit)
	= if unit.contentType = entity then
			Sequence{unit}
		else
			Sequence{}
		endif->union(entity.nestedUsersOf(unit))
/]

[query private nestedUsersOf(entity : EntityOrView, unit : EditUnit) : Sequence(EditUnit)
	= unit.displayFields
		->select(f | f.oclIsKindOf(UnitAssociation)).oclAsType(UnitAssociation)
		->select(a | a.units->notEmpty())
		->iterate(a;
			units : Sequence(EditUnit) = Sequence{}
			| units->union(entity.usersOf(a.units->first().oclAsType(EditUnit))))
/]


[query public id(feature : Feature) : String
	= feature.name.asId()
/]

[query public usesInputJQuery(feature : Feature) : Boolean
	= not (feature.isDataType() or feature.isUrl() or feature.isResource())
		or feature.isBooleanDataType()
		or feature.isEnumerationType()
		or feature.isIntegerDataType()
		or not feature.isSingleton()
/]


[query public id(menu : Menu) : String
	= menu.name.asId()
/]

[query public id(menuEntry : MenuEntry) : String
	= if menuEntry.oclIsKindOf(ActionMenuEntry) then
			menuEntry.oclAsType(ActionMenuEntry).name.asId()
		else if menuEntry.oclIsKindOf(EditStaticTextMenuEntry) then
			menuEntry.oclAsType(EditStaticTextMenuEntry).name.asId()
		else
			'Unhandled'
		endif endif
/]


[query public childGalleryUnits(page : Page) : Sequence(GalleryUnit)
	= page.childUnits()
		->select(u | u.oclIsTypeOf(GalleryUnit)).oclAsType(GalleryUnit)
/]

[query public childImageUnits(page : Page) : Sequence(ImageUnit)
	= page.childUnits()
		->select(u | u.oclIsKindOf(ImageUnit)).oclAsType(ImageUnit)
/]

[query public childSliderUnits(page : Page) : Sequence(SliderUnit)
	= page.childUnits()
		->select(u | u.oclIsTypeOf(SliderUnit)).oclAsType(SliderUnit)
/]

[query public childUnits(page : Page) : Sequence(ContentUnit)
	= page.units
		->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
		->collect(u | u.childUnits())
/]

[query public controlUnits(page : Page) : Sequence(DynamicUnit)
	= page.units->select(u | u.oclIsKindOf(ControlUnit)).oclAsType(DynamicUnit)
/]

[query public dynamicUnits(page : Page) : Sequence(DynamicUnit)
	= page.units->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
/]

[query public editUnits(page : Page) : Sequence(EditUnit)
	= page.units
		->select(u | u.oclIsKindOf(EditUnit)).oclAsType(EditUnit)
/]

[query public formUnits(page : Page) : Sequence(DynamicUnit)
	= page.units
		->select(u | u.oclIsKindOf(ControlUnit) or u.oclIsKindOf(EditUnit)).oclAsType(DynamicUnit)
/]

[query public hasCaptchaFields(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasCaptchaFields())->notEmpty()
/]

[query public hasChangableCollections(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasChangableCollections())->notEmpty()
/]

[query public hasChildGalleryUnits(page : Page) : Boolean
	= page.childGalleryUnits()->notEmpty()
/]

[query public hasChildImageUnits(page : Page) : Boolean
	= page.childImageUnits()->notEmpty()
/]

[query public hasChildSliderUnits(page : Page) : Boolean
	= page.childSliderUnits()->notEmpty()
/]

[query public hasControlUnits(page : Page) : Boolean
	= page.controlUnits()->notEmpty()
/]

[query public hasEditUnits(page : Page) : Boolean
	= page.editUnits()->notEmpty()
/]

[query public hasFilterParameters(page : Page) : Boolean
	= page.dynamicUnits()->select(u | u.hasFilterParameters())->notEmpty()
/]

[query public hasFormUnits(page : Page) : Boolean
	= page.formUnits()->notEmpty()
/]

[query public hasGalleryUnits(page : Page) : Boolean
	= page.units->select(u | u.oclIsTypeOf(GalleryUnit))->notEmpty()
/]

[query public hasImageUnits(page : Page) : Boolean
	= page.imageUnits()->notEmpty() or page.hasChildImageUnits()
/]

[query public hasIndexUnits(page : Page) : Boolean
	= page.indexUnits()->notEmpty()
/]

[query public hasJavascript(page : Page) : Boolean
	= page.hasChangableCollections()
		or page.hasGalleryUnits()
		or page.hasSliderUnits()
		or page.hasChildImageUnits()
		or page.partOf.responsiveTopMenu
/]

[query public hasJQueryClasses(page : Page) : Boolean
	= page.partOf.hasJQueryClasses()
/]

[query public hasMapUnits(page : Page) : Boolean
	= page.mapUnits()->notEmpty()
/]

[query public hasNoDynamicUnits(page : Page) : Boolean
	= page.dynamicUnits()->isEmpty()
/]

[query public hasPagination(page : Page) : Boolean
	= page.units->select(u | u.hasPagination())->notEmpty()
/]

[query public hasParameterisedUnits(page : Page) : Boolean
	= page.parameterisedUnits()->notEmpty()
/]

[query public hasSliderUnits(page : Page) : Boolean
	= page.units->select(u | u.oclIsTypeOf(SliderUnit))->notEmpty()
/]

[query public id(page : Page) : String
	= page.name.asId()
/]

[query public imageUnits(page : Page) : Sequence(ImageUnit)
	= page.units->select(u | u.oclIsKindOf(ImageUnit)).oclAsType(ImageUnit)
/]

[query public indexUnits(page : Page) : Sequence(IndexUnit)
	= page.units->select(u | u.oclIsKindOf(IndexUnit)).oclAsType(IndexUnit)
/]

[query public mapUnits(page : Page) : Sequence(MapUnit)
	= page.units->select(u | u.oclIsKindOf(MapUnit)).oclAsType(MapUnit)
/]

[query public nonDynamicUnits(page : Page) : Set(ContentUnit)
	= page.units->select(u | not u.oclIsKindOf(DynamicUnit))
/]

[query public parameterisedUnits(page : Page) : OrderedSet(DynamicUnit)
	= page.units->select(u | u.isParameterised())
/]

[query public translationDomain(page : Page) : String
	= if page.parentPage.oclIsUndefined() then
			if page.uriElement <> '' then
				page.uriElement
			else
				'default'
			endif
		else
			page.parentPage.translationDomain()
		endif
/]

[query public useInputJQuery(page : Page) : Boolean
	= (page.hasFormUnits()
			or page.units
				->select(u | u.oclIsKindOf(CollectionUnit)).oclAsType(CollectionUnit)
				->select(u | u.supportedFilters->notEmpty())
				->notEmpty())
		and page.partOf.hasJQueryClasses()
/]


[query private containerId(container : UnitContainer) : String
	= if container.oclIsTypeOf(Page) then
			container.oclAsType(Page).id()
		else
			container.oclAsType(UnitAssociation).displayedOn.containedId()
		endif
/]


[query public styleClass(menu : Menu) : String
	= menu.styleClass
/]


[query public associationFeatures(unit : DynamicUnit) : Sequence(UnitAssociation)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
/]

[query public booleanFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.booleanFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public booleanFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isBooleanDataType())
/]

[query public cancelLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).cancelLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).cancelLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public captchaFields(unit : DynamicUnit) : Sequence(CaptchaField)
	= unit.displayFields->select(f | f.oclIsTypeOf(CaptchaField)).oclAsType(CaptchaField)
/]

[query public childDynamicUnits(unit : DynamicUnit) : Sequence(DynamicUnit)
	= unit.childUnits()->select(u | u.oclIsKindOf(DynamicUnit)).oclAsType(DynamicUnit)
/]

[query public childImageUnits(unit : DynamicUnit) : Sequence(ImageUnit)
	= unit.childUnits()
		->select(u | u.oclIsKindOf(ImageUnit)).oclAsType(ImageUnit)
/]

[query public childUnits(unit : DynamicUnit) : Sequence(ContentUnit)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
		->select(a | a.units->notEmpty())
		->collect(a | a.units)
/]

[query public collectionFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.collectionFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public collectionFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | not f.isSingleton())
/]

[query public containedId(unit : ContentUnit) : String
	= unit.displayedOn.containerId().concat('.').concat(unit.name.asId())
/]

[query public containingAssociation(unit : DynamicUnit) : Association
	= if unit.contentType().oclIsUndefined() then
			null
		else
			unit.contentType().containingAssociation()
		endif
/]

[query public containingUnit(unit : DynamicUnit) : DynamicUnit
	= if unit.displayedOn.oclIsTypeOf(Page) then
			unit
		else
			unit.displayedOn.oclAsType(UnitAssociation).displayedOn.containingUnit()
		endif
/]

[query public contentService(unit : DynamicUnit) : Service
	= let model : WafModel = unit.pageDisplayedOn().partOf
		in model.services(unit.contentType())->first()
/]

[query public contentType(unit : ContentUnit) : EntityOrView
	= if unit.oclIsKindOf(SingletonUnit) then
			unit.oclAsType(SingletonUnit).contentType
		else if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).contentType->first()
		else
			null
		endif endif
/]

[query public dataTypeFeatures(unit : DynamicUnit, includeEnumerations : Boolean) : Sequence(UnitFeature)
	= unit.dataTypeFields(includeEnumerations)
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public dataTypeFields(unit : DynamicUnit, includeEnumerations : Boolean) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | (f.isDataType() and not f.isEnumerationType()) or (includeEnumerations and f.isEnumerationType()))
/]

[query public dateFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.dateFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public dateFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isDate())
/]

[query public defaultValueFields(unit : DynamicUnit) : Set(UnitField)
	= unit.displayFields->select(f | f.hasDefaultValue())
/]

[query public displayedAssociations(unit : DynamicUnit) : Sequence(Association)
	= unit.displayFields
		->select(f | f.oclIsTypeOf(UnitAssociation)).oclAsType(UnitAssociation)
		->collect(a | a.association)
/]

[query public encryptedFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
		->select(f | f.isEncrypted())
/]

[query public enumerationFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
		->select(f | f.isEnumerationType())
/]

[query public filterParameters(unit : CollectionUnit) : Sequence(FormalParameter)
	= unit.supportedFilters->collect(q | q.parameters)
/]

[query public forcedValueFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.displayFields
		->select(f | f.hasForcedValue()).oclAsType(UnitFeature)
/]

[query public hasCaptchaFields(unit : DynamicUnit) : Boolean
	= unit.captchaFields()->notEmpty()
/]

[query public hasChangableCollections(unit : DynamicUnit) : Boolean
	= if not unit.oclIsKindOf(EditUnit) then
			false
		else
			unit.displayFields
				->select(f | not f.isSingleton())
				->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
				->select(f | f.collectionUiAllowAdd or f.collectionUiAllowRemove)
				->notEmpty()
		endif
/]

[query public hasClearLabel(unit : EditUnit) : Boolean
	= if unit.oclIsTypeOf(CreateUpdateUnit) then
			not unit.oclAsType(CreateUpdateUnit).clearLabel.oclIsUndefined()
		else
			false
		endif
/]

[query public hasDefaultValueFields(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).defaultValueFields()->notEmpty()
		else
			false
		endif
/]

[query public hasEncryptedFeatures(unit : DynamicUnit) : Boolean
	= unit.encryptedFeatures()->notEmpty()
/]

[query public hasDisabledFeatures(unit : DynamicUnit) : Boolean
	= unit.displayFields->select(f | f.disableInput)->notEmpty()
/]

[query public hasFilterParameters(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).supportedFilters->notEmpty()
		else
			false
		endif
/]

[query public hasFilters(unit : CollectionUnit) : Boolean
	= unit.supportedFilters->notEmpty()
/]

[query public hasForcedValueFeatures(unit : DynamicUnit) : Boolean
	= unit.forcedValueFeatures()->notEmpty()
/]

[query public hasInterfaceFields(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(DynamicUnit) then
			unit.oclAsType(DynamicUnit).interfaceFields()->notEmpty()
		else
			false
		endif
/]

[query public hasJQueryClasses(unit : DynamicUnit) : Boolean
	= unit.pageDisplayedOn().hasJQueryClasses()
/]

[query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormHead(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormHead
				or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
				or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= false
/]

[comment query public hasMessagesOnFormFoot(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if uUnit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormFoot
			or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= true
/]

[comment query public hasMessagesOnFeature(unit : DynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if unit.oclIsKindOf(EditUnit) then
					unit.oclAsType(EditUnit).messagePlacementOption
				else if unit.oclIsKindOf(ControlUnit) then
					unit.oclAsType(ControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::OnFeature
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasObjectAccess(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then
			let collectionUnit : CollectionUnit = unit.oclAsType(CollectionUnit)
				in if collectionUnit.selection.oclIsUndefined() then
					true
				else
					collectionUnit.selection.joins->isEmpty() or collectionUnit.selection.fields->isEmpty()
				endif
		else if unit.oclIsKindOf(DataUnit) then
			let dataUnit : DataUnit = unit.oclAsType(DataUnit)
				in if dataUnit.defaultSelection.oclIsUndefined() then
					true
				else
					dataUnit.defaultSelection.joins->isEmpty() or dataUnit.defaultSelection.fields->isEmpty()
				endif
		else if unit.oclIsKindOf(EditUnit) then
			true
		else
			false
		endif endif endif
/]

[query public hasOmitFieldLabels(unit : DataUnit) : Boolean
	= if unit.oclIsTypeOf(DetailsUnit) then
			unit.oclAsType(DetailsUnit).omitFieldLabels
		else
			unit.oclAsType(IndexUnit).omitColumnLabels
		endif
/]

[query public hasPagination(unit : CollectionUnit) : Boolean
	= if unit.selection.oclIsUndefined() then 
			unit.defaultPaginationSize > 0
		else
			unit.defaultPaginationSize > 0 and unit.selection.limit > 1
		endif

/]

[query public hasPagination(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(CollectionUnit) then
			unit.oclAsType(CollectionUnit).hasPagination()
		else
			false
		endif
/]

[query public hasRouteActual(unit : ContentUnit, key : Attribute) : Boolean
	= not unit.routeActual(key).oclIsUndefined()
/]

[query public id(unit : ContentUnit) : String
	= unit.displayedOn.containerId().concat('.labels.').concat(unit.name.asId())
/]

[query public inputFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields->select(f |
		if f.oclIsKindOf(UnitFeature) then
			f.oclAsType(UnitFeature).isModifiable()
		else
			true
		endif)
/]

[query public interfaceFields(unit : DynamicUnit) : Sequence(InterfaceField)
	= unit.displayFields->select(f | f.oclIsKindOf(InterfaceField)).oclAsType(InterfaceField)
/]

[query public isConditionalDisplay(unit : DynamicUnit) : Boolean
	= if unit.oclIsKindOf(DataUnit) then
			unit.oclAsType(DataUnit).onlyDisplayWhenNotEmpty
		else
			false
		endif
/]

[query public isContained(unit : DynamicUnit) : Boolean
	= if unit.contentType().oclIsUndefined() then
			false
		else
			unit.contentType().isContained()
		endif
/]

[query public isParameterised(unit : ContentUnit) : Boolean
	= if unit.oclIsKindOf(SelectableUnit) then
			let dynamicUnit : DynamicUnit = unit.oclAsType(DynamicUnit)
			in if dynamicUnit.contentType().oclIsUndefined() then
					dynamicUnit.contentType().keys->notEmpty()
				else
					false
				endif
		else
			false
		endif
/]

[query public pageDisplayedOn(unit : ContentUnit) : Page
	= if unit.displayedOn.oclIsTypeOf(Page) then
			unit.displayedOn.oclAsType(Page)
		else
			unit.displayedOn.oclAsType(UnitAssociation).displayedOn.pageDisplayedOn()
		endif
/]

[query public routeActual(unit : ContentUnit, key : Attribute) : RouteActual
	= unit.routeActuals->any(a | a.routeParameter = key)
/]

[query public rowClasses(unit : IndexUnit) : Sequence(String)
	= unit.rowClasses.tokenize(' ')
/]

[query public searchFields(unit : IndexUnit) : Bag(UnitField)
	= unit->collect(targettingSearches.displayFields)
/]

[query public selectionService(unit : CollectionUnit) : Service
	= let model : WafModel = unit.oclAsType(DynamicUnit).pageDisplayedOn().partOf
		in if not unit.selectionType().oclIsUndefined() then
				model.services(unit.selectionType())->first()
			else
				null
			endif
/]

[query public selectionType(unit : CollectionUnit) : EntityOrView
	= if not unit.selection.selectVia.oclIsUndefined() then
			unit.selection.selectVia.targetType()
		else
			let association : EntityAssociation
				= unit.contentType->first().containingAssociation()
				in if association.oclIsUndefined() or unit.oclAsType(SelectableUnit).selectors->isEmpty() then
						unit.contentType->first()
					else
						association.targetType()
					endif
		endif
/]

[query public submitLabel(unit : DynamicUnit) : String
	= if unit.oclIsKindOf(EditUnit) then
			unit.oclAsType(EditUnit).confirmLabel
		else if unit.oclIsKindOf(ControlUnit) then
			unit.oclAsType(ControlUnit).submitLabel
		else
			'unexpectedUnit'
		endif endif
/]

[query public translationDomain(unit : ContentUnit) : String
	= unit.pageDisplayedOn().translationDomain()
/]

[query public urlFeatures(unit : DynamicUnit) : Sequence(UnitFeature)
	= unit.urlFields()
		->select(f | f.oclIsKindOf(UnitFeature)).oclAsType(UnitFeature)
/]

[query public urlFields(unit : DynamicUnit) : OrderedSet(UnitField)
	= unit.displayFields
		->select(f | f.isUrl())
/]


[query public isConditionalDisplay(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).onlyDisplayWhenNotEmpty
		else
			false
		endif
/]

[query public dataType(field : UnitField) : Classifier
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.dataType()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						null
					else
						association.childFeature.dataTypeElement()
					endif
			endif
		else if field.oclIsTypeOf(DataTypeField) then
			field.oclAsType(DataTypeField).dataType
		else
			null
		endif endif
/]

[query private dataTypeElement(child : ChildPath) : Classifier
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.dataType()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					null
				else
					association.childFeature.dataTypeElement()
				endif
		endif
/]

[query public dateDetails(field : UnitField) : DateDetails
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.dateDetails()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						null
					else
						association.childFeature.dateDetailsElement()
					endif
			endif
		else if field.oclIsTypeOf(DateField) then
			field.oclAsType(DateField).details
		else
			null
		endif endif
/]

[query private dateDetailsElement(child : ChildPath) : DateDetails
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.dateDetails()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					null
				else
					association.childFeature.dateDetailsElement()
				endif
		endif
/]

[query public defaultValue(field : UnitField) : Expression
	= if field.oclIsKindOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).defaultValue
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).defaultValue
		else
			null
		endif endif
/]
[query public displayClass(field : UnitField) : String
	= if not field.oclIsTypeOf(UnitAssociation) or field.isSingleton() then
			field.modelPropertyName()
		else
			let association : UnitAssociation = field.oclAsType(UnitAssociation)
			in if association.units->isEmpty() then
					field.modelPropertyName()
				else
					association.units->first().styleClass
				endif
		endif
/]

[query public displayLabel(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).displayLabel
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).displayLabel
		else 
			'UnhandledField'
		endif endif
/]

[query public entity(field : UnitField) : EntityOrView
	= if field.oclIsKindOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).attribute.partOf
		else if field.oclIsKindOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).association.sourceType()
		else 
			null
		endif endif
/]

[query public enumerationType(field : UnitField) : EnumerationType
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.enumerationType()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						null
					else
						association.childFeature.enumerationTypeElement()
					endif
			endif
		else if field.oclIsTypeOf(DataTypeField) then
			let dataTypeField : DataTypeField = field.oclAsType(DataTypeField)
				in if dataTypeField.dataType.oclIsTypeOf(EnumerationType) then
						dataTypeField.dataType.oclAsType(EnumerationType)
					else
						null
					endif
		else
			null
		endif endif
/]

[query public enumerationTypeElement(child : ChildPath) : EnumerationType
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.enumerationType()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					null
				else
					association.childFeature.enumerationTypeElement()
				endif
		endif
/]

[query public feature(field : UnitField) : Feature
	= if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).attribute
		else
			field.oclAsType(UnitAssociation).association
		endif
/]

[query public formName(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.columnName()
			else
				let association : Association
					= field.oclAsType(UnitAssociation).association
					in if association.isSingleton() and association.isOwningEnd() then 
	 						association.columnName() 
						else 
							association.modelPropertyName() 
						endif 
			endif
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).name
		else if field.oclIsTypeOf(CaptchaField) then
			field.oclAsType(CaptchaField).name
		else
			'UnhandledFeature'
		endif endif endif
/]

[query public hasDefaultValue(field : UnitField) : Boolean
	= not field.defaultValue().oclIsUndefined()
/]

[query public hasClass(field : UnitField) : Boolean
	= not field.inputClass().oclIsUndefined() or field.hasJQueryClasses()
/]

[query public hasForcedValue(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			not field.oclAsType(UnitFeature).forcedValue.oclIsUndefined()
		else
			false
		endif
/]

[query public hasJQueryClasses(field : UnitField) : Boolean
	= if field.isDataType() then
			field.dataType().name <> 'Integer'
		else
			field.isDate() or field.isResource() or field.isUrl()
		endif
			and field.displayedOn.hasJQueryClasses()
/]

[query public hasPlaceholder(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitAttribute) then
			not field.oclAsType(UnitAttribute).placeholder.oclIsUndefined()
		else if field.oclIsKindOf(InterfaceField) then
			not field.oclAsType(InterfaceField).placeholder.oclIsUndefined()
		else
			false
		endif endif
/]

[query public hasSelection(field : UnitField) : Boolean
	= not field.selection().oclIsUndefined()
/]

[query public hasTitle(field : UnitField) : Boolean
	= not field.title.oclIsUndefined()
/]

[query public id(association : UnitAssociation) : String
	= if association.childFeature.oclIsUndefined() then
			association.name.asId()
		else
			association.name.asId().concat('.').concat(association.childFeature.id())
		endif
/]

[query public id(child : ChildPath) : String
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.id()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					association.name.asId()
				else
					association.name.asId().concat('.').concat(association.childFeature.id())
				endif
		endif
/]

[query public inputClass(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			field.oclAsType(UnitFeature).inputClass
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).inputClass
		else
			null
		endif endif
/]

[query public isAssociation(field : UnitField) : Boolean
	= if not field.oclIsTypeOf(UnitAssociation) then
			false
		else
			let association : UnitAssociation = field.oclAsType(UnitAssociation)
			in if association.childFeature.oclIsUndefined() then
					true
				else
					association.childFeature.isAssociationElement()
				endif
		endif
/]

[query public isAssociationElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			false
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					true
				else
					association.childFeature.isAssociationElement()
				endif
		endif
/]

[query public isBooleanDataType(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isBooleanDataType()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						false
					else
						association.childFeature.isBooleanDataTypeElement()
					endif
			endif
		else
			false -- TODO implement
		endif
/]

[query public isBooleanDataTypeElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isBooleanDataType()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					false
				else
					association.childFeature.isBooleanDataTypeElement()
				endif
		endif
/]

[query public isCaseInsensitive(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isCaseInsensitive()
			else
				false
			endif
		else if field.oclIsTypeOf(DataTypeField) then
			field.oclAsType(DataTypeField).caseInsensitive
		else
			false
		endif endif
/]

[query public isContainer(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).association.isContainer()
		else
			false
		endif
/]

[query public isContains(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitAssociation) then
			field.oclAsType(UnitAssociation).association.isContains()
		else
			false
		endif
/]

[query public isDataType(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isDataType()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						false
					else
						association.childFeature.isDataTypeElement()
					endif
			endif
		else
			field.oclIsTypeOf(DataTypeField)
		endif
/]

[query public isDataTypeElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isDataType()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					false
				else
					association.childFeature.isDataTypeElement()
				endif
		endif
/]

[query public isDate(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isDate()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						false
					else
						association.childFeature.isDateElement()
					endif
			endif
		else
			field.oclIsTypeOf(DateField)
		endif
/]

[query public isDateElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isDate()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					false
				else
					association.childFeature.isDateElement()
				endif
		endif
/]

[query public isEncrypted(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isEncrypted()
			else
				false
			endif
		else if field.oclIsTypeOf(DataTypeField) then
			field.oclAsType(DataTypeField).encrypt
		else
			false
		endif endif
/]

[query public isEnumerationType(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isEnumerationType()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						false
					else
						association.childFeature.isEnumerationTypeElement()
					endif
			endif
		else
			false
		endif
/]

[query public isEnumerationTypeElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isEnumerationType()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					false
				else
					association.childFeature.isEnumerationTypeElement()
				endif
		endif
/]

[query public isModifiable(feature : UnitFeature) : Boolean
	= if feature.oclIsTypeOf(UnitAttribute) then
			let attribute : UnitAttribute = feature.oclAsType(UnitAttribute)
				in attribute.forcedValue.oclIsUndefined()
		else
			let association : UnitAssociation = feature.oclAsType(UnitAssociation)
				in if association.units->notEmpty() then
						false
					else
						association.forcedValue.oclIsUndefined() and association.association.isVisible()
					endif
		endif
/]

[query public isLocation(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isLocation()
			else
				false
			endif
		else
			false
		endif
/]

[query public isObfuscated(field : UnitField) : Boolean
	= if field.oclIsTypeOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).obfuscateFormFields
		else if field.oclIsTypeOf(DataTypeField) then
			field.oclAsType(DataTypeField).obfuscateFormFields
		else
			false
		endif endif
/]

[query public isPseudo(association : UnitAssociation) : Boolean
	= association.association.isPseudo()
/]

[query public isPseudo(association : ChildPathAssociation) : Boolean
	= if association.association.oclIsKindOf(EntityAssociation) then
			association.association.oclAsType(EntityAssociation).isPseudo()
		else 
			false
		endif
/]

[query public isRequired(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isRequired()
			else
				field.oclAsType(UnitAssociation).association.isRequired()
			endif
		else 
			field.oclAsType(InterfaceField).required
		endif
/]

[query public isResource(field : UnitField) : Boolean
	= if not field.oclIsTypeOf(UnitAttribute) then
			false
		else let attribute : UnitAttribute = field.oclAsType(UnitAttribute)
			in attribute.attribute.oclIsKindOf(SingletonResource)
		endif
/]


[query public isSingleton(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isSingleton()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						association.association.isSingleton()
					else
						association.childFeature.isSingletonElement()
					endif
			endif
		else 
			true
		endif
/]

[query public isSingletonElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isSingleton()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					association.association.isSingleton()
				else
					association.childFeature.isSingletonElement()
				endif
		endif
/]

[query public isUnique(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isUnique()
			else
				field.oclAsType(UnitAssociation).association.isUnique()
			endif
		else
			false
		endif
/]

[query public isUrl(field : UnitField) : Boolean
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.isUrl()
			else
				let association : UnitAssociation = field.oclAsType(UnitAssociation)
				in if association.childFeature.oclIsUndefined() then
						false
					else
						association.childFeature.isUrlElement()
					endif
			endif
		else
			false
		endif
/]

[query public isUrlElement(child : ChildPath) : Boolean
	= if child.oclIsTypeOf(ChildPathAttribute) then
			child.oclAsType(ChildPathAttribute).attribute.isUrl()
		else
			let association : ChildPathAssociation = child.oclAsType(ChildPathAssociation)
			in if association.childFeature.oclIsUndefined() then
					false
				else
					association.childFeature.isUrlElement()
				endif
		endif
/]

[query public isValidated(feature : UnitFeature) : Boolean
	= if feature.oclIsTypeOf(UnitAttribute) then
			feature.oclAsType(UnitAttribute).attribute.isValidated()
		else 
			feature.oclAsType(UnitAssociation).association.isValidated()
		endif
/]

[query public model(field : UnitField) : WafModel
	= field.pageDisplayedOn().partOf
/]

[query public model(child : ChildPathAssociation) : WafModel
	= if child.eContainer().oclIsTypeOf(UnitAssociation) then
			child.eContainer().oclAsType(UnitAssociation).model()
		else
			child.eContainer().oclAsType(ChildPathAssociation).model()
		endif
/]

[query public modelPropertyName(field : UnitField) : String
	= if field.oclIsKindOf(UnitFeature) then
			if field.oclIsTypeOf(UnitAttribute) then
				field.oclAsType(UnitAttribute).attribute.modelPropertyName()
			else
				field.oclAsType(UnitAssociation).association.modelPropertyName()
			endif
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).name
		else
			'UnhandledFeature'
		endif endif
/]

[query public pageDisplayedOn(field : UnitField) : Page
	= field.displayedOn.pageDisplayedOn()
/]

[query public placeholder(field : UnitField) : String
	= if field.oclIsKindOf(UnitAttribute) then
			field.oclAsType(UnitAttribute).placeholder
		else if field.oclIsKindOf(InterfaceField) then
			field.oclAsType(InterfaceField).placeholder
		else
			null
		endif endif
/]

[comment TODO what if field has a selection?/]
[query public selection(field : UnitField) : Selection
	= if not field.oclIsTypeOf(UnitAssociation) then
			null
		else
			let association : UnitAssociation = field.oclAsType(UnitAssociation)
			in if association.units->isEmpty() then
					null
				else if association.units->first().oclIsKindOf(IndexUnit) then
					association.units->first().oclAsType(IndexUnit).defaultSelection
				else
					null
			endif endif
		endif
/]

[query public styleClass(field : UnitField) : String
	= field.modelPropertyName().asId()
/]
