[comment encoding = UTF-8 /]
[module names(
	'http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping',
	'http://cs.manchester.ac.uk/mdsd/WebApplicationFramework')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]


[query public containerUniqueClassName(model : OrmModel) : String
	= 'ContainerUnique'
/]

[query public validatorClassNamePostfix(model : OrmModel) : String
	= 'Validator'
/]

[query public modelClassName(type : EnumerationType) : String
	= type.name
/]


[query public instanceName(entity : Entity) : String
	= entity.name.toLowerFirst()
/]

[query public modelClassName(entity : Entity) : String
	= entity.name
/]

[query public modelName(entity : Entity) : String
	= entity.name
/]

[query public normalizerClassName(entity : Entity) : String
	= entity.name.concat('Normalizer')
/]


[query public addMethodName(feature : Feature) : String
	= 'add'.concat(feature.singletonName.toUpperFirst())
/]

[query public getMethodName(feature : Feature) : String
	= let prefix : String
		= if feature.isBooleanDataType() then
				feature.booleanPrefix()
			else
				'get'
			endif
		in prefix.concat(feature.modelPropertyName().toUpperFirst())
/]

[query private booleanPrefix(feature : Feature) : String
	= if feature.booleanIsHasChoice = IsHasChoices::isA then
			'is'
		else
			'has'
		endif
/]

[query public instanceName(feature : Feature) : String
	= feature.modelPropertyName()
/]

[query public modelName(association : Association) : String
	= association.targetType().modelName()
/]

[query public removeMethodName(feature : Feature) : String
	= 'remove'.concat(feature.singletonName.toUpperFirst())
/]

[query public setMethodName(feature : Feature) : String
	= 'set'.concat(feature.modelPropertyName().toUpperFirst())
/]
