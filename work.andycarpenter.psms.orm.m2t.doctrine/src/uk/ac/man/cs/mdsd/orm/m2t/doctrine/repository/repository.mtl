[comment encoding = UTF-8 /]
[module repository(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/Base',
	'http://andycarpenter.work/psm/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::constant/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::selection/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::uriRoutes/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::uriRoutes/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::repository::queryDoctrine/]

[template public repository(repository : Repository)]
[file(repository.repositoryFilename(), false)]
<?php
namespace [repository.repositoryNamespace()/];

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
[if (repository.selections->select(s | s.filters->notEmpty())->notEmpty())]
use Doctrine\ORM\QueryBuilder;
[/if]
[if (repository.selections->notEmpty() or repository.findAll.oclIsUndefined())]
use Doctrine\ORM\Tools\Pagination\Paginator;
[/if]
[if (repository.hasCurrentUser())]
use Symfony\Component\Security\Core\Security;
[/if]
[if (repository.serves.attributes()->notEmpty())]
use [repository.modelsNamespace()/]\[repository.serves.modelClassName()/];
[/if]

class [repository.className()/] extends [repository.baseRepositoryClassName()/]
{
[for (constant : Constant | repository.constants)]
    [if (constant.useFunction())]private[else]public[/if] static $[constant.name/] = [if (constant.useFunction())]null[else][constant.value.queryExpression()/][/if];


[/for]
[if (repository.hasCurrentUser())]
    private $security;

[/if]
    public function __construct(ManagerRegistry $managerRegistry[if (repository.hasCurrentUser())], Security $security[/if])
    {
        parent::__construct($managerRegistry, [repository.serves.modelClassName()/]::class);
[if (repository.hasCurrentUser())]
        $this->security = $security;
[/if]
    }

[for (constant : Constant | repository.constants->select(c | c.useFunction()))]
    public static function [constant.name/]()
    {
	[if (constant.value.oclIsUndefined())]
        // [protected ('constant '.concat(constant.name))]
        // [/protected]
	[else]
		[if (constant.value.oclIsTypeOf(TimeLiteral))]
        if (empty($[constant.name/])) {
            $[constant.name/] = new \DateTime('[constant.value.oclAsType(TimeLiteral).value/]');
        }

        return $[constant.name/];
		[/if]
	[/if]
    }

[/for]
[if (repository.findOne.oclIsUndefined() and repository.serves.hasRouteParameters())]
    [repository.findMethod()/]

[/if]
[if (repository.findAll.oclIsUndefined())]
    [repository.findAllMethod()/]

[/if]
[if (repository.serves.attributes()->select(a | not a.hasSlugFields())->notEmpty())]
    [repository.createMethod()/]

[/if]
    [repository.removeMethod()/]

    [repository.saveMethod()/]

    [repository.flushMethod()/]

[for (selection : Selection | repository.selections)]
    [selection.selectionMethod()/]

[/for]
}
[/file]
[/template]

[template private findMethod(repository : Repository) post(trim())]
[let entity : Entity = repository.serves]
public function [repository.serves.findMethodName()/]([entity.routeParameters()/]): ?[repository.serves.modelName()/]
{
    $queryBuilder = $this->createQueryBuilder('[repository.serves.selectName()/]');
    return $queryBuilder
[if (entity.isContained() or entity.hasAssociationKeys())]
        [entity.containerJoin()/]
[/if]
[if (entity.uriPathKeys()->notEmpty())]
	[if (entity.uriPathKeys()->size() < 2)]
        ->where([entity.uriPathKeys()->first().findWhere(entity)/])
	[else]
        ->where(
            [entity.findWhere(entity) /]
        )
	[/if]
[/if]
[for (key : Attribute | entity.uriPathKeys())]
        ->setParameter('[key.routeParameterName(entity)/]', $[key.routeParameterName(entity)/])
[/for]
        ->getQuery()->getOneOrNullResult();
}
[/let]
[/template]

[template private containerJoin(entity : Entity) post(trim())]
[let container : Entity = entity.container()]
->join('[entity.selectName()/].[entity.containingAssociation().modelPropertyName()/]', '[container.selectName()/]')
[if (container.isContained() and entity <> container)]
[container.containerJoin()/]
[/if]
[/let]
[for (key : Association | entity.associationKeys()->select(k | not k.container))]
->join('[entity.selectName()/].[key.modelPropertyName()/]', '[key.targetType().selectName()/]')
[/for]
[/template]

[template private findWhere(entity : Entity, base : Entity) post(trim())]
[let keys : Sequence(Attribute) = entity.uriPathKeys()]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))]
$queryBuilder->expr()->andX([key.findWhere(base)/],
[/for]
[keys->last().findWhere(base)/]
[for (key : Attribute | keys->subSequence(1, keys->size() - 1))])[/for]
[/let]
[/template]

[template private findWhere(key : Attribute, base : Entity) post(trim())]
$queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName/]', ':[key.routeParameterName(base)/]')
[/template]

[template private findAllMethod(repository : Repository) post(trim())]
public function findAll([repository.limitFormals(10)/])
{
    if ($offset < 0)
	    return parent::findAll();
    else {
        $queryBuilder = $this->createQueryBuilder('[repository.serves.selectName()/]');
        $queryBuilder->setFirstResult($offset);
        $queryBuilder->setMaxResults($limit);
        $query = $queryBuilder->getQuery();
        return new Paginator($query[if (repository.serves.primaryKeys()->size() > 1)], false[/if]);
    }
}
[/template]

[template private createMethod(repository : Repository) post(trim())]
[let entity : Entity = repository.serves]
public function create([for (attribute : Attribute | entity.attributes()->select(a | not a.hasSlugFields() and a.isSingleton())) separator(', ')]$[attribute.instanceName()/] = null[/for], $flush = false): [repository.serves.modelName()/]
{
    $new = new [entity.modelName()/]();
[for (attribute : Attribute | entity.attributes()->select(a | not a.hasSlugFields() and a.isSingleton()))]
    $new->set[attribute.modelPropertyName().toUpperFirst()/]($[attribute.instanceName()/]);
[/for]
    $this->save($new, $flush);
    return $new;
}
[/let]
[/template]

[template private removeMethod(repository : Repository) post(trim())]
public function remove($entity, $flush = false): void
{
    $this->_em->remove($entity);
    if ($flush)
    {
        $this->flush();
    }
}
[/template]

[template private saveMethod(repository : Repository) post(trim())]
public function save($entity, $flush = false): void
{
    $this->_em->persist($entity);
    if ($flush)
    {
        $this->flush();
    }
}
[/template]

[template private flushMethod(repository : Repository) post(trim())]
public function flush(): void
{
    $this->_em->flush();
}
[/template]

[template private selectionMethod(selection : Selection)
	? (selection.filters->isEmpty()) post(trim())]
public function [selection.methodName/]([selection.formals()/])[if (selection.limit = 1)]
: ?[selection.definedBy.serves.modelName()/][elseif (not selection.hasPaginationSupport())]: array[/if]

{
    [selection.builderCode()/]
    $query = $queryBuilder->getQuery();
[if (selection.uriPathKeys()->notEmpty() or selection.hasFormals() or selection.hasConditionParameters())]
    [selection.queryParametersCode()/]
[/if]

    [selection.queryResult()/]
}
[/template]

[template private selectionMethod(selection : Selection)
	? (selection.filters->notEmpty()) post(trim())]
private function [selection.builderMethodName()/]([selection.formals()/]): QueryBuilder
{
    [selection.builderCode()/]
    return $queryBuilder;
}

[if (selection.selectPath->notEmpty() or selection.hasFormals() or selection.hasConditionParameters())]
private function [selection.parametersMethodName()/]($query[if (selection.selectPath->notEmpty() or selection.hasFormals())]
, [selection.selectionActuals()/][/if]) : void
{
    [selection.queryParametersCode()/]
}

[/if]
public function [selection.methodName/]([selection.formals()/])[if (selection.limit = 1)]
: ?[selection.definedBy.serves.modelName()/][elseif (not selection.hasPaginationSupport())]: array[/if]

{
    $query = $this->[selection.builderMethodName()/]([selection.actuals()/])->getQuery();
[if (selection.selectPath->notEmpty() or selection.hasFormals() or selection.hasConditionParameters())]
    $this->[selection.parametersMethodName()/]($query[if (selection.selectPath->notEmpty() or selection.hasFormals())]
, [selection.selectionActuals()/][/if]);
[/if]

    [selection.queryResult()/]
}
[for (filter : Filter | selection.filters)]

public function [filter.methodName/]([filter.formals()/])[if (selection.limit = 1)]
: ?[selection.definedBy.serves.modelName()/][elseif (not selection.hasPaginationSupport())]: array[/if]

{
    $queryBuilder = $this->[selection.builderMethodName()/]([selection.actuals()/]);
    $queryBuilder->[if (selection.selectPath->isEmpty() and selection.condition.oclIsUndefined())]where[else]andWhere[/if]([filter.condition.queryExpression()/]);
    $query = $queryBuilder->getQuery();
	[if (selection.selectPath->notEmpty() or selection.hasFormals() or selection.hasConditionParameters())]
    $this->[selection.parametersMethodName()/]($query[if (selection.selectPath->notEmpty() or selection.hasFormals())]
, [selection.selectionActuals()/][/if]);
	[/if]
	[for (parameter : FormalParameter | filter.parameters)]
		[if (filter.condition.oclIsUndefined())]
    $query->setParameter('[parameter.name/]', $[parameter.name/]);
		[elseif (filter.condition.parameterUsedInLike(parameter, false))]
			[if (parameter.dataType.oclIsUndefined())]
    $query->setParameter('[parameter.name/]', strpos($[parameter.name/], '%') ? $[parameter.name/] : '%' . $[parameter.name/] . '%');
			[elseif (parameter.dataType.isStringDataType())]
    $query->setParameter('[parameter.name/]', strpos($[parameter.name/], '%') ? $[parameter.name/] : '%' . $[parameter.name/] . '%');
			[else]
    $query->setParameter('[parameter.name/]', $[parameter.name/]);
			[/if]	
	[else]
    $query->setParameter('[parameter.name/]', $[parameter.name/]);
		[/if]
	[/for]

    [selection.queryResult()/]
}
[/for]
[/template]

[template private formals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty() or selection.hasFormals())]
[selection.selectionFormals()/][if (selection.hasPaginationSupport())]
, [/if][/if][if (selection.hasPaginationSupport())]
[selection.limitFormals()/]
[/if]
[/template]

[template private formals(filter : Filter) post(trim())]
[if (filter.selection.selectPath->notEmpty() or filter.selection.hasFormals())]
[filter.selection.selectionFormals()/][if (filter.parameters->notEmpty() or filter.selection.hasPaginationSupport())]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterFormals()/][if (filter.selection.hasPaginationSupport())]
, [/if]
[/if]
[if (selection.hasPaginationSupport())]
[filter.selection.limitFormals()/]
[/if]
[/template]

[template private selectionFormals(selection : Selection) post(trim())]
[for (key : Attribute | selection.uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectionType())/][/for]
[if (selection.uriPathKeys()->notEmpty() and selection.hasFormals())]
, [/if]
[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private limitFormals(selection : Selection) post(trim())]
[selection.definedBy.limitFormals(selection.limit)/]
[/template]

[template private limitFormals(service : Repository, limit : Integer) post(trim())]
$offset = 0, $limit = [limit/]
[/template]

[template private criteriaLimitFormals(selection : Selection) post(trim())]
$offset = 0, $limit = 0
[/template]

[template private filterFormals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())]
 = [parameter.defaultValue/][/if][/for]
[/template]

[template private actuals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty() or selection.hasFormals())]
[selection.selectionActuals()/][if (selection.hasPaginationSupport())]
, [/if]
[/if]
[selection.limitActuals()/]
[/template]

[template private actuals(filter : Filter) post(trim())]
[if (filter.selection.selectPath->notEmpty() or filter.selection.hasFormals())]
[selection.selectionActuals()/][if (filter.parameters->notEmpty() or filter.selection.limit > -1)]
, [/if]
[/if]
[if (filter.parameters->notEmpty())]
[filter.filterActuals()/][if (filter.selection.hasPaginationSupport())], [/if]
[/if]
[filter.selection.limitActuals()/]
[/template]

[template private selectionActuals(selection : Selection) post(trim())]
[if (selection.selectPath->notEmpty())]
	[for (key : Attribute | selection.selectionType().uriPathKeys()) separator(', ')]
$[key.routeParameterName(selection.selectionType())/][/for]
[if (selection.hasFormals())]
, [/if]
[/if]
[for (parameter : FormalParameter | selection.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private limitActuals(selection : Selection) post(trim())]
[if (selection.hasPaginationSupport())]
$offset, $limit
[/if]
[/template]

[template private filterActuals(filter : Filter) post(trim())]
[for (parameter : FormalParameter | filter.parameters) separator(', ')]
$[parameter.name/][/for]
[/template]

[template private builderCode(selection : Selection) post(trim())]
$queryBuilder = $this->createQueryBuilder('[selection.definedBy.serves.selectName()/]');
[if (selection.fields->notEmpty())]
[selection.fields()/]
[/if]
[if (selection.selectPath->notEmpty() or selection.joins->notEmpty())]
[selection.joins()/]
[/if]
[if (selection.selectPath->notEmpty() or not selection.condition.oclIsUndefined())]
[selection.condition()/]
[/if]
[if (selection.ordering->notEmpty())]
[selection.orderBy()/]
[/if]
[if (selection.hasPaginationSupport())]
if ($limit > 0) {
    $queryBuilder->setFirstResult($offset);
    $queryBuilder->setMaxResults($limit);
}
[/if]
[if (selection.distinct)]
$queryBuilder->distinct();
[/if]
[/template]

[template private fields(selection : Selection) post(trim())]
[let first : Feature = selection.fields->first()]
$queryBuilder->select([first.field(first.alias(selection))/]);
[/let]
[if (selection.fields->size() > 1)]
	[for (field : Feature | selection.fields->subOrderedSet(2, selection.fields->size()))]
$queryBuilder->addSelect([field.field(field.alias(selection))/]);
	[/for]
[/if]
[/template]

[template private field(field : Feature, alias : String) post(trim())]
'[field.partOf.selectName()/].[field.columnName/][if (not alias.oclIsUndefined())]
 [alias/][/if]'
[/template]

[template private joins(selection : Selection) post(trim())]
[for (join : Association | selection.joins)]
$queryBuilder->join('[join.partOf.selectName()/].[join.modelPropertyName()/]', '[join.targetType().selectName()/]');
[/for]
[if (selection.selectPath->notEmpty())]
	[for (element : Association | selection.selectPath)]
		[if (selection.joins->excludes(element))]
$queryBuilder->join('[element.sourceType().selectName()/].[element.modelPropertyName()/]', '[element.targetType().selectName()/]');
		[/if]
	[/for]
	[if (selection.selectionType().isContained())]
[selection.joinContainer(selection.selectionType(), selection.joins->collect(a | a.partOf))/]
	[/if]
[/if]
[/template]

[template private joinContainer(selection : Selection, childType : Entity, explicitJoins : Sequence(Entity)) post(trim())]
[let association : Association = childType.containingAssociation()]
[if (explicitJoins->excludes(childType))]
$queryBuilder->join('[childType.selectName()/].[association.modelPropertyName()/]', '[association.targetType().selectName()/]');
[/if]
[if (association.targetType().isContained())]
[selection.joinContainer(association.targetType(), explicitJoins)/]
[/if]
[/let]
[/template]

[template private condition(selection : Selection) post(trim())]
[if (selection.uriPathKeys()->notEmpty())]
[let routingEntity : Entity = selection.selectionType()]
	[if (selection.uriPathKeys()->size() = 1)]
	[let key : Attribute = selection.uriPathKeys()->first()]
$queryBuilder->where($queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName/]', ':[key.routeParameterName(routingEntity)/]'));
	[/let]
	[else]
$queryBuilder->where($queryBuilder->expr()->andX(
		[for (key : Attribute | selection.uriPathKeys())]
    $queryBuilder->expr()->eq('[key.partOf.selectName()/].[key.columnName/]', ':[key.routeParameterName(routingEntity)/]')[if (i <> selection.uriPathKeys()->size())],[/if]
		[/for]
));
	[/if]
[/let]
[/if]
[if (not selection.condition.oclIsUndefined())]
$queryBuilder->[if (selection.selectPath->notEmpty())]andWhere[else]where[/if]([selection.condition.queryExpression()/]);
[/if]
[/template]

[template private orderBy(selection : Selection) post(trim())]
$queryBuilder->orderBy([selection.ordering->first().path.queryExpression()/], [selection.ordering->first().order()/]);
[if (selection.ordering->size() > 1)]
	[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
$queryBuilder->addOrderBy([order.path.queryExpression()/], [order.order()/]);
	[/for]
[/if]
[/template]

[template private queryParametersCode(selection : Selection) post(trim())]
[if (selection.uriPathKeys()->notEmpty())]
[selection.querySelectedParameters()/]
[/if]
[if (selection.hasConditionParameters())]
[selection.condition.queryParameter()/]
[/if]
[/template]

[template private querySelectedParameters(selection : Selection) post(trim())]
[let routingEntity : Entity = selection.selectionType()]
	[for (key : Attribute | selection.uriPathKeys())]
$query->setParameter('[key.routeParameterName(routingEntity)/]', $[key.routeParameterName(routingEntity)/]);
	[/for]
[/let]
[/template]

[template private queryResult(selection : Selection) post(trim())]
[if (selection.limit = 1)]
return $query->getOneOrNullResult();
[elseif (selection.hasPaginationSupport())]
if ($limit > 0)
    return new Paginator($query[if (selection.definedBy.serves.primaryKeys()->size() > 1)], false[/if]);
else
    return $query->getResult();
[else]
return $query->getResult();
[/if]
[/template]

[template private formalParameters(parameters : FormalParameterList) post(trim())]
[for (parameter : FormalParameter | parameters.parameters) separator(', ')]
$[parameter.name/][if (not parameter.defaultValue.oclIsUndefined())] = [parameter.defaultValue/][/if][/for]
[/template]
