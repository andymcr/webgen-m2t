[comment encoding = UTF-8 /]
[module entity(
	'http://andycarpenter.work/psm/Expression',
	'http://andycarpenter.work/psm/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::orm::m2t::core::dataTypes/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::entities/]
[import uk::ac::man::cs::mdsd::orm::m2t::core::features/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::expression/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::names/]
[import uk::ac::man::cs::mdsd::orm::m2t::doctrine::files/]


[query private isReservedWord(word : String) : Boolean
	= let reserved : Set(String) 
		= Set{'order'}
		in reserved->includes(word)
/]

[template public model(entity : Entity)]
[file(entity.modelFilename(), false)]
<?php
namespace [entity.modelsNamespace()/];

[entity.useStatements()/]


/**
 * @ORM\Entity[if(not entity.repository.oclIsUndefined())]
(repositoryClass=[entity.repository.className()/]::class)[/if]

 * @ORM\Table(name="[entity.tableName/]")
[if (entity.unique->notEmpty())]
	[if (entity.unique->size() = 1)]
 * @UniqueEntity("[entity.unique->first().columnName/]")
	[else]
 * @UniqueEntity(
 *     fields={[for (feature : Feature | entity.unique) separator(', ')]"[feature.columnName/]"[/for]}
 * )
	[/if]
[/if]
[for (attribute : Attribute | entity.uniqueAttributes())]
 * @UniqueEntity("[attribute.columnName/]")
[/for]
[if (entity.isContained())]
	[for (attribute : Attribute | entity.containerUniqueAttributes())]
 * @AppAssert\ContainerUnique(uniqueProperty="[attribute.modelPropertyName()/]", containingProperty="[entity.containingAssociation().opposite.modelPropertyName()/]")
	[/for]
[/if]
[if (entity.hasResourceAttributes())]
 * @Vich\Uploadable
[/if]
 **/
class [entity.modelClassName()/][if (entity.implementsUserInterface)] implements UserInterface[/if][if (entity.implementForumUser)] implements ForumUserInterface[/if]
{
[if (not entity.hasPrimaryKeys())]
    [entity.autoIdFeature()/]

[/if]
    [entity.featureProperties()/]

[if (entity.implementForumUser)]
    [entity.forumUserProperties()/]

[/if]
[if (entity.partOf.timestampCreation or entity.partOf.timestampUpdates)]
    [entity.timestampFeatures()/]

[/if]
[if (entity.hasDefaultValueFeatures() or entity.hasResourceAttributes() or entity.hasCollectionAssociations() or entity.implementsUserInterface)]
    [entity.constructor()/]

[/if]
[if (not entity.hasPrimaryKeys())]
    [entity.idMethods()/]

[/if]
[for (feature : Feature | entity.features->select(f | not f.isHidden()))]
    [feature.featureMethods()/]

[/for]
[if (entity.implementForumUser)]
    [entity.forumUserMethods()/]

[/if]
[if (entity.oclIsTypeOf(Entity) and (entity.partOf.timestampCreation or entity.partOf.timestampUpdates))]
    [entity.timestampMethods()/]

[/if]
[if (entity.implementsUserInterface)]
    [entity.userInterfaceMethods()/]

[/if]
[for (label : ModelLabel | entity.labels)]
    [label.label()/]

[/for]
}
[/file]
[/template]

[template private useStatements(entity : Entity) post(trim())]
use Doctrine\ORM\Mapping as ORM;
[if (entity.collectionAssociations()->notEmpty())]
use Doctrine\Common\Collections\ArrayCollection;
[/if]
[if (entity.partOf.timestampCreation or entity.partOf.timestampUpdates or entity.hasSlugAttributes())]
use Gedmo\Mapping\Annotation as Gedmo;
[/if]
[if (entity.unique->notEmpty() or entity.uniqueAttributes()->notEmpty())]
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
[/if]
[if (entity.hasResourceAttributes())]
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;
[/if]
[if (entity.implementsUserInterface)]
use Symfony\Component\Security\Core\User\UserInterface;
[/if]
[if (entity.features->select(f | f.serializationGroups->notEmpty())->notEmpty())]
use Symfony\Component\Serializer\Annotation\Groups;
[/if]
[if (entity.features->select(f | f.oclIsKindOf(Association)).oclAsType(Association)
	->select(a | a.isVisible() or a.isOwningEnd())
	->select(a | a.serializationMaxDepth > 0)->notEmpty())]
use Symfony\Component\Serializer\Annotation\MaxDepth;
[/if]
[if (entity.hasValidatedFeatures())]
use Symfony\Component\Validator\Constraints as Assert;
[/if]
[if (entity.hasResourceAttributes())]
use Vich\UploaderBundle\Entity\File as EmbeddedFile;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
[/if]
[if (entity.isContained() and entity.containerUniqueAttributes()->notEmpty())]
use [entity.validatorNamespace()/]\Constraints as AppAssert;
[/if]
[if (entity.implementForumUser)]
use \Yosimitso\WorkingForumBundle\Entity\UserInterface as ForumUserInterface;
[/if]
[if(not entity.repository.oclIsUndefined())]
use [entity.repositoryNamespace()/]\[entity.repository.className()/];
[/if]
[/template]

[template private autoIdFeature(entity : Entity) post(trim())]
/**
 * @ORM\Id
 * @ORM\Column(type="[entity.autoKeyPersistentType/]")
 * @ORM\GeneratedValue[if (not entity.autoKeyGenerationStrategy.oclIsUndefined())](strategy="[entity.autoKeyGenerationStrategy/]")[/if]
 **/
protected $[entity.autoKeyName/];
[/template]

[template private featureProperties(entity : Entity) post(trim())]
[for (feature : Feature | entity.features->select(f | f.isVisible() or f.isOwningEnd()))]
[comment TODO sortout location features /]
	[if (not feature.isLocation() and not feature.isResource())]
/**
  [feature.ormAnnotation()/]
		[if (feature.isValidated())]
  [feature.validationAnnotation()/]
		[/if]
		[if (feature.hasSerializationControl())]
  [feature.serializationAnnotation()/]
		[/if]
  **/
		[if (feature.oclIsKindOf(Attribute))]
protected $[feature.columnName/];
		[else]
protected $[feature.modelPropertyName()/];
		[/if]

	[elseif (feature.isResource())]
/**
 * @Vich\UploadableField(mapping="[feature.modelPropertyName()/]", fileNameProperty="[feature.modelPropertyName()/].name", size="[feature.modelPropertyName()/].size", mimeType="[feature.modelPropertyName()/].mimeType", originalName="[feature.modelPropertyName()/].originalName", dimensions="[feature.modelPropertyName()/].dimensions")
 *
 * @var File
 **/
protected $[feature.modelPropertyName()/]File;

/**
 * @ORM\Embedded(class="Vich\UploaderBundle\Entity\File")
 *
 * @var EmbeddedFile
 **/
protected $[feature.modelPropertyName()/];

	[/if]
[/for]
[/template]

[template private forumUserProperties(entity : Entity) post(trim())]
[if (entity.features->select(f | f.name = 'username')->isEmpty())]
/**
 * @var string
 */
protected $username;

[/if]
/**
 * @var string
 *
 * @ORM\Column(name="avatar_url", type="string", nullable=true)
 */
protected $avatarUrl;

/**
 * @var integer
 *
 * @ORM\Column(name="nb_post", type="integer", nullable=true)
 */
protected $nbPost;

/**
 *
 * @var boolean
 *
 * @ORM\Column(name="banned", type="boolean", nullable=true)
 */
protected $banned;
[/template]

[template private timestampFeatures(entity : Entity) post(trim())]
[if (entity.partOf.timestampCreation)]
/**
 * @ORM\Column(type="datetime")
 * @Gedmo\Timestampable(on="create")
 **/
protected $created;

[/if]
[if (entity.partOf.timestampUpdates)]
/**
 * @ORM\Column(type="datetime", nullable=true)
 * @Gedmo\Timestampable(on="update")
 **/
protected $updated;
[/if]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(SingletonAttribute)) post(trim())]
[let attribute : SingletonAttribute = feature.oclAsType(SingletonAttribute)]
[if (attribute.primaryKey)]
* @ORM\Id
[/if]
* @ORM\Column([if (feature.columnName.isReservedWord())]name="`[feature.columnName/]`", [/if]type="[attribute.ormType/]"[if (not attribute.isRequired())], nullable=true[/if])
[if (attribute.slugFields->notEmpty())]
* @Gedmo\Slug(fields={[for (field : Attribute | attribute.slugFields) separator(', ')]"[field.columnName/]"[/for]})
[/if]
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(CollectionElement)) post(trim())]
[let attribute : CollectionElement = feature.oclAsType(CollectionElement)]
* @ORM\Column([if (feature.columnName.isReservedWord())]name="`[feature.columnName/]`", [/if]type="[attribute.collectionType.ormType/]")
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(Association) and feature.isSingleton()) post(trim())]
[let association : SingletonAssociation = feature.oclAsType(SingletonAssociation)]
[let opposite : Association = association.opposite]
[if (association.primaryKey)]
* @ORM\Id
[/if]
* @ORM\[association.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (association.isOwningEnd())]
inversedBy[else]mappedBy[/if]="[opposite.modelPropertyName()/]"[if (association.isContains())]
, [if (association.isOwningEnd())]orphanRemoval=true[else]cascade={"persist", "remove"}[/if][/if][/if])
[if (association.isOwningEnd())]
	[if (association.keys->notEmpty())]
[association.explicitKeys()/]
	[elseif (association.targetType().primaryKeys()->notEmpty())]
[association.primaryKeys()/]
	[else]
* @ORM\JoinColumn(name="[association.columnName/]", referencedColumnName="[association.targetType().oclAsType(Entity).autoKeyName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private ormAnnotation(feature : Feature)
	? (feature.oclIsKindOf(Association) and not feature.isSingleton()) post(trim())]
[let association : CollectionAssociation = feature.oclAsType(CollectionAssociation)]
[let opposite : Association = association.opposite]
* @ORM\[association.associationRelationship/](targetEntity="[association.modelName()/]"[if (opposite.isVisible() or opposite.isOwningEnd())]
, [if (association.associationRelationship = CollectionAssociationRelationships::OneToMany or not association.isOwningEnd())]
mappedBy[else]inversedBy[/if]="[opposite.modelPropertyName()/]"[if (association.isContains())]
, cascade={"persist", "remove"}[/if][/if])
[if (association.owningEnd)]
* @ORM\JoinTable(name="[association.pivotTableName/]",
	[if (association.keys->notEmpty())]
[association.explicitKeysOwning()/]
	[elseif (association.sourceType().primaryKeys()->notEmpty())]
[association.primaryKeysOwning()/]
	[else]
*     joinColumns={@ORM\JoinColumn(name="[association.columnName/]"[if (association.sourceType().autoKeyName.toLowerCase() <> 'id')]
, referencedColumnName="[association.sourceType().autoKeyName.toLowerCase()/]"[/if], nullable=false)},
	[/if]
	[if (association.keys->notEmpty())]
[association.explicitKeysInverse()/]
	[elseif (association.targetType().primaryKeys()->notEmpty())]
[association.primaryKeysInverse()/]
	[else]
*     inverseJoinColumns={@ORM\JoinColumn(name="[association.opposite.columnName/]"[if (association.targetType().autoKeyName.toLowerCase() <> 'id')]
, referencedColumnName="[association.targetType().autoKeyName.toLowerCase()/]"[/if], nullable=false)})
	[/if]
[/if]
[/let]
[/let]
[/template]

[template private explicitKeys(association : SingletonAssociation) post(trim())]
[if (association.keys->size() = 1)]
[let key : AssociationKey = association.keys->first()]
* @ORM\JoinColumn(name="[key.sourceFeature.columnName/]", referencedColumnName="[key.targetFeature.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
[/let]
[else]
* @ORM\JoinColumns({[for (key : AssociationKey | association.keys) separator(',')]

*     @ORM\JoinColumn(name="[key.sourceFeature.columnName/]", referencedColumnName="[key.targetFeature.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])[/for]

* })
[/if]
[/template]

[template private explicitKeysOwning(association : CollectionAssociation) post(trim())]
[if (association.keys->size() = 1)]
[let key : AssociationKey = association.keys->first()]
*     joinColumns={@ORM\JoinColumn(name="[key.sourceFeature.columnName/]")},
[/let]
[else]
*     joinColumns={[for (key : AssociationKey | association.keys) separator(',')]

*         @ORM\JoinColumn(name="[key.sourceFeature.columnName/]", nullable=false)[/for]

*     },
[/if]
[/template]

[template private explicitKeysInverse(association : CollectionAssociation) post(trim())]
[if (association.keys->size() = 1)]
[let key : AssociationKey = association.keys->first()]
*     joinColumns={@ORM\JoinColumn(name="[key.targetFeature.columnName/]")},
[/let]
[else]
*     joinColumns={[for (key : AssociationKey | association.keys) separator(',')]

*         @ORM\JoinColumn(name="[key.targetFeature.columnName/]", nullable=false)[/for]

*     },
[/if]
[/template]

[template private primaryKeys(association : SingletonAssociation) post(trim())]
[if (association.targetType().primaryKeys()->size() = 1)]
[let key : Feature = association.targetType().primaryKeys()->first()]
* @ORM\JoinColumn(name="[association.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])
[/let]
[else]
* @ORM\JoinColumns({[for (key : Feature | association.targetType().primaryKeys()) separator(',')]

*     @ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]"[if (association.isRequired())], nullable=false[/if])[/for]

* })
[/if]
[/template]

[template private primaryKeysOwning(association : CollectionAssociation) post(trim())]
[if (association.partOf.oclAsType(Entity).primaryKeys()->size() = 1)]
[let key : Feature = association.partOf.oclAsType(Entity).primaryKeys()->first()]
*     joinColumns={@ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)},
[/let]
[else]
*     joinColumns={[for (key : Feature | association.sourceType().primaryKeys()) separator(',')]

*         @ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)[/for]

*     },
[/if]
[/template]

[template private primaryKeysInverse(association : CollectionAssociation) post(trim())]
[if (association.targetType().primaryKeys()->size() = 1)]
[let key : Feature = association.targetType().primaryKeys()->first()]
*     inverseJoinColumns={@ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)},
[/let]
[else]
*     inverseJoinColumns={[for (key : Feature | association.targetType().primaryKeys()) separator(',')]

*         @ORM\JoinColumn(name="[key.columnName/]", referencedColumnName="[key.columnName.toLowerCase()/]", nullable=false)[/for]

*     },
[/if]
[/template]

[template private validationAnnotation(feature : Feature) post(trim())]
[if (feature.isRequired())]
	[if (feature.oclIsKindOf(Attribute))]
* @Assert\NotBlank
	[else]
* @Assert\NotNull
	[/if]
[/if]
[if (feature.isContains())]
* @Assert\Valid
[/if]
[/template]

[template private serializationAnnotation(feature : Feature) post(trim())]
[if (feature.serializationGroups->notEmpty())]
* @Groups({[for (group : SerializationGroup | feature.serializationGroups) separator(', ')]"[group.name/]"[/for]})
[/if]
[if (feature.oclIsKindOf(Association))]
[let association : Association = feature.oclAsType(Association)]
	[if (association.serializationMaxDepth > 0)]
* @MaxDepth([association.serializationMaxDepth/])
	[/if]
[/let]
[/if]
[/template]

[template private constructor(entity : Entity) post(trim())]
public function __construct()
{
[for (feature : Feature | entity.features())]
	[if (feature.hasDefaultValue())]
    $this->[feature.modelPropertyName()/] = [feature.defaultValue().defaultExpression()/];
	[/if]
	[if (feature.oclIsKindOf(CollectionAttribute))]
    $this->[feature.modelPropertyName()/] = Array();
	[/if]
	[if (feature.oclIsTypeOf(CollectionAssociation))]
    $this->[feature.modelPropertyName()/] = new ArrayCollection();
	[/if]
	[if (feature.isResource())]
    $this->[feature.modelPropertyName()/]  = new EmbeddedFile();
	[/if]
[/for]
}
[/template]

[template private idMethods(entity : Entity) post(trim())]
public function getId()
{
    return $this->[entity.autoKeyName/];
}
[/template]

[template private featureMethods(feature : Feature) post(trim())]
[if (feature.isResource())]
[feature.getFileMethod()/]

[feature.setFileMethod()/]

[/if]
[feature.getMethod()/]

[if (not feature.isDerived())]
	[if (feature.isSingleton())]
[feature.setMethod()/]

	[else]
		[if (feature.collectionOrmAllowAdd)]
[feature.addMethod()/]

		[/if]
		[if (feature.collectionOrmAllowRemove)]
[feature.removeMethod()/]

		[/if]
	[/if]
[/if]
[/template]

[template private getMethod(feature : Feature) post(trim())]
public function [feature.getMethodName()/]()
{
[if (feature.isDerived())]
    // [protected (feature.name.concat('.getMethod'))]
    [feature.getMethodCore()/]
    // [/protected]
[else]
    [feature.getMethodCore()/]
[/if]
}
[/template]

[template private getMethodCore(feature : Feature) post(trim())]
[if (feature.oclIsKindOf(Attribute))]
return $this->[feature.columnName/];
[else]
return $this->[feature.modelPropertyName()/];
[/if]
[/template]

[template private getFileMethod(feature : Feature) post(trim())]
public function [feature.getMethodName()/]File(): ?File
{
    return $this->[feature.modelPropertyName()/]File;
}
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(SingletonAttribute)) post(trim())]
[let attribute : SingletonAttribute = feature.oclAsType(SingletonAttribute)]
public function [attribute.setMethodName()/]($[attribute.instanceName()/])
{
[if (attribute.customiseSet)]
    // [protected (attribute.name.concat('.setMethod'))]
    [attribute.setMethodCore()/]
    // [/protected]
[else]
    [attribute.setMethodCore()/]
[/if]
}
[/let]
[/template]

[template private setMethodCore(attribute : SingletonAttribute) post(trim())]
[if (attribute.oclIsTypeOf(SingletonElement))]
[let element : SingletonElement = attribute.oclAsType(SingletonElement)]
	[if (element.caseInsensitive)]
$this->[element.columnName/] = strtolower(trim($[element.instanceName()/]));
	[elseif (element.encrypt)]
//				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
	[elseif (element.isEnumerationType() or element.isBooleanDataType())]
$this->[element.columnName/] = $[element.instanceName()/];
	[else]
$this->[element.columnName/] = trim($[element.instanceName()/]);
	[/if]
[/let]
[elseif (attribute.oclIsTypeOf(SingletonDate) or attribute.oclIsTypeOf(SingletonURL))]
$this->[attribute.columnName/] = $[attribute.instanceName()/];
[/if]
[/template]

[template private setFileMethod(feature : Feature) post(trim())]
/**
 * @param File|UploadedFile $[feature.getMethodName()/]
 **/
public function [feature.setMethodName()/]File(?File $[feature.instanceName()/] = null)
{
    $this->[feature.modelPropertyName()/]File = $[feature.instanceName()/];
    if (null !== $[feature.instanceName()/]) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
        $this->updated = new \DateTimeImmutable();
    }
}
[/template]

[template private setMethod(feature : Feature)
	? (feature.oclIsKindOf(Association)) post(trim())]
[let association : Association = feature.oclAsType(Association)]
public function set[association.modelPropertyName().toUpperFirst()/]($[association.instanceName()/])
{
[if (association.customiseSet)]
    // [protected (association.name.concat('.setMethod'))]
    $this->[association.modelPropertyName()/] = $[association.instanceName()/];
    // [/protected]
[else]
    $this->[association.modelPropertyName()/] = $[association.instanceName()/];
[/if]
}
[/let]
[/template]

[template private addMethod(feature : Feature) post(trim())]
public function [feature.addMethodName()/]($[feature.singletonName/])
{
[if (feature.isUnique())]
    if (!in_array($[feature.singletonName/], $this->[feature.modelPropertyName()/], true)) {
	[if (feature.oclIsKindOf(Attribute))]
        $this->[feature.columnName/]['['/][']'/] = $[feature.singletonName/];
	[else]
        $this->[feature.modelPropertyName()/]->add($[feature.singletonName/]);
	[/if]
    }
[else]
	[if (feature.oclIsKindOf(Attribute))]
    $this->[feature.columnName/]['['/][']'/] = $[feature.singletonName/];
	[else]
    $this->[feature.modelPropertyName()/]->add($[feature.singletonName/]);
	[/if]
[/if]
[if (feature.oclIsKindOf(Association) and not feature.isOwningEnd())]
[let association : Association = feature.oclAsType(Association)]
	[if (association.isOppositeSingleton())]
    $[association.singletonName/]->[association.opposite.setMethodName()/]($this);
	[else]
    $[association.singletonName/]->[if (association.opposite.collectionOrmAllowAdd)]
[association.opposite.addMethodName()/][else]
[association.opposite.getMethodName()/]->add[/if](this);
	[/if]
[/let]
[/if]
}
[/template]

[template private removeMethod(feature : Feature) post(trim())]
public function [feature.removeMethodName()/]($[feature.singletonName/])
{
[if (feature.oclIsKindOf(Attribute))]
    unset($this->[feature.columnName/]['['/]array_search($[feature.singletonName/], $this->[feature.columnName/])[']'/]);
[else]
    $this->[feature.modelPropertyName()/]->removeElement($[feature.singletonName/]);
[/if]
[if (feature.oclIsKindOf(Association) and not feature.isOwningEnd())]
[let association : Association = feature.oclAsType(Association)]
	[if (association.isOppositeSingleton())]
    $[association.singletonName/]->[association.opposite.setMethodName()/](null);
	[else]
    $[association.singletonName/]->[if (association.opposite.collectionOrmAllowRemove)]
[association.opposite.removeMethodName()/][else]
[association.opposite.getMethodName()/]->removeElement[/if](this);
	[/if]
[/let]
[/if]
}
[/template]

[template private userInterfaceMethods(entity : Entity) post(trim())]
public function getPassword() 
{ 
    return null; 
} 

public function getSalt() 
{ 
    return null; 
} 

public function eraseCredentials() 
{ 
} 
[/template]

[template private forumUserMethods(entity : Entity) post(trim())]
[if (entity.features->select(f | f.name = 'username')->isEmpty())]
/**
 * @return string
 */
public function getUsername()
{
    return $this->username;
}

/**
 * @param string $username
 *
 * @return User
 */
public function setUsername($username)
{
    $this->username = $username;
    return $this;
}

[/if]
/**
 * @return string
 */
public function getAvatarUrl()
{
    return $this->avatarUrl;
}

/**
 * @param string $avatarUrl
 *
 * @return User
 */
public function setAvatarUrl($avatarUrl)
{
    $this->avatarUrl = $avatarUrl;
    return $this;
}

/**
 * @return int
 */
public function getNbPost()
{
    return $this->nbPost;
}

/**
 * @param int $nbPost
 *
 * @return User
 */
public function setNbPost($nbPost)
{
    $this->nbPost = $nbPost;
    return $this;
}

public function addNbPost($nb)
{
    $this->nbPost += $nb;

    return $this;
}

/**
 * @return bool
 */
public function isBanned()
{
    return $this->banned;
}

/**
 * @param bool $banned
 *
 * @return User
 */
public function setBanned($banned)
{
    $this->banned = $banned;
    return $this;
}
[/template]

[template private timestampMethods(entity : Entity) post(trim())]
[if (entity.partOf.timestampCreation)]
public function getCreated()
{
    return $this->created;
}

[/if]
[if (entity.partOf.timestampUpdates)]
public function getUpdated()
{
    return $this->updated;
}
[/if]
[/template]

[template private label(label : ModelLabel) post(trim())]
public function get[label.name.toUpperFirst()/][if (not label.name.endsWith('Label'))]Label[/if]()
{
[if (label.customise)]
    // [protected ('label.'.concat(label.name))]
    [label.label2()/]
    // [/protected]
[else]
    [label.label2()/]
[/if]
}
[/template]

[template private label2(label : ModelLabel) post(trim())]
return sprintf('[label.format/]', [for (feature : ModelLabelFeature | label.features) separator(', ')]
$this->[if (feature.oclIsTypeOf(ModelLabelAttribute))]
[let attribute : ModelLabelAttribute = feature.oclAsType(ModelLabelAttribute)]
[attribute.attribute.columnName/][if (attribute.attribute.isDate())]->format('[attribute.dateFormat/]')[/if][/let][else]
[let association : ModelLabelAssociation = feature.oclAsType(ModelLabelAssociation)]
[association.association.modelPropertyName()/]->get[if (association.valueDisplay.oclIsUndefined())]Default[else][association.valueDisplay.name.toUpperFirst()/][/if]Label()[/let]
[/if][/for]);
[/template]
